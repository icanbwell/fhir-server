# This file is auto-generated by generate_classes so do not edit manually
{% macro lower_case_first_letter(text) %}
    {{- text[0]|lower}}{{text[1:] -}}
{% endmacro %}
{% macro upper_case_first_letter(text) %}
    {{- text[0]|upper}}{{text[1:] -}}
{% endmacro %}
{% for property in fhir_entity.properties_unique %}
    {% if property.type_ | replace(".","") != fhir_entity.cleaned_name %}
{#    # {{ property.name }} ({{ property.type_ }})#}
        {% if property.is_code %}
# import code from "../simple_types/code.graphql"
{#        {% elif property.is_basic_type %}#}
{#    from spark_auto_mapper_fhir.fhir_types.{{ property.type_snake_case }} import {{ property.cleaned_type | replace(".","")}}#}
        {% elif property.reference_target_resources %}
{#            we replace this with the target resource below#}
        {% elif property.is_resource %}
# import {{ property.type_ | replace(".","") }} from "../resources/{{ lower_case_first_letter(property.type_snake_case) }}.graphql"
        {% elif property.is_extension %}
# import {{ property.type_ | replace(".","") }} from "../extensions/{{ lower_case_first_letter(property.type_snake_case) }}.graphql"
        {% elif property.fhir_type == "BackboneElement" %}
# import {{ property.type_ | replace(".","") }} from "../backbone_elements/{{ lower_case_first_letter(property.type_snake_case) }}.graphql"
        {% elif property.is_complex or property.fhir_type == "Element" %}
# import {{ property.cleaned_type | replace(".","") }} from "../complex_types/{{ lower_case_first_letter(property.type_snake_case) }}.graphql"
        {% elif property.type_snake_case in ["string", "boolean", "integer", "positiveInt"] %}
{# do nothing since this is a GraphQL type            #}
        {%  else %}
# import {{ property.type_ | replace(".","") }} from "../simple_types/{{ lower_case_first_letter(property.type_snake_case) }}.graphql"
        {% endif %}
        {% if property.reference_target_resources %}
{## Imports for References for {{ property.name }}#}
            {% for reference_target_resource_name in property.reference_target_resources_names %}
# import {{ reference_target_resource_name }} from "../resources/{{ lower_case_first_letter(reference_target_resource_name) }}.graphql"
            {% endfor %}
        {% endif %}
    {% endif %}
{% endfor %}

{% for property in fhir_entity.properties %}
{% if property.reference_target_resources -%}
    {% if property.reference_target_resources | length > 1  %}
union {{fhir_entity.cleaned_name}}{{ upper_case_first_letter(property.name) }}{{ upper_case_first_letter(property.name_suffix) if property.name_suffix is not none }} = {{ property.reference_target_resources_names | unique | join(" | ") }}
    {%  endif %}
{% endif -%}
{% endfor %}


"""
{{fhir_entity.fhir_name}}
{% for documentation_item in fhir_entity.documentation %}
    {{ documentation_item | wordwrap(78) | replace('\n', '\n    ') | replace('\r', '\n    ') }}
{%  endfor %}
"""
type {{fhir_entity.cleaned_name}} {
    resourceType: String
{% for property in fhir_entity.properties %}
    {% if property.v2_support and not property.reference_target_resources %}
    {% else %}
    """
    {{ property.documentation[0] | wordwrap(78) | replace('\n', '\n    ') | replace('\r', '\n    ') }}
    """
    {{ property.name -}}{% if fhir_entity.fhir_name == "CodeSystem" and property.name == "concept" %}(code: [String]){% endif %}{{ ': ' -}}
        {% if property.is_list -%}
            {{ '[' -}}
        {% endif -%}
        {% if property.cleaned_type == "Extension" %}
        {{- 'Extension' -}}
        {% elif property.is_code %}
        {{- 'code' -}}
        {% elif property.reference_target_resources -%}
            {% if property.reference_target_resources | length > 1  %}
            {{- fhir_entity.cleaned_name}}{{ upper_case_first_letter(property.name) -}}
            {% else %}
            {{- property.reference_target_resources_names [0] -}}
            {%  endif %}
        {% else %}
        {{- property.cleaned_type | replace(".","") -}}
        {%  endif %}
        {% if property.is_list -%}
            {{ ']' -}}
        {% endif -%}
        {% if not property.reference_target_resources and not property.optional -%}
            {{- '!' -}}
        {% else -%}
            {{ '' -}}
        {% endif %}
        {{ '' }}
    {% endif %}
{% endfor %}
}

type {{fhir_entity.cleaned_name}}BundleEntry {
    """
    None
    """
    id: String
    """
    A series of links that provide context to this entry.
    """
    link: [BundleLink]
    """
    The Absolute URL for the resource.  The fullUrl SHALL NOT disagree with the id
    in the resource - i.e. if the fullUrl is not a urn:uuid, the URL shall be
    version-independent URL consistent with the Resource.id. The fullUrl is a
    version independent reference to the resource. The fullUrl element SHALL have
    a value except that:
    * fullUrl can be empty on a POST (although it does not need to when specifying
    a temporary id for reference in the bundle)
    * Results from operations might involve resources that are not identified.
    """
    fullUrl: uri
    """
    {{fhir_entity.cleaned_name}} resource
    """
    resource: {{fhir_entity.cleaned_name}}

    """
    Information about the search process that lead to the creation of this entry.
    """
    search: BundleSearch
    """
    Additional information about how this entry should be processed as part of a
    transaction or batch.  For history, it shows how the entry was processed to
    create the version contained in the entry.
    """
    request: BundleRequest
    """
    Indicates the results of processing the corresponding 'request' entry in the
    batch or transaction being responded to or what the results of an operation
    where when returning history.
    """
    response: BundleResponse
}

type {{fhir_entity.cleaned_name}}Bundle {
    id: String
    meta: Meta
    identifier: [Identifier]
    type: code
    timestamp: instant
    total: Int
    entry: [{{fhir_entity.cleaned_name}}BundleEntry]
}
