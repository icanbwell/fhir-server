/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');


/**
QuestionnaireResponse.Item
    A structured set of questions and their answers. The questions are ordered and
    grouped into coherent subsets, corresponding to the structure of the grouping
    of the questionnaire being responded to.
*/
class QuestionnaireResponseItem extends Resource {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {String} linkId,
     * @param {uri|undefined} [definition],
     * @param {String|undefined} [text],
     * @param {QuestionnaireResponseAnswer[]|undefined} [answer],
     * @param {QuestionnaireResponseItem[]|undefined} [item],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            linkId,
            definition,
            text,
            answer,
            item,
        }
    ) {
        super({});
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description The item from the Questionnaire that corresponds to this item in the
    QuestionnaireResponse resource.
         * @property {String}
        */
        Object.defineProperty(this, 'linkId', {
            enumerable: true,
            get: () => this.__data.linkId,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.linkId = valueProvided;
            }
        });

        /**
         * @description A reference to an [[[ElementDefinition]]] that provides the details for the
    item.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'definition', {
            enumerable: true,
            get: () => this.__data.definition,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.definition = valueProvided;
            }
        });

        /**
         * @description Text that is displayed above the contents of the group or as the text of the
    question being answered.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.text = valueProvided;
            }
        });

        /**
         * @description The respondent's answer(s) to the question.
         * @property {QuestionnaireResponseAnswer[]|undefined}
        */
        Object.defineProperty(this, 'answer', {
            enumerable: true,
            get: () => this.__data.answer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let QuestionnaireResponseAnswer = require('../backbone_elements/questionnaireResponseAnswer.js');
                this.__data.answer = Array.isArray(valueProvided) ? valueProvided.map(v => new QuestionnaireResponseAnswer(v)) : [new QuestionnaireResponseAnswer(valueProvided)];
            }
        });

        /**
         * @description Questions or sub-groups nested beneath a question or group.
         * @property {QuestionnaireResponseItem[]|undefined}
        */
        Object.defineProperty(this, 'item', {
            enumerable: true,
            get: () => this.__data.item,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.item = Array.isArray(valueProvided) ? valueProvided.map(v => new QuestionnaireResponseItem(v)) : [new QuestionnaireResponseItem(valueProvided)];
            }
        });

        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            linkId,
            definition,
            text,
            answer,
            item,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'QuestionnaireResponseItem',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'QuestionnaireResponseItem';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            linkId: this.linkId,
            definition: this.definition,
            text: this.text,
            answer: this.answer && this.answer.map(v => v.toJSON()),
            item: this.item && this.item.map(v => v.toJSON()),
        };
    }
}

module.exports = QuestionnaireResponseItem;
