// This file is auto-generated by generate_classes so do not edit manually

/**
Measure.Group
    The Measure resource provides the definition of a quality measure.
*/
class MeasureGroup {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description Indicates a meaning for the group. This can be as simple as a unique
    identifier, or it can establish meaning in a broader context by drawing from a
    terminology, allowing groups to be correlated across measures.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            get: () => this.__data.code,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.code = new CodeableConcept(value);
            }
        });

        /**
         * @description The human readable description of this population group.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.description = value;
            }
        });

        /**
         * @description A population criteria for the measure.
         * @property {MeasurePopulation[]|undefined}
        */
        Object.defineProperty(this, 'population', {
            enumerable: true,
            get: () => this.__data.population,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let MeasurePopulation = require('../backbone_elements/measurePopulation.js');
                this.__data.population = Array.isArray(value) ? value.map(v => new MeasurePopulation(v)) : [new MeasurePopulation(value)];
            }
        });

        /**
         * @description The stratifier criteria for the measure report, specified as either the name
    of a valid CQL expression defined within a referenced library or a valid FHIR
    Resource Path.
         * @property {MeasureStratifier[]|undefined}
        */
        Object.defineProperty(this, 'stratifier', {
            enumerable: true,
            get: () => this.__data.stratifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let MeasureStratifier = require('../backbone_elements/measureStratifier.js');
                this.__data.stratifier = Array.isArray(value) ? value.map(v => new MeasureStratifier(v)) : [new MeasureStratifier(value)];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'MeasureGroup',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'MeasureGroup';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            code: this.code && this.code.toJSON(),
            description: this.description,
            population: this.population && this.population.map(v => v.toJSON()),
            stratifier: this.stratifier && this.stratifier.map(v => v.toJSON()),
        };
    }
}

module.exports = MeasureGroup;
