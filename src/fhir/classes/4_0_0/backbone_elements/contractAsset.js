/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');
const Resource = require('../resources/resource');
const async = require('async');


/**
Contract.Asset
    Legally enforceable, formally recorded unilateral or bilateral directive i.e.,
    a policy or agreement.
*/
class ContractAsset extends Element {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {CodeableConcept|undefined} [scope],
     * @param {CodeableConcept[]|undefined} [type],
     * @param {Reference[]|undefined} [typeReference],
     * @param {CodeableConcept[]|undefined} [subtype],
     * @param {Coding|undefined} [relationship],
     * @param {ContractContext[]|undefined} [context],
     * @param {String|undefined} [condition],
     * @param {CodeableConcept[]|undefined} [periodType],
     * @param {Period[]|undefined} [period],
     * @param {Period[]|undefined} [usePeriod],
     * @param {String|undefined} [text],
     * @param {String[]|undefined} [linkId],
     * @param {ContractAnswer[]|undefined} [answer],
     * @param {unsignedInt[]|undefined} [securityLabelNumber],
     * @param {ContractValuedItem[]|undefined} [valuedItem],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            scope,
            type,
            typeReference,
            subtype,
            relationship,
            context,
            condition,
            periodType,
            period,
            usePeriod,
            text,
            linkId,
            answer,
            securityLabelNumber,
            valuedItem,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.extension = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Extension ?
                                v : new Extension(v)
                            );
                } else {
                    if (valueProvided instanceof Extension) {
                        this.__data.extension = valueProvided;
                    } else {
                        this.__data.extension = [new Extension(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.modifierExtension = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Extension ?
                                v : new Extension(v)
                            );
                } else {
                    if (valueProvided instanceof Extension) {
                        this.__data.modifierExtension = valueProvided;
                    } else {
                        this.__data.modifierExtension = [new Extension(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Differentiates the kind of the asset .
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'scope', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.scope,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.scope = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (valueProvided instanceof CodeableConcept){
                    this.__data.scope = valueProvided;
                } else {
                    this.__data.scope = new CodeableConcept(valueProvided);
                }
            }
        });

        /**
         * @description Target entity type about which the term may be concerned.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'type', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.type = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.type = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof CodeableConcept ?
                                v : new CodeableConcept(v)
                            );
                } else {
                    if (valueProvided instanceof CodeableConcept) {
                        this.__data.type = valueProvided;
                    } else {
                        this.__data.type = [new CodeableConcept(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Associated entities.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'typeReference', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.typeReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.typeReference = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.typeReference = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Reference ?
                                v : new Reference(v)
                            );
                } else {
                    if (valueProvided instanceof Reference) {
                        this.__data.typeReference = valueProvided;
                    } else {
                        this.__data.typeReference = [new Reference(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description May be a subtype or part of an offered asset.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'subtype', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.subtype,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.subtype = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.subtype = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof CodeableConcept ?
                                v : new CodeableConcept(v)
                            );
                } else {
                    if (valueProvided instanceof CodeableConcept) {
                        this.__data.subtype = valueProvided;
                    } else {
                        this.__data.subtype = [new CodeableConcept(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Specifies the applicability of the term to an asset resource instance, and
    instances it refers to orinstances that refer to it, and/or are owned by the
    offeree.
         * @property {Coding|undefined}
        */
        Object.defineProperty(this, 'relationship', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.relationship,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.relationship = undefined;
                    return;
                }
                const Coding = require('../complex_types/coding.js');
                if (valueProvided instanceof Coding){
                    this.__data.relationship = valueProvided;
                } else {
                    this.__data.relationship = new Coding(valueProvided);
                }
            }
        });

        /**
         * @description Circumstance of the asset.
         * @property {ContractContext[]|undefined}
        */
        Object.defineProperty(this, 'context', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.context,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.context = undefined;
                    return;
                }
                const ContractContext = require('../backbone_elements/contractContext.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.context = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof ContractContext ?
                                v : new ContractContext(v)
                            );
                } else {
                    if (valueProvided instanceof ContractContext) {
                        this.__data.context = valueProvided;
                    } else {
                        this.__data.context = [new ContractContext(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Description of the quality and completeness of the asset that imay be a factor
    in its valuation.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'condition', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.condition,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.condition = undefined;
                    return;
                }
                this.__data.condition = valueProvided;
            }
        });

        /**
         * @description Type of Asset availability for use or ownership.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'periodType', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.periodType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.periodType = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.periodType = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof CodeableConcept ?
                                v : new CodeableConcept(v)
                            );
                } else {
                    if (valueProvided instanceof CodeableConcept) {
                        this.__data.periodType = valueProvided;
                    } else {
                        this.__data.periodType = [new CodeableConcept(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Asset relevant contractual time period.
         * @property {Period[]|undefined}
        */
        Object.defineProperty(this, 'period', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.period,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.period = undefined;
                    return;
                }
                const Period = require('../complex_types/period.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.period = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Period ?
                                v : new Period(v)
                            );
                } else {
                    if (valueProvided instanceof Period) {
                        this.__data.period = valueProvided;
                    } else {
                        this.__data.period = [new Period(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Time period of asset use.
         * @property {Period[]|undefined}
        */
        Object.defineProperty(this, 'usePeriod', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.usePeriod,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.usePeriod = undefined;
                    return;
                }
                const Period = require('../complex_types/period.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.usePeriod = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Period ?
                                v : new Period(v)
                            );
                } else {
                    if (valueProvided instanceof Period) {
                        this.__data.usePeriod = valueProvided;
                    } else {
                        this.__data.usePeriod = [new Period(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Clause or question text (Prose Object) concerning the asset in a linked form,
    such as a QuestionnaireResponse used in the formation of the contract.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.text = undefined;
                    return;
                }
                this.__data.text = valueProvided;
            }
        });

        /**
         * @description Id [identifier??] of the clause or question text about the asset in the
    referenced form or QuestionnaireResponse.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'linkId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.linkId,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.linkId = undefined;
                    return;
                }
                this.__data.linkId = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => v) : [valueProvided];
            }
        });

        /**
         * @description Response to assets.
         * @property {ContractAnswer[]|undefined}
        */
        Object.defineProperty(this, 'answer', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.answer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.answer = undefined;
                    return;
                }
                const ContractAnswer = require('../backbone_elements/contractAnswer.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.answer = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof ContractAnswer ?
                                v : new ContractAnswer(v)
                            );
                } else {
                    if (valueProvided instanceof ContractAnswer) {
                        this.__data.answer = valueProvided;
                    } else {
                        this.__data.answer = [new ContractAnswer(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Security labels that protects the asset.
         * @property {unsignedInt[]|undefined}
        */
        Object.defineProperty(this, 'securityLabelNumber', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.securityLabelNumber,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.securityLabelNumber = undefined;
                    return;
                }
                this.__data.securityLabelNumber = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => v) : [valueProvided];
            }
        });

        /**
         * @description Contract Valued Item List.
         * @property {ContractValuedItem[]|undefined}
        */
        Object.defineProperty(this, 'valuedItem', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.valuedItem,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.valuedItem = undefined;
                    return;
                }
                const ContractValuedItem = require('../backbone_elements/contractValuedItem.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.valuedItem = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof ContractValuedItem ?
                                v : new ContractValuedItem(v)
                            );
                } else {
                    if (valueProvided instanceof ContractValuedItem) {
                        this.__data.valuedItem = valueProvided;
                    } else {
                        this.__data.valuedItem = [new ContractValuedItem(valueProvided)];
                    }
                }
            }
        });




        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            scope,
            type,
            typeReference,
            subtype,
            relationship,
            context,
            condition,
            periodType,
            period,
            usePeriod,
            text,
            linkId,
            answer,
            securityLabelNumber,
            valuedItem,
        });

    }



    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            scope: this.scope && this.scope.toJSON(),
            type: this.type && this.type.map(v => v.toJSON()),
            typeReference: this.typeReference && this.typeReference.map(v => v.toJSON()),
            subtype: this.subtype && this.subtype.map(v => v.toJSON()),
            relationship: this.relationship && this.relationship.toJSON(),
            context: this.context && this.context.map(v => v.toJSON()),
            condition: this.condition,
            periodType: this.periodType && this.periodType.map(v => v.toJSON()),
            period: this.period && this.period.map(v => v.toJSON()),
            usePeriod: this.usePeriod && this.usePeriod.map(v => v.toJSON()),
            text: this.text,
            linkId: this.linkId,
            answer: this.answer && this.answer.map(v => v.toJSON()),
            securityLabelNumber: this.securityLabelNumber,
            valuedItem: this.valuedItem && this.valuedItem.map(v => v.toJSON()),
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync({fnUpdateReferenceAsync}) {
            if (this.extension) {await async.each(this.extension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.modifierExtension) {await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.scope) {await this.scope.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.type) {await async.each(this.type, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.typeReference) {await async.each(this.typeReference, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.subtype) {await async.each(this.subtype, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.relationship) {await this.relationship.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.context) {await async.each(this.context, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.periodType) {await async.each(this.periodType, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.period) {await async.each(this.period, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.usePeriod) {await async.each(this.usePeriod, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.answer) {await async.each(this.answer, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.valuedItem) {await async.each(this.valuedItem, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal() {
        const {removeNull} = require('../../../../utils/nullRemover');
        const json = {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            scope: this.scope && this.scope.toJSONInternal(),
            type: this.type && this.type.map(v => v.toJSONInternal()),
            typeReference: this.typeReference && this.typeReference.map(v => v.toJSONInternal()),
            subtype: this.subtype && this.subtype.map(v => v.toJSONInternal()),
            relationship: this.relationship && this.relationship.toJSONInternal(),
            context: this.context && this.context.map(v => v.toJSONInternal()),
            condition: this.condition,
            periodType: this.periodType && this.periodType.map(v => v.toJSONInternal()),
            period: this.period && this.period.map(v => v.toJSONInternal()),
            usePeriod: this.usePeriod && this.usePeriod.map(v => v.toJSONInternal()),
            text: this.text,
            linkId: this.linkId,
            answer: this.answer && this.answer.map(v => v.toJSONInternal()),
            securityLabelNumber: this.securityLabelNumber,
            valuedItem: this.valuedItem && this.valuedItem.map(v => v.toJSONInternal()),
        };



        return removeNull(json);
    }
}

module.exports = ContractAsset;
