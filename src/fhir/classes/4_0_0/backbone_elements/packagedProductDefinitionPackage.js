

// This file is auto-generated by generate_classes so do not edit manually

const { removeNull } = require('../../../../utils/nullRemover');

const Element = require('../complex_types/element');
const Resource = require('../resources/resource');
const async = require('async');

/**
PackagedProductDefinition.Package
    A medically related item or items, in a container or package.
*/
class PackagedProductDefinitionPackage extends Element {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {CodeableConcept|undefined} [type],
     * @param {Int|undefined} [quantity],
     * @param {CodeableConcept[]|undefined} [material],
     * @param {CodeableConcept[]|undefined} [alternateMaterial],
     * @param {PackagedProductDefinitionShelfLifeStorage[]|undefined} [shelfLifeStorage],
     * @param {Reference[]|undefined} [manufacturer],
     * @param {PackagedProductDefinitionProperty[]|undefined} [property],
     * @param {PackagedProductDefinitionContainedItem[]|undefined} [containedItem],
     * @param {PackagedProductDefinitionPackage[]|undefined} [package],
    */
    constructor (
        {
            id,
            extension,
            modifierExtension,
            identifier,
            type,
            quantity,
            material,
            alternateMaterial,
            shelfLifeStorage,
            manufacturer,
            property,
            containedItem,
            package: _package,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.extension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.
    
    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.modifierExtension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description An identifier that is specific to this particular part of the packaging.
    Including possibly Data Carrier Identifier (a GS1 barcode).
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.identifier = undefined;
                    return;
                }
                const Identifier = require('../complex_types/identifier.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.identifier = FhirResourceCreator.createArray(valueProvided, Identifier);
            }
        });

        /**
         * @description The physical type of the container of the items.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'type', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.type = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.type = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description The quantity of this level of packaging in the package that contains it. If
    specified, the outermost level is always 1.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'quantity', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.quantity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.quantity = undefined;
                    return;
                }
                this.__data.quantity = valueProvided;
            }
        });

        /**
         * @description Material type of the package item.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'material', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.material,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.material = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.material = FhirResourceCreator.createArray(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description A possible alternate material for this part of the packaging, that is allowed
    to be used instead of the usual material (e.g. different types of plastic for
    a blister sleeve).
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'alternateMaterial', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.alternateMaterial,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.alternateMaterial = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.alternateMaterial = FhirResourceCreator.createArray(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Shelf Life and storage information.
         * @property {PackagedProductDefinitionShelfLifeStorage[]|undefined}
        */
        Object.defineProperty(this, 'shelfLifeStorage', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.shelfLifeStorage,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.shelfLifeStorage = undefined;
                    return;
                }
                const PackagedProductDefinitionShelfLifeStorage = require('../backbone_elements/packagedProductDefinitionShelfLifeStorage.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.shelfLifeStorage = FhirResourceCreator.createArray(valueProvided, PackagedProductDefinitionShelfLifeStorage);
            }
        });

        /**
         * @description Manufacturer of this package Item. When there are multiple it means these are
    all possible manufacturers.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'manufacturer', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.manufacturer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.manufacturer = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.manufacturer = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description General characteristics of this item.
         * @property {PackagedProductDefinitionProperty[]|undefined}
        */
        Object.defineProperty(this, 'property', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.property,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.property = undefined;
                    return;
                }
                const PackagedProductDefinitionProperty = require('../backbone_elements/packagedProductDefinitionProperty.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.property = FhirResourceCreator.createArray(valueProvided, PackagedProductDefinitionProperty);
            }
        });

        /**
         * @description The item(s) within the packaging.
         * @property {PackagedProductDefinitionContainedItem[]|undefined}
        */
        Object.defineProperty(this, 'containedItem', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.containedItem,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.containedItem = undefined;
                    return;
                }
                const PackagedProductDefinitionContainedItem = require('../backbone_elements/packagedProductDefinitionContainedItem.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.containedItem = FhirResourceCreator.createArray(valueProvided, PackagedProductDefinitionContainedItem);
            }
        });

        /**
         * @description Allows containers (and parts of containers) parwithin containers, still a
    single packaged product.  See also PackagedProductDefinition.package.contained
    Item.item(PackagedProductDefinition).
         * @property {PackagedProductDefinitionPackage[]|undefined}
        */
        Object.defineProperty(this, 'package', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.package,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.package = undefined;
                    return;
                }
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.package = FhirResourceCreator.createArray(valueProvided, PackagedProductDefinitionPackage);
            }
        });


        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            identifier,
            type,
            quantity,
            material,
            alternateMaterial,
            shelfLifeStorage,
            manufacturer,
            property,
            containedItem,
            package: _package,
        });
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON () {
        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            type: this.type && this.type.toJSON(),
            quantity: this.quantity,
            material: this.material && this.material.map(v => v.toJSON()),
            alternateMaterial: this.alternateMaterial && this.alternateMaterial.map(v => v.toJSON()),
            shelfLifeStorage: this.shelfLifeStorage && this.shelfLifeStorage.map(v => v.toJSON()),
            manufacturer: this.manufacturer && this.manufacturer.map(v => v.toJSON()),
            property: this.property && this.property.map(v => v.toJSON()),
            containedItem: this.containedItem && this.containedItem.map(v => v.toJSON()),
            package: this.package && this.package.map(v => v.toJSON()),
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync ({ fnUpdateReferenceAsync }) {
            if (this.extension) { await async.each(this.extension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.modifierExtension) { await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.identifier) { await async.each(this.identifier, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.type) { await this.type.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.material) { await async.each(this.material, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.alternateMaterial) { await async.each(this.alternateMaterial, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.shelfLifeStorage) { await async.each(this.shelfLifeStorage, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.manufacturer) { await async.each(this.manufacturer, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.property) { await async.each(this.property, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.containedItem) { await async.each(this.containedItem, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.package) { await async.each(this.package, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal () {
        const json = {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            identifier: this.identifier && this.identifier.map(v => v.toJSONInternal()),
            type: this.type && this.type.toJSONInternal(),
            quantity: this.quantity,
            material: this.material && this.material.map(v => v.toJSONInternal()),
            alternateMaterial: this.alternateMaterial && this.alternateMaterial.map(v => v.toJSONInternal()),
            shelfLifeStorage: this.shelfLifeStorage && this.shelfLifeStorage.map(v => v.toJSONInternal()),
            manufacturer: this.manufacturer && this.manufacturer.map(v => v.toJSONInternal()),
            property: this.property && this.property.map(v => v.toJSONInternal()),
            containedItem: this.containedItem && this.containedItem.map(v => v.toJSONInternal()),
            package: this.package && this.package.map(v => v.toJSONInternal()),
        };

        return removeNull(json);
    }
}

module.exports = PackagedProductDefinitionPackage;
