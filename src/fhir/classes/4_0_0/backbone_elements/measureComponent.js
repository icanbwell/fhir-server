/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const {Resource} = require('../resources/resource');


/**
Measure.Component
    The Measure resource provides the definition of a quality measure.
*/
class MeasureComponent extends Resource {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {CodeableConcept|undefined} [code],
     * @param {String|undefined} [description],
     * @param {Expression} criteria,
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            code,
            description,
            criteria,
        }
    ) {
        super({});
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description Indicates a meaning for the stratifier component. This can be as simple as a
    unique identifier, or it can establish meaning in a broader context by drawing
    from a terminology, allowing stratifiers to be correlated across measures.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            get: () => this.__data.code,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.code = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description The human readable description of this stratifier criteria component.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description An expression that specifies the criteria for this component of the
    stratifier. This is typically the name of an expression defined within a
    referenced library, but it may also be a path to a stratifier element.
         * @property {Expression}
        */
        Object.defineProperty(this, 'criteria', {
            enumerable: true,
            get: () => this.__data.criteria,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Expression = require('../complex_types/expression.js');
                this.__data.criteria = new Expression(valueProvided);
            }
        });

        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            code,
            description,
            criteria,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'MeasureComponent',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'MeasureComponent';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            code: this.code && this.code.toJSON(),
            description: this.description,
            criteria: this.criteria && this.criteria.toJSON(),
        };
    }
}

module.exports = MeasureComponent;
