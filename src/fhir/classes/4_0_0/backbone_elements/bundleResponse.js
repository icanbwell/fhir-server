/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');


/**
Bundle.Response
    A container for a collection of resources.
*/
class BundleResponse extends Resource {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {String} status,
     * @param {uri|undefined} [location],
     * @param {String|undefined} [etag],
     * @param {instant|undefined} [lastModified],
     * @param {ResourceContainer|undefined} [outcome],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            status,
            location,
            etag,
            lastModified,
            outcome,
        }
    ) {
        super({});
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description The status code returned by processing this entry. The status SHALL start with
    a 3 digit HTTP code (e.g. 404) and may contain the standard HTTP description
    associated with the status code.
         * @property {String}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description The location header created by processing this operation, populated if the
    operation returns a location.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'location', {
            enumerable: true,
            get: () => this.__data.location,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.location = valueProvided;
            }
        });

        /**
         * @description The Etag for the resource, if the operation for the entry produced a versioned
    resource (see [Resource Metadata and Versioning](http.html#versioning) and
    [Managing Resource Contention](http.html#concurrency)).
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'etag', {
            enumerable: true,
            get: () => this.__data.etag,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.etag = valueProvided;
            }
        });

        /**
         * @description The date/time that the resource was modified on the server.
         * @property {instant|undefined}
        */
        Object.defineProperty(this, 'lastModified', {
            enumerable: true,
            get: () => this.__data.lastModified,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.lastModified = valueProvided;
            }
        });

        /**
         * @description An OperationOutcome containing hints and warnings produced as part of
    processing this entry in a batch or transaction.
         * @property {ResourceContainer|undefined}
        */
        Object.defineProperty(this, 'outcome', {
            enumerable: true,
            get: () => this.__data.outcome,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.outcome = valueProvided;
            }
        });

        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            status,
            location,
            etag,
            lastModified,
            outcome,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'BundleResponse',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'BundleResponse';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            status: this.status,
            location: this.location,
            etag: this.etag,
            lastModified: this.lastModified,
            outcome: this.outcome,
        };
    }
}

module.exports = BundleResponse;
