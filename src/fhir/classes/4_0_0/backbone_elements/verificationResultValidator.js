// This file is auto-generated by generate_classes so do not edit manually

/**
VerificationResult.Validator
    Describes validation requirements, source(s), status and dates for one or more
    elements.
*/
class VerificationResultValidator {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description Reference to the organization validating information.
         * @property {Organization}
        */
        Object.defineProperty(this, 'organization', {
            enumerable: true,
            get: () => this.__data.organization,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.organization = new Reference(value);
            }
        });

        /**
         * @description A digital identity certificate associated with the validator.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'identityCertificate', {
            enumerable: true,
            get: () => this.__data.identityCertificate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.identityCertificate = value;
            }
        });

        /**
         * @description Signed assertion by the validator that they have validated the information.
         * @property {Signature|undefined}
        */
        Object.defineProperty(this, 'attestationSignature', {
            enumerable: true,
            get: () => this.__data.attestationSignature,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Signature = require('../complex_types/signature.js');
                this.__data.attestationSignature = new Signature(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'VerificationResultValidator',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'VerificationResultValidator';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            organization: this.organization && this.organization.toJSON(),
            identityCertificate: this.identityCertificate,
            attestationSignature: this.attestationSignature && this.attestationSignature.toJSON(),
        };
    }
}

module.exports = VerificationResultValidator;
