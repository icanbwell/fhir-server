// This file is auto-generated by generate_classes so do not edit manually

/**
Dosage
    Indicates how the medication is/was taken or should be taken by the patient.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class Dosage {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description Indicates the order in which the dosage instructions should be applied or
    interpreted.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'sequence', {
            enumerable: true,
            get: () => this.__data.sequence,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.sequence = value;
            }
        });

        /**
         * @description Free text dosage instructions e.g. SIG.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.text = value;
            }
        });

        /**
         * @description Supplemental instructions to the patient on how to take the medication  (e.g.
    "with meals" or"take half to one hour before food") or warnings for the
    patient about the medication (e.g. "may cause drowsiness" or "avoid exposure
    of skin to direct sunlight or sunlamps").
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'additionalInstruction', {
            enumerable: true,
            get: () => this.__data.additionalInstruction,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.additionalInstruction = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description Instructions in terms that are understood by the patient or consumer.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'patientInstruction', {
            enumerable: true,
            get: () => this.__data.patientInstruction,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.patientInstruction = value;
            }
        });

        /**
         * @description When medication should be administered.
         * @property {Timing|undefined}
        */
        Object.defineProperty(this, 'timing', {
            enumerable: true,
            get: () => this.__data.timing,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Timing = require('../backbone_elements/timing.js');
                this.__data.timing = new Timing(value);
            }
        });

        /**
         * @description None
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'asNeededBoolean', {
            enumerable: true,
            get: () => this.__data.asNeededBoolean,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.asNeededBoolean = value;
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'asNeededCodeableConcept', {
            enumerable: true,
            get: () => this.__data.asNeededCodeableConcept,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.asNeededCodeableConcept = new CodeableConcept(value);
            }
        });

        /**
         * @description Body site to administer to.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'site', {
            enumerable: true,
            get: () => this.__data.site,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.site = new CodeableConcept(value);
            }
        });

        /**
         * @description How drug should enter body.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'route', {
            enumerable: true,
            get: () => this.__data.route,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.route = new CodeableConcept(value);
            }
        });

        /**
         * @description Technique for administering medication.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'method', {
            enumerable: true,
            get: () => this.__data.method,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.method = new CodeableConcept(value);
            }
        });

        /**
         * @description The amount of medication administered.
         * @property {DosageDoseAndRate[]|undefined}
        */
        Object.defineProperty(this, 'doseAndRate', {
            enumerable: true,
            get: () => this.__data.doseAndRate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let DosageDoseAndRate = require('../backbone_elements/dosageDoseAndRate.js');
                this.__data.doseAndRate = Array.isArray(value) ? value.map(v => new DosageDoseAndRate(v)) : [new DosageDoseAndRate(value)];
            }
        });

        /**
         * @description Upper limit on medication per unit of time.
         * @property {Ratio|undefined}
        */
        Object.defineProperty(this, 'maxDosePerPeriod', {
            enumerable: true,
            get: () => this.__data.maxDosePerPeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Ratio = require('../complex_types/ratio.js');
                this.__data.maxDosePerPeriod = new Ratio(value);
            }
        });

        /**
         * @description Upper limit on medication per administration.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'maxDosePerAdministration', {
            enumerable: true,
            get: () => this.__data.maxDosePerAdministration,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.maxDosePerAdministration = new Quantity(value);
            }
        });

        /**
         * @description Upper limit on medication per lifetime of the patient.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'maxDosePerLifetime', {
            enumerable: true,
            get: () => this.__data.maxDosePerLifetime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.maxDosePerLifetime = new Quantity(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Dosage',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Dosage';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            sequence: this.sequence,
            text: this.text,
            additionalInstruction: this.additionalInstruction && this.additionalInstruction.map(v => v.toJSON()),
            patientInstruction: this.patientInstruction,
            timing: this.timing && this.timing.toJSON(),
            asNeededBoolean: this.asNeededBoolean,
            asNeededCodeableConcept: this.asNeededCodeableConcept && this.asNeededCodeableConcept.toJSON(),
            site: this.site && this.site.toJSON(),
            route: this.route && this.route.toJSON(),
            method: this.method && this.method.toJSON(),
            doseAndRate: this.doseAndRate && this.doseAndRate.map(v => v.toJSON()),
            maxDosePerPeriod: this.maxDosePerPeriod && this.maxDosePerPeriod.toJSON(),
            maxDosePerAdministration: this.maxDosePerAdministration && this.maxDosePerAdministration.toJSON(),
            maxDosePerLifetime: this.maxDosePerLifetime && this.maxDosePerLifetime.toJSON(),
        };
    }
}

module.exports = Dosage;
