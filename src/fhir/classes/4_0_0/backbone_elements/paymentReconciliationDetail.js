/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

/**
PaymentReconciliation.Detail
    This resource provides the details including amount of a payment and allocates
    the payment items being paid.
*/
class PaymentReconciliationDetail {
    constructor(
        {
            id,
            extension,
            modifierExtension,
            identifier,
            predecessor,
            type,
            request,
            submitter,
            response,
            date,
            responsible,
            payee,
            amount,
        }
    ) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description Unique identifier for the current payment item for the referenced payable.
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = new Identifier(valueProvided);
            }
        });

        /**
         * @description Unique identifier for the prior payment item for the referenced payable.
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'predecessor', {
            enumerable: true,
            get: () => this.__data.predecessor,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.predecessor = new Identifier(valueProvided);
            }
        });

        /**
         * @description Code to indicate the nature of the payment.
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.type = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description A resource, such as a Claim, the evaluation of which could lead to payment.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'request', {
            enumerable: true,
            get: () => this.__data.request,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.request = new Reference(valueProvided);
            }
        });

        /**
         * @description The party which submitted the claim or financial transaction.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'submitter', {
            enumerable: true,
            get: () => this.__data.submitter,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.submitter = new Reference(valueProvided);
            }
        });

        /**
         * @description A resource, such as a ClaimResponse, which contains a commitment to payment.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'response', {
            enumerable: true,
            get: () => this.__data.response,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.response = new Reference(valueProvided);
            }
        });

        /**
         * @description The date from the response resource containing a commitment to pay.
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'date', {
            enumerable: true,
            get: () => this.__data.date,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.date = valueProvided;
            }
        });

        /**
         * @description A reference to the individual who is responsible for inquiries regarding the
    response and its payment.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'responsible', {
            enumerable: true,
            get: () => this.__data.responsible,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.responsible = new Reference(valueProvided);
            }
        });

        /**
         * @description The party which is receiving the payment.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'payee', {
            enumerable: true,
            get: () => this.__data.payee,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.payee = new Reference(valueProvided);
            }
        });

        /**
         * @description The monetary amount allocated from the total payment to the payable.
         * @property {Money|undefined}
        */
        Object.defineProperty(this, 'amount', {
            enumerable: true,
            get: () => this.__data.amount,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Money = require('../complex_types/money.js');
                this.__data.amount = new Money(valueProvided);
            }
        });

        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            identifier,
            predecessor,
            type,
            request,
            submitter,
            response,
            date,
            responsible,
            payee,
            amount,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'PaymentReconciliationDetail',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'PaymentReconciliationDetail';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.toJSON(),
            predecessor: this.predecessor && this.predecessor.toJSON(),
            type: this.type && this.type.toJSON(),
            request: this.request && this.request.toJSON(),
            submitter: this.submitter && this.submitter.toJSON(),
            response: this.response && this.response.toJSON(),
            date: this.date,
            responsible: this.responsible && this.responsible.toJSON(),
            payee: this.payee && this.payee.toJSON(),
            amount: this.amount && this.amount.toJSON(),
        };
    }
}

module.exports = PaymentReconciliationDetail;
