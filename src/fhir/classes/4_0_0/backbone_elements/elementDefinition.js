/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

/**
ElementDefinition
    Captures constraints on each element within the resource, profile, or
    extension.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class ElementDefinition {
    constructor(
        {
            id,
            extension,
            modifierExtension,
            path,
            representation,
            sliceName,
            sliceIsConstraining,
            label,
            code,
            slicing,
            short,
            definition,
            comment,
            requirements,
            alias,
            min,
            max,
            base,
            contentReference,
            type,
            defaultValueBase64Binary,
            defaultValueBoolean,
            defaultValueCanonical,
            defaultValueCode,
            defaultValueDate,
            defaultValueDateTime,
            defaultValueDecimal,
            defaultValueId,
            defaultValueInstant,
            defaultValueInteger,
            defaultValueMarkdown,
            defaultValueOid,
            defaultValuePositiveInt,
            defaultValueString,
            defaultValueTime,
            defaultValueUnsignedInt,
            defaultValueUri,
            defaultValueUrl,
            defaultValueUuid,
            defaultValueAddress,
            defaultValueAge,
            defaultValueAnnotation,
            defaultValueAttachment,
            defaultValueCodeableConcept,
            defaultValueCoding,
            defaultValueContactPoint,
            defaultValueCount,
            defaultValueDistance,
            defaultValueDuration,
            defaultValueHumanName,
            defaultValueIdentifier,
            defaultValueMoney,
            defaultValuePeriod,
            defaultValueQuantity,
            defaultValueRange,
            defaultValueRatio,
            defaultValueReference,
            defaultValueSampledData,
            defaultValueSignature,
            defaultValueTiming,
            defaultValueContactDetail,
            defaultValueContributor,
            defaultValueDataRequirement,
            defaultValueExpression,
            defaultValueParameterDefinition,
            defaultValueRelatedArtifact,
            defaultValueTriggerDefinition,
            defaultValueUsageContext,
            defaultValueDosage,
            defaultValueMeta,
            meaningWhenMissing,
            orderMeaning,
            fixedBase64Binary,
            fixedBoolean,
            fixedCanonical,
            fixedCode,
            fixedDate,
            fixedDateTime,
            fixedDecimal,
            fixedId,
            fixedInstant,
            fixedInteger,
            fixedMarkdown,
            fixedOid,
            fixedPositiveInt,
            fixedString,
            fixedTime,
            fixedUnsignedInt,
            fixedUri,
            fixedUrl,
            fixedUuid,
            fixedAddress,
            fixedAge,
            fixedAnnotation,
            fixedAttachment,
            fixedCodeableConcept,
            fixedCoding,
            fixedContactPoint,
            fixedCount,
            fixedDistance,
            fixedDuration,
            fixedHumanName,
            fixedIdentifier,
            fixedMoney,
            fixedPeriod,
            fixedQuantity,
            fixedRange,
            fixedRatio,
            fixedReference,
            fixedSampledData,
            fixedSignature,
            fixedTiming,
            fixedContactDetail,
            fixedContributor,
            fixedDataRequirement,
            fixedExpression,
            fixedParameterDefinition,
            fixedRelatedArtifact,
            fixedTriggerDefinition,
            fixedUsageContext,
            fixedDosage,
            fixedMeta,
            patternBase64Binary,
            patternBoolean,
            patternCanonical,
            patternCode,
            patternDate,
            patternDateTime,
            patternDecimal,
            patternId,
            patternInstant,
            patternInteger,
            patternMarkdown,
            patternOid,
            patternPositiveInt,
            patternString,
            patternTime,
            patternUnsignedInt,
            patternUri,
            patternUrl,
            patternUuid,
            patternAddress,
            patternAge,
            patternAnnotation,
            patternAttachment,
            patternCodeableConcept,
            patternCoding,
            patternContactPoint,
            patternCount,
            patternDistance,
            patternDuration,
            patternHumanName,
            patternIdentifier,
            patternMoney,
            patternPeriod,
            patternQuantity,
            patternRange,
            patternRatio,
            patternReference,
            patternSampledData,
            patternSignature,
            patternTiming,
            patternContactDetail,
            patternContributor,
            patternDataRequirement,
            patternExpression,
            patternParameterDefinition,
            patternRelatedArtifact,
            patternTriggerDefinition,
            patternUsageContext,
            patternDosage,
            patternMeta,
            example,
            minValueDate,
            minValueDateTime,
            minValueInstant,
            minValueTime,
            minValueDecimal,
            minValueInteger,
            minValuePositiveInt,
            minValueUnsignedInt,
            minValueQuantity,
            maxValueDate,
            maxValueDateTime,
            maxValueInstant,
            maxValueTime,
            maxValueDecimal,
            maxValueInteger,
            maxValuePositiveInt,
            maxValueUnsignedInt,
            maxValueQuantity,
            maxLength,
            condition,
            constraint,
            mustSupport,
            isModifier,
            isModifierReason,
            isSummary,
            binding,
            mapping,
        }
    ) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description The path identifies the element and is expressed as a "."-separated list of
    ancestor elements, beginning with the name of the resource or extension.
         * @property {String}
        */
        Object.defineProperty(this, 'path', {
            enumerable: true,
            get: () => this.__data.path,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.path = valueProvided;
            }
        });

        /**
         * @description Codes that define how this element is represented in instances, when the
    deviation varies from the normal case.
         * @property {code[]|undefined}
        */
        Object.defineProperty(this, 'representation', {
            enumerable: true,
            get: () => this.__data.representation,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.representation = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description The name of this element definition slice, when slicing is working. The name
    must be a token with no dots or spaces. This is a unique name referring to a
    specific set of constraints applied to this element, used to provide a name to
    different slices of the same element.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'sliceName', {
            enumerable: true,
            get: () => this.__data.sliceName,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.sliceName = valueProvided;
            }
        });

        /**
         * @description If true, indicates that this slice definition is constraining a slice
    definition with the same name in an inherited profile. If false, the slice is
    not overriding any slice in an inherited profile. If missing, the slice might
    or might not be overriding a slice in an inherited profile, depending on the
    sliceName.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'sliceIsConstraining', {
            enumerable: true,
            get: () => this.__data.sliceIsConstraining,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.sliceIsConstraining = valueProvided;
            }
        });

        /**
         * @description A single preferred label which is the text to display beside the element
    indicating its meaning or to use to prompt for the element in a user display
    or form.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'label', {
            enumerable: true,
            get: () => this.__data.label,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.label = valueProvided;
            }
        });

        /**
         * @description A code that has the same meaning as the element in a particular terminology.
         * @property {Coding[]|undefined}
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            get: () => this.__data.code,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.code = Array.isArray(valueProvided) ? valueProvided.map(v => new Coding(v)) : [new Coding(valueProvided)];
            }
        });

        /**
         * @description Indicates that the element is sliced into a set of alternative definitions
    (i.e. in a structure definition, there are multiple different constraints on a
    single element in the base resource). Slicing can be used in any resource that
    has cardinality ..* on the base resource, or any resource with a choice of
    types. The set of slices is any elements that come after this in the element
    sequence that have the same path, until a shorter path occurs (the shorter
    path terminates the set).
         * @property {ElementDefinitionSlicing|undefined}
        */
        Object.defineProperty(this, 'slicing', {
            enumerable: true,
            get: () => this.__data.slicing,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ElementDefinitionSlicing = require('../backbone_elements/elementDefinitionSlicing.js');
                this.__data.slicing = new ElementDefinitionSlicing(valueProvided);
            }
        });

        /**
         * @description A concise description of what this element means (e.g. for use in
    autogenerated summaries).
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'short', {
            enumerable: true,
            get: () => this.__data.short,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.short = valueProvided;
            }
        });

        /**
         * @description Provides a complete explanation of the meaning of the data element for human
    readability.  For the case of elements derived from existing elements (e.g.
    constraints), the definition SHALL be consistent with the base definition, but
    convey the meaning of the element in the particular context of use of the
    resource. (Note: The text you are reading is specified in
    ElementDefinition.definition).
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'definition', {
            enumerable: true,
            get: () => this.__data.definition,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.definition = valueProvided;
            }
        });

        /**
         * @description Explanatory notes and implementation guidance about the data element,
    including notes about how to use the data properly, exceptions to proper use,
    etc. (Note: The text you are reading is specified in
    ElementDefinition.comment).
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'comment', {
            enumerable: true,
            get: () => this.__data.comment,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.comment = valueProvided;
            }
        });

        /**
         * @description This element is for traceability of why the element was created and why the
    constraints exist as they do. This may be used to point to source materials or
    specifications that drove the structure of this element.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'requirements', {
            enumerable: true,
            get: () => this.__data.requirements,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.requirements = valueProvided;
            }
        });

        /**
         * @description Identifies additional names by which this element might also be known.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'alias', {
            enumerable: true,
            get: () => this.__data.alias,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.alias = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description The minimum number of times this element SHALL appear in the instance.
         * @property {unsignedInt|undefined}
        */
        Object.defineProperty(this, 'min', {
            enumerable: true,
            get: () => this.__data.min,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.min = valueProvided;
            }
        });

        /**
         * @description The maximum number of times this element is permitted to appear in the
    instance.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'max', {
            enumerable: true,
            get: () => this.__data.max,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.max = valueProvided;
            }
        });

        /**
         * @description Information about the base definition of the element, provided to make it
    unnecessary for tools to trace the deviation of the element through the
    derived and related profiles. When the element definition is not the original
    definition of an element - i.g. either in a constraint on another type, or for
    elements from a super type in a snap shot - then the information in provided
    in the element definition may be different to the base definition. On the
    original definition of the element, it will be same.
         * @property {ElementDefinitionBase|undefined}
        */
        Object.defineProperty(this, 'base', {
            enumerable: true,
            get: () => this.__data.base,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ElementDefinitionBase = require('../backbone_elements/elementDefinitionBase.js');
                this.__data.base = new ElementDefinitionBase(valueProvided);
            }
        });

        /**
         * @description Identifies an element defined elsewhere in the definition whose content rules
    should be applied to the current element. ContentReferences bring across all
    the rules that are in the ElementDefinition for the element, including
    definitions, cardinality constraints, bindings, invariants etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'contentReference', {
            enumerable: true,
            get: () => this.__data.contentReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.contentReference = valueProvided;
            }
        });

        /**
         * @description The data type or resource that the value of this element is permitted to be.
         * @property {ElementDefinitionType[]|undefined}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ElementDefinitionType = require('../backbone_elements/elementDefinitionType.js');
                this.__data.type = Array.isArray(valueProvided) ? valueProvided.map(v => new ElementDefinitionType(v)) : [new ElementDefinitionType(valueProvided)];
            }
        });

        /**
         * @description None
         * @property {base64Binary|undefined}
        */
        Object.defineProperty(this, 'defaultValueBase64Binary', {
            enumerable: true,
            get: () => this.__data.defaultValueBase64Binary,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.defaultValueBase64Binary = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'defaultValueBoolean', {
            enumerable: true,
            get: () => this.__data.defaultValueBoolean,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.defaultValueBoolean = valueProvided;
            }
        });

        /**
         * @description None
         * @property {canonical|undefined}
        */
        Object.defineProperty(this, 'defaultValueCanonical', {
            enumerable: true,
            get: () => this.__data.defaultValueCanonical,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.defaultValueCanonical = valueProvided;
            }
        });

        /**
         * @description None
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'defaultValueCode', {
            enumerable: true,
            get: () => this.__data.defaultValueCode,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.defaultValueCode = valueProvided;
            }
        });

        /**
         * @description None
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'defaultValueDate', {
            enumerable: true,
            get: () => this.__data.defaultValueDate,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.defaultValueDate = valueProvided;
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'defaultValueDateTime', {
            enumerable: true,
            get: () => this.__data.defaultValueDateTime,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.defaultValueDateTime = valueProvided;
            }
        });

        /**
         * @description None
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'defaultValueDecimal', {
            enumerable: true,
            get: () => this.__data.defaultValueDecimal,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.defaultValueDecimal = valueProvided;
            }
        });

        /**
         * @description None
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'defaultValueId', {
            enumerable: true,
            get: () => this.__data.defaultValueId,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.defaultValueId = valueProvided;
            }
        });

        /**
         * @description None
         * @property {instant|undefined}
        */
        Object.defineProperty(this, 'defaultValueInstant', {
            enumerable: true,
            get: () => this.__data.defaultValueInstant,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.defaultValueInstant = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'defaultValueInteger', {
            enumerable: true,
            get: () => this.__data.defaultValueInteger,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.defaultValueInteger = valueProvided;
            }
        });

        /**
         * @description None
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'defaultValueMarkdown', {
            enumerable: true,
            get: () => this.__data.defaultValueMarkdown,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.defaultValueMarkdown = valueProvided;
            }
        });

        /**
         * @description None
         * @property {oid|undefined}
        */
        Object.defineProperty(this, 'defaultValueOid', {
            enumerable: true,
            get: () => this.__data.defaultValueOid,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.defaultValueOid = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'defaultValuePositiveInt', {
            enumerable: true,
            get: () => this.__data.defaultValuePositiveInt,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.defaultValuePositiveInt = valueProvided;
            }
        });

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'defaultValueString', {
            enumerable: true,
            get: () => this.__data.defaultValueString,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.defaultValueString = valueProvided;
            }
        });

        /**
         * @description None
         * @property {time|undefined}
        */
        Object.defineProperty(this, 'defaultValueTime', {
            enumerable: true,
            get: () => this.__data.defaultValueTime,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.defaultValueTime = valueProvided;
            }
        });

        /**
         * @description None
         * @property {unsignedInt|undefined}
        */
        Object.defineProperty(this, 'defaultValueUnsignedInt', {
            enumerable: true,
            get: () => this.__data.defaultValueUnsignedInt,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.defaultValueUnsignedInt = valueProvided;
            }
        });

        /**
         * @description None
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'defaultValueUri', {
            enumerable: true,
            get: () => this.__data.defaultValueUri,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.defaultValueUri = valueProvided;
            }
        });

        /**
         * @description None
         * @property {url|undefined}
        */
        Object.defineProperty(this, 'defaultValueUrl', {
            enumerable: true,
            get: () => this.__data.defaultValueUrl,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.defaultValueUrl = valueProvided;
            }
        });

        /**
         * @description None
         * @property {uuid|undefined}
        */
        Object.defineProperty(this, 'defaultValueUuid', {
            enumerable: true,
            get: () => this.__data.defaultValueUuid,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.defaultValueUuid = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Address|undefined}
        */
        Object.defineProperty(this, 'defaultValueAddress', {
            enumerable: true,
            get: () => this.__data.defaultValueAddress,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Address = require('../complex_types/address.js');
                this.__data.defaultValueAddress = new Address(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'defaultValueAge', {
            enumerable: true,
            get: () => this.__data.defaultValueAge,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.defaultValueAge = new Quantity(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Annotation|undefined}
        */
        Object.defineProperty(this, 'defaultValueAnnotation', {
            enumerable: true,
            get: () => this.__data.defaultValueAnnotation,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.defaultValueAnnotation = new Annotation(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Attachment|undefined}
        */
        Object.defineProperty(this, 'defaultValueAttachment', {
            enumerable: true,
            get: () => this.__data.defaultValueAttachment,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Attachment = require('../complex_types/attachment.js');
                this.__data.defaultValueAttachment = new Attachment(valueProvided);
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'defaultValueCodeableConcept', {
            enumerable: true,
            get: () => this.__data.defaultValueCodeableConcept,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.defaultValueCodeableConcept = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Coding|undefined}
        */
        Object.defineProperty(this, 'defaultValueCoding', {
            enumerable: true,
            get: () => this.__data.defaultValueCoding,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.defaultValueCoding = new Coding(valueProvided);
            }
        });

        /**
         * @description None
         * @property {ContactPoint|undefined}
        */
        Object.defineProperty(this, 'defaultValueContactPoint', {
            enumerable: true,
            get: () => this.__data.defaultValueContactPoint,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ContactPoint = require('../complex_types/contactPoint.js');
                this.__data.defaultValueContactPoint = new ContactPoint(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'defaultValueCount', {
            enumerable: true,
            get: () => this.__data.defaultValueCount,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.defaultValueCount = new Quantity(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'defaultValueDistance', {
            enumerable: true,
            get: () => this.__data.defaultValueDistance,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.defaultValueDistance = new Quantity(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'defaultValueDuration', {
            enumerable: true,
            get: () => this.__data.defaultValueDuration,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.defaultValueDuration = new Quantity(valueProvided);
            }
        });

        /**
         * @description None
         * @property {HumanName|undefined}
        */
        Object.defineProperty(this, 'defaultValueHumanName', {
            enumerable: true,
            get: () => this.__data.defaultValueHumanName,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let HumanName = require('../complex_types/humanName.js');
                this.__data.defaultValueHumanName = new HumanName(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'defaultValueIdentifier', {
            enumerable: true,
            get: () => this.__data.defaultValueIdentifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.defaultValueIdentifier = new Identifier(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Money|undefined}
        */
        Object.defineProperty(this, 'defaultValueMoney', {
            enumerable: true,
            get: () => this.__data.defaultValueMoney,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Money = require('../complex_types/money.js');
                this.__data.defaultValueMoney = new Money(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'defaultValuePeriod', {
            enumerable: true,
            get: () => this.__data.defaultValuePeriod,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.defaultValuePeriod = new Period(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'defaultValueQuantity', {
            enumerable: true,
            get: () => this.__data.defaultValueQuantity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.defaultValueQuantity = new Quantity(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Range|undefined}
        */
        Object.defineProperty(this, 'defaultValueRange', {
            enumerable: true,
            get: () => this.__data.defaultValueRange,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Range = require('../complex_types/range.js');
                this.__data.defaultValueRange = new Range(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Ratio|undefined}
        */
        Object.defineProperty(this, 'defaultValueRatio', {
            enumerable: true,
            get: () => this.__data.defaultValueRatio,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Ratio = require('../complex_types/ratio.js');
                this.__data.defaultValueRatio = new Ratio(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'defaultValueReference', {
            enumerable: true,
            get: () => this.__data.defaultValueReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.defaultValueReference = new Reference(valueProvided);
            }
        });

        /**
         * @description None
         * @property {SampledData|undefined}
        */
        Object.defineProperty(this, 'defaultValueSampledData', {
            enumerable: true,
            get: () => this.__data.defaultValueSampledData,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let SampledData = require('../complex_types/sampledData.js');
                this.__data.defaultValueSampledData = new SampledData(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Signature|undefined}
        */
        Object.defineProperty(this, 'defaultValueSignature', {
            enumerable: true,
            get: () => this.__data.defaultValueSignature,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Signature = require('../complex_types/signature.js');
                this.__data.defaultValueSignature = new Signature(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Timing|undefined}
        */
        Object.defineProperty(this, 'defaultValueTiming', {
            enumerable: true,
            get: () => this.__data.defaultValueTiming,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Timing = require('../backbone_elements/timing.js');
                this.__data.defaultValueTiming = new Timing(valueProvided);
            }
        });

        /**
         * @description None
         * @property {ContactDetail|undefined}
        */
        Object.defineProperty(this, 'defaultValueContactDetail', {
            enumerable: true,
            get: () => this.__data.defaultValueContactDetail,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.defaultValueContactDetail = new ContactDetail(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Contributor|undefined}
        */
        Object.defineProperty(this, 'defaultValueContributor', {
            enumerable: true,
            get: () => this.__data.defaultValueContributor,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Contributor = require('../complex_types/contributor.js');
                this.__data.defaultValueContributor = new Contributor(valueProvided);
            }
        });

        /**
         * @description None
         * @property {DataRequirement|undefined}
        */
        Object.defineProperty(this, 'defaultValueDataRequirement', {
            enumerable: true,
            get: () => this.__data.defaultValueDataRequirement,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let DataRequirement = require('../complex_types/dataRequirement.js');
                this.__data.defaultValueDataRequirement = new DataRequirement(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Expression|undefined}
        */
        Object.defineProperty(this, 'defaultValueExpression', {
            enumerable: true,
            get: () => this.__data.defaultValueExpression,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Expression = require('../complex_types/expression.js');
                this.__data.defaultValueExpression = new Expression(valueProvided);
            }
        });

        /**
         * @description None
         * @property {ParameterDefinition|undefined}
        */
        Object.defineProperty(this, 'defaultValueParameterDefinition', {
            enumerable: true,
            get: () => this.__data.defaultValueParameterDefinition,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ParameterDefinition = require('../complex_types/parameterDefinition.js');
                this.__data.defaultValueParameterDefinition = new ParameterDefinition(valueProvided);
            }
        });

        /**
         * @description None
         * @property {RelatedArtifact|undefined}
        */
        Object.defineProperty(this, 'defaultValueRelatedArtifact', {
            enumerable: true,
            get: () => this.__data.defaultValueRelatedArtifact,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let RelatedArtifact = require('../complex_types/relatedArtifact.js');
                this.__data.defaultValueRelatedArtifact = new RelatedArtifact(valueProvided);
            }
        });

        /**
         * @description None
         * @property {TriggerDefinition|undefined}
        */
        Object.defineProperty(this, 'defaultValueTriggerDefinition', {
            enumerable: true,
            get: () => this.__data.defaultValueTriggerDefinition,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let TriggerDefinition = require('../complex_types/triggerDefinition.js');
                this.__data.defaultValueTriggerDefinition = new TriggerDefinition(valueProvided);
            }
        });

        /**
         * @description None
         * @property {UsageContext|undefined}
        */
        Object.defineProperty(this, 'defaultValueUsageContext', {
            enumerable: true,
            get: () => this.__data.defaultValueUsageContext,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let UsageContext = require('../complex_types/usageContext.js');
                this.__data.defaultValueUsageContext = new UsageContext(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Dosage|undefined}
        */
        Object.defineProperty(this, 'defaultValueDosage', {
            enumerable: true,
            get: () => this.__data.defaultValueDosage,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Dosage = require('../backbone_elements/dosage.js');
                this.__data.defaultValueDosage = new Dosage(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'defaultValueMeta', {
            enumerable: true,
            get: () => this.__data.defaultValueMeta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.defaultValueMeta = new Meta(valueProvided);
            }
        });

        /**
         * @description The Implicit meaning that is to be understood when this element is missing
    (e.g. 'when this element is missing, the period is ongoing').
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'meaningWhenMissing', {
            enumerable: true,
            get: () => this.__data.meaningWhenMissing,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.meaningWhenMissing = valueProvided;
            }
        });

        /**
         * @description If present, indicates that the order of the repeating element has meaning and
    describes what that meaning is.  If absent, it means that the order of the
    element has no meaning.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'orderMeaning', {
            enumerable: true,
            get: () => this.__data.orderMeaning,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.orderMeaning = valueProvided;
            }
        });

        /**
         * @description None
         * @property {base64Binary|undefined}
        */
        Object.defineProperty(this, 'fixedBase64Binary', {
            enumerable: true,
            get: () => this.__data.fixedBase64Binary,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.fixedBase64Binary = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'fixedBoolean', {
            enumerable: true,
            get: () => this.__data.fixedBoolean,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.fixedBoolean = valueProvided;
            }
        });

        /**
         * @description None
         * @property {canonical|undefined}
        */
        Object.defineProperty(this, 'fixedCanonical', {
            enumerable: true,
            get: () => this.__data.fixedCanonical,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.fixedCanonical = valueProvided;
            }
        });

        /**
         * @description None
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'fixedCode', {
            enumerable: true,
            get: () => this.__data.fixedCode,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.fixedCode = valueProvided;
            }
        });

        /**
         * @description None
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'fixedDate', {
            enumerable: true,
            get: () => this.__data.fixedDate,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.fixedDate = valueProvided;
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'fixedDateTime', {
            enumerable: true,
            get: () => this.__data.fixedDateTime,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.fixedDateTime = valueProvided;
            }
        });

        /**
         * @description None
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'fixedDecimal', {
            enumerable: true,
            get: () => this.__data.fixedDecimal,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.fixedDecimal = valueProvided;
            }
        });

        /**
         * @description None
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'fixedId', {
            enumerable: true,
            get: () => this.__data.fixedId,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.fixedId = valueProvided;
            }
        });

        /**
         * @description None
         * @property {instant|undefined}
        */
        Object.defineProperty(this, 'fixedInstant', {
            enumerable: true,
            get: () => this.__data.fixedInstant,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.fixedInstant = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'fixedInteger', {
            enumerable: true,
            get: () => this.__data.fixedInteger,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.fixedInteger = valueProvided;
            }
        });

        /**
         * @description None
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'fixedMarkdown', {
            enumerable: true,
            get: () => this.__data.fixedMarkdown,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.fixedMarkdown = valueProvided;
            }
        });

        /**
         * @description None
         * @property {oid|undefined}
        */
        Object.defineProperty(this, 'fixedOid', {
            enumerable: true,
            get: () => this.__data.fixedOid,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.fixedOid = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'fixedPositiveInt', {
            enumerable: true,
            get: () => this.__data.fixedPositiveInt,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.fixedPositiveInt = valueProvided;
            }
        });

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'fixedString', {
            enumerable: true,
            get: () => this.__data.fixedString,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.fixedString = valueProvided;
            }
        });

        /**
         * @description None
         * @property {time|undefined}
        */
        Object.defineProperty(this, 'fixedTime', {
            enumerable: true,
            get: () => this.__data.fixedTime,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.fixedTime = valueProvided;
            }
        });

        /**
         * @description None
         * @property {unsignedInt|undefined}
        */
        Object.defineProperty(this, 'fixedUnsignedInt', {
            enumerable: true,
            get: () => this.__data.fixedUnsignedInt,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.fixedUnsignedInt = valueProvided;
            }
        });

        /**
         * @description None
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'fixedUri', {
            enumerable: true,
            get: () => this.__data.fixedUri,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.fixedUri = valueProvided;
            }
        });

        /**
         * @description None
         * @property {url|undefined}
        */
        Object.defineProperty(this, 'fixedUrl', {
            enumerable: true,
            get: () => this.__data.fixedUrl,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.fixedUrl = valueProvided;
            }
        });

        /**
         * @description None
         * @property {uuid|undefined}
        */
        Object.defineProperty(this, 'fixedUuid', {
            enumerable: true,
            get: () => this.__data.fixedUuid,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.fixedUuid = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Address|undefined}
        */
        Object.defineProperty(this, 'fixedAddress', {
            enumerable: true,
            get: () => this.__data.fixedAddress,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Address = require('../complex_types/address.js');
                this.__data.fixedAddress = new Address(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'fixedAge', {
            enumerable: true,
            get: () => this.__data.fixedAge,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.fixedAge = new Quantity(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Annotation|undefined}
        */
        Object.defineProperty(this, 'fixedAnnotation', {
            enumerable: true,
            get: () => this.__data.fixedAnnotation,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.fixedAnnotation = new Annotation(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Attachment|undefined}
        */
        Object.defineProperty(this, 'fixedAttachment', {
            enumerable: true,
            get: () => this.__data.fixedAttachment,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Attachment = require('../complex_types/attachment.js');
                this.__data.fixedAttachment = new Attachment(valueProvided);
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'fixedCodeableConcept', {
            enumerable: true,
            get: () => this.__data.fixedCodeableConcept,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.fixedCodeableConcept = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Coding|undefined}
        */
        Object.defineProperty(this, 'fixedCoding', {
            enumerable: true,
            get: () => this.__data.fixedCoding,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.fixedCoding = new Coding(valueProvided);
            }
        });

        /**
         * @description None
         * @property {ContactPoint|undefined}
        */
        Object.defineProperty(this, 'fixedContactPoint', {
            enumerable: true,
            get: () => this.__data.fixedContactPoint,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ContactPoint = require('../complex_types/contactPoint.js');
                this.__data.fixedContactPoint = new ContactPoint(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'fixedCount', {
            enumerable: true,
            get: () => this.__data.fixedCount,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.fixedCount = new Quantity(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'fixedDistance', {
            enumerable: true,
            get: () => this.__data.fixedDistance,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.fixedDistance = new Quantity(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'fixedDuration', {
            enumerable: true,
            get: () => this.__data.fixedDuration,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.fixedDuration = new Quantity(valueProvided);
            }
        });

        /**
         * @description None
         * @property {HumanName|undefined}
        */
        Object.defineProperty(this, 'fixedHumanName', {
            enumerable: true,
            get: () => this.__data.fixedHumanName,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let HumanName = require('../complex_types/humanName.js');
                this.__data.fixedHumanName = new HumanName(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'fixedIdentifier', {
            enumerable: true,
            get: () => this.__data.fixedIdentifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.fixedIdentifier = new Identifier(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Money|undefined}
        */
        Object.defineProperty(this, 'fixedMoney', {
            enumerable: true,
            get: () => this.__data.fixedMoney,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Money = require('../complex_types/money.js');
                this.__data.fixedMoney = new Money(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'fixedPeriod', {
            enumerable: true,
            get: () => this.__data.fixedPeriod,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.fixedPeriod = new Period(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'fixedQuantity', {
            enumerable: true,
            get: () => this.__data.fixedQuantity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.fixedQuantity = new Quantity(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Range|undefined}
        */
        Object.defineProperty(this, 'fixedRange', {
            enumerable: true,
            get: () => this.__data.fixedRange,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Range = require('../complex_types/range.js');
                this.__data.fixedRange = new Range(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Ratio|undefined}
        */
        Object.defineProperty(this, 'fixedRatio', {
            enumerable: true,
            get: () => this.__data.fixedRatio,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Ratio = require('../complex_types/ratio.js');
                this.__data.fixedRatio = new Ratio(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'fixedReference', {
            enumerable: true,
            get: () => this.__data.fixedReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.fixedReference = new Reference(valueProvided);
            }
        });

        /**
         * @description None
         * @property {SampledData|undefined}
        */
        Object.defineProperty(this, 'fixedSampledData', {
            enumerable: true,
            get: () => this.__data.fixedSampledData,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let SampledData = require('../complex_types/sampledData.js');
                this.__data.fixedSampledData = new SampledData(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Signature|undefined}
        */
        Object.defineProperty(this, 'fixedSignature', {
            enumerable: true,
            get: () => this.__data.fixedSignature,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Signature = require('../complex_types/signature.js');
                this.__data.fixedSignature = new Signature(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Timing|undefined}
        */
        Object.defineProperty(this, 'fixedTiming', {
            enumerable: true,
            get: () => this.__data.fixedTiming,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Timing = require('../backbone_elements/timing.js');
                this.__data.fixedTiming = new Timing(valueProvided);
            }
        });

        /**
         * @description None
         * @property {ContactDetail|undefined}
        */
        Object.defineProperty(this, 'fixedContactDetail', {
            enumerable: true,
            get: () => this.__data.fixedContactDetail,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.fixedContactDetail = new ContactDetail(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Contributor|undefined}
        */
        Object.defineProperty(this, 'fixedContributor', {
            enumerable: true,
            get: () => this.__data.fixedContributor,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Contributor = require('../complex_types/contributor.js');
                this.__data.fixedContributor = new Contributor(valueProvided);
            }
        });

        /**
         * @description None
         * @property {DataRequirement|undefined}
        */
        Object.defineProperty(this, 'fixedDataRequirement', {
            enumerable: true,
            get: () => this.__data.fixedDataRequirement,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let DataRequirement = require('../complex_types/dataRequirement.js');
                this.__data.fixedDataRequirement = new DataRequirement(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Expression|undefined}
        */
        Object.defineProperty(this, 'fixedExpression', {
            enumerable: true,
            get: () => this.__data.fixedExpression,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Expression = require('../complex_types/expression.js');
                this.__data.fixedExpression = new Expression(valueProvided);
            }
        });

        /**
         * @description None
         * @property {ParameterDefinition|undefined}
        */
        Object.defineProperty(this, 'fixedParameterDefinition', {
            enumerable: true,
            get: () => this.__data.fixedParameterDefinition,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ParameterDefinition = require('../complex_types/parameterDefinition.js');
                this.__data.fixedParameterDefinition = new ParameterDefinition(valueProvided);
            }
        });

        /**
         * @description None
         * @property {RelatedArtifact|undefined}
        */
        Object.defineProperty(this, 'fixedRelatedArtifact', {
            enumerable: true,
            get: () => this.__data.fixedRelatedArtifact,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let RelatedArtifact = require('../complex_types/relatedArtifact.js');
                this.__data.fixedRelatedArtifact = new RelatedArtifact(valueProvided);
            }
        });

        /**
         * @description None
         * @property {TriggerDefinition|undefined}
        */
        Object.defineProperty(this, 'fixedTriggerDefinition', {
            enumerable: true,
            get: () => this.__data.fixedTriggerDefinition,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let TriggerDefinition = require('../complex_types/triggerDefinition.js');
                this.__data.fixedTriggerDefinition = new TriggerDefinition(valueProvided);
            }
        });

        /**
         * @description None
         * @property {UsageContext|undefined}
        */
        Object.defineProperty(this, 'fixedUsageContext', {
            enumerable: true,
            get: () => this.__data.fixedUsageContext,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let UsageContext = require('../complex_types/usageContext.js');
                this.__data.fixedUsageContext = new UsageContext(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Dosage|undefined}
        */
        Object.defineProperty(this, 'fixedDosage', {
            enumerable: true,
            get: () => this.__data.fixedDosage,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Dosage = require('../backbone_elements/dosage.js');
                this.__data.fixedDosage = new Dosage(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'fixedMeta', {
            enumerable: true,
            get: () => this.__data.fixedMeta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.fixedMeta = new Meta(valueProvided);
            }
        });

        /**
         * @description None
         * @property {base64Binary|undefined}
        */
        Object.defineProperty(this, 'patternBase64Binary', {
            enumerable: true,
            get: () => this.__data.patternBase64Binary,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.patternBase64Binary = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'patternBoolean', {
            enumerable: true,
            get: () => this.__data.patternBoolean,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.patternBoolean = valueProvided;
            }
        });

        /**
         * @description None
         * @property {canonical|undefined}
        */
        Object.defineProperty(this, 'patternCanonical', {
            enumerable: true,
            get: () => this.__data.patternCanonical,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.patternCanonical = valueProvided;
            }
        });

        /**
         * @description None
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'patternCode', {
            enumerable: true,
            get: () => this.__data.patternCode,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.patternCode = valueProvided;
            }
        });

        /**
         * @description None
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'patternDate', {
            enumerable: true,
            get: () => this.__data.patternDate,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.patternDate = valueProvided;
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'patternDateTime', {
            enumerable: true,
            get: () => this.__data.patternDateTime,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.patternDateTime = valueProvided;
            }
        });

        /**
         * @description None
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'patternDecimal', {
            enumerable: true,
            get: () => this.__data.patternDecimal,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.patternDecimal = valueProvided;
            }
        });

        /**
         * @description None
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'patternId', {
            enumerable: true,
            get: () => this.__data.patternId,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.patternId = valueProvided;
            }
        });

        /**
         * @description None
         * @property {instant|undefined}
        */
        Object.defineProperty(this, 'patternInstant', {
            enumerable: true,
            get: () => this.__data.patternInstant,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.patternInstant = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'patternInteger', {
            enumerable: true,
            get: () => this.__data.patternInteger,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.patternInteger = valueProvided;
            }
        });

        /**
         * @description None
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'patternMarkdown', {
            enumerable: true,
            get: () => this.__data.patternMarkdown,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.patternMarkdown = valueProvided;
            }
        });

        /**
         * @description None
         * @property {oid|undefined}
        */
        Object.defineProperty(this, 'patternOid', {
            enumerable: true,
            get: () => this.__data.patternOid,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.patternOid = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'patternPositiveInt', {
            enumerable: true,
            get: () => this.__data.patternPositiveInt,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.patternPositiveInt = valueProvided;
            }
        });

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'patternString', {
            enumerable: true,
            get: () => this.__data.patternString,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.patternString = valueProvided;
            }
        });

        /**
         * @description None
         * @property {time|undefined}
        */
        Object.defineProperty(this, 'patternTime', {
            enumerable: true,
            get: () => this.__data.patternTime,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.patternTime = valueProvided;
            }
        });

        /**
         * @description None
         * @property {unsignedInt|undefined}
        */
        Object.defineProperty(this, 'patternUnsignedInt', {
            enumerable: true,
            get: () => this.__data.patternUnsignedInt,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.patternUnsignedInt = valueProvided;
            }
        });

        /**
         * @description None
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'patternUri', {
            enumerable: true,
            get: () => this.__data.patternUri,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.patternUri = valueProvided;
            }
        });

        /**
         * @description None
         * @property {url|undefined}
        */
        Object.defineProperty(this, 'patternUrl', {
            enumerable: true,
            get: () => this.__data.patternUrl,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.patternUrl = valueProvided;
            }
        });

        /**
         * @description None
         * @property {uuid|undefined}
        */
        Object.defineProperty(this, 'patternUuid', {
            enumerable: true,
            get: () => this.__data.patternUuid,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.patternUuid = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Address|undefined}
        */
        Object.defineProperty(this, 'patternAddress', {
            enumerable: true,
            get: () => this.__data.patternAddress,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Address = require('../complex_types/address.js');
                this.__data.patternAddress = new Address(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'patternAge', {
            enumerable: true,
            get: () => this.__data.patternAge,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.patternAge = new Quantity(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Annotation|undefined}
        */
        Object.defineProperty(this, 'patternAnnotation', {
            enumerable: true,
            get: () => this.__data.patternAnnotation,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.patternAnnotation = new Annotation(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Attachment|undefined}
        */
        Object.defineProperty(this, 'patternAttachment', {
            enumerable: true,
            get: () => this.__data.patternAttachment,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Attachment = require('../complex_types/attachment.js');
                this.__data.patternAttachment = new Attachment(valueProvided);
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'patternCodeableConcept', {
            enumerable: true,
            get: () => this.__data.patternCodeableConcept,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.patternCodeableConcept = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Coding|undefined}
        */
        Object.defineProperty(this, 'patternCoding', {
            enumerable: true,
            get: () => this.__data.patternCoding,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.patternCoding = new Coding(valueProvided);
            }
        });

        /**
         * @description None
         * @property {ContactPoint|undefined}
        */
        Object.defineProperty(this, 'patternContactPoint', {
            enumerable: true,
            get: () => this.__data.patternContactPoint,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ContactPoint = require('../complex_types/contactPoint.js');
                this.__data.patternContactPoint = new ContactPoint(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'patternCount', {
            enumerable: true,
            get: () => this.__data.patternCount,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.patternCount = new Quantity(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'patternDistance', {
            enumerable: true,
            get: () => this.__data.patternDistance,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.patternDistance = new Quantity(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'patternDuration', {
            enumerable: true,
            get: () => this.__data.patternDuration,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.patternDuration = new Quantity(valueProvided);
            }
        });

        /**
         * @description None
         * @property {HumanName|undefined}
        */
        Object.defineProperty(this, 'patternHumanName', {
            enumerable: true,
            get: () => this.__data.patternHumanName,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let HumanName = require('../complex_types/humanName.js');
                this.__data.patternHumanName = new HumanName(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'patternIdentifier', {
            enumerable: true,
            get: () => this.__data.patternIdentifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.patternIdentifier = new Identifier(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Money|undefined}
        */
        Object.defineProperty(this, 'patternMoney', {
            enumerable: true,
            get: () => this.__data.patternMoney,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Money = require('../complex_types/money.js');
                this.__data.patternMoney = new Money(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'patternPeriod', {
            enumerable: true,
            get: () => this.__data.patternPeriod,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.patternPeriod = new Period(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'patternQuantity', {
            enumerable: true,
            get: () => this.__data.patternQuantity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.patternQuantity = new Quantity(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Range|undefined}
        */
        Object.defineProperty(this, 'patternRange', {
            enumerable: true,
            get: () => this.__data.patternRange,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Range = require('../complex_types/range.js');
                this.__data.patternRange = new Range(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Ratio|undefined}
        */
        Object.defineProperty(this, 'patternRatio', {
            enumerable: true,
            get: () => this.__data.patternRatio,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Ratio = require('../complex_types/ratio.js');
                this.__data.patternRatio = new Ratio(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'patternReference', {
            enumerable: true,
            get: () => this.__data.patternReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.patternReference = new Reference(valueProvided);
            }
        });

        /**
         * @description None
         * @property {SampledData|undefined}
        */
        Object.defineProperty(this, 'patternSampledData', {
            enumerable: true,
            get: () => this.__data.patternSampledData,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let SampledData = require('../complex_types/sampledData.js');
                this.__data.patternSampledData = new SampledData(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Signature|undefined}
        */
        Object.defineProperty(this, 'patternSignature', {
            enumerable: true,
            get: () => this.__data.patternSignature,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Signature = require('../complex_types/signature.js');
                this.__data.patternSignature = new Signature(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Timing|undefined}
        */
        Object.defineProperty(this, 'patternTiming', {
            enumerable: true,
            get: () => this.__data.patternTiming,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Timing = require('../backbone_elements/timing.js');
                this.__data.patternTiming = new Timing(valueProvided);
            }
        });

        /**
         * @description None
         * @property {ContactDetail|undefined}
        */
        Object.defineProperty(this, 'patternContactDetail', {
            enumerable: true,
            get: () => this.__data.patternContactDetail,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.patternContactDetail = new ContactDetail(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Contributor|undefined}
        */
        Object.defineProperty(this, 'patternContributor', {
            enumerable: true,
            get: () => this.__data.patternContributor,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Contributor = require('../complex_types/contributor.js');
                this.__data.patternContributor = new Contributor(valueProvided);
            }
        });

        /**
         * @description None
         * @property {DataRequirement|undefined}
        */
        Object.defineProperty(this, 'patternDataRequirement', {
            enumerable: true,
            get: () => this.__data.patternDataRequirement,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let DataRequirement = require('../complex_types/dataRequirement.js');
                this.__data.patternDataRequirement = new DataRequirement(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Expression|undefined}
        */
        Object.defineProperty(this, 'patternExpression', {
            enumerable: true,
            get: () => this.__data.patternExpression,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Expression = require('../complex_types/expression.js');
                this.__data.patternExpression = new Expression(valueProvided);
            }
        });

        /**
         * @description None
         * @property {ParameterDefinition|undefined}
        */
        Object.defineProperty(this, 'patternParameterDefinition', {
            enumerable: true,
            get: () => this.__data.patternParameterDefinition,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ParameterDefinition = require('../complex_types/parameterDefinition.js');
                this.__data.patternParameterDefinition = new ParameterDefinition(valueProvided);
            }
        });

        /**
         * @description None
         * @property {RelatedArtifact|undefined}
        */
        Object.defineProperty(this, 'patternRelatedArtifact', {
            enumerable: true,
            get: () => this.__data.patternRelatedArtifact,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let RelatedArtifact = require('../complex_types/relatedArtifact.js');
                this.__data.patternRelatedArtifact = new RelatedArtifact(valueProvided);
            }
        });

        /**
         * @description None
         * @property {TriggerDefinition|undefined}
        */
        Object.defineProperty(this, 'patternTriggerDefinition', {
            enumerable: true,
            get: () => this.__data.patternTriggerDefinition,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let TriggerDefinition = require('../complex_types/triggerDefinition.js');
                this.__data.patternTriggerDefinition = new TriggerDefinition(valueProvided);
            }
        });

        /**
         * @description None
         * @property {UsageContext|undefined}
        */
        Object.defineProperty(this, 'patternUsageContext', {
            enumerable: true,
            get: () => this.__data.patternUsageContext,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let UsageContext = require('../complex_types/usageContext.js');
                this.__data.patternUsageContext = new UsageContext(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Dosage|undefined}
        */
        Object.defineProperty(this, 'patternDosage', {
            enumerable: true,
            get: () => this.__data.patternDosage,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Dosage = require('../backbone_elements/dosage.js');
                this.__data.patternDosage = new Dosage(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'patternMeta', {
            enumerable: true,
            get: () => this.__data.patternMeta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.patternMeta = new Meta(valueProvided);
            }
        });

        /**
         * @description A sample value for this element demonstrating the type of information that
    would typically be found in the element.
         * @property {ElementDefinitionExample[]|undefined}
        */
        Object.defineProperty(this, 'example', {
            enumerable: true,
            get: () => this.__data.example,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ElementDefinitionExample = require('../backbone_elements/elementDefinitionExample.js');
                this.__data.example = Array.isArray(valueProvided) ? valueProvided.map(v => new ElementDefinitionExample(v)) : [new ElementDefinitionExample(valueProvided)];
            }
        });

        /**
         * @description None
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'minValueDate', {
            enumerable: true,
            get: () => this.__data.minValueDate,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.minValueDate = valueProvided;
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'minValueDateTime', {
            enumerable: true,
            get: () => this.__data.minValueDateTime,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.minValueDateTime = valueProvided;
            }
        });

        /**
         * @description None
         * @property {instant|undefined}
        */
        Object.defineProperty(this, 'minValueInstant', {
            enumerable: true,
            get: () => this.__data.minValueInstant,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.minValueInstant = valueProvided;
            }
        });

        /**
         * @description None
         * @property {time|undefined}
        */
        Object.defineProperty(this, 'minValueTime', {
            enumerable: true,
            get: () => this.__data.minValueTime,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.minValueTime = valueProvided;
            }
        });

        /**
         * @description None
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'minValueDecimal', {
            enumerable: true,
            get: () => this.__data.minValueDecimal,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.minValueDecimal = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'minValueInteger', {
            enumerable: true,
            get: () => this.__data.minValueInteger,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.minValueInteger = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'minValuePositiveInt', {
            enumerable: true,
            get: () => this.__data.minValuePositiveInt,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.minValuePositiveInt = valueProvided;
            }
        });

        /**
         * @description None
         * @property {unsignedInt|undefined}
        */
        Object.defineProperty(this, 'minValueUnsignedInt', {
            enumerable: true,
            get: () => this.__data.minValueUnsignedInt,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.minValueUnsignedInt = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'minValueQuantity', {
            enumerable: true,
            get: () => this.__data.minValueQuantity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.minValueQuantity = new Quantity(valueProvided);
            }
        });

        /**
         * @description None
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'maxValueDate', {
            enumerable: true,
            get: () => this.__data.maxValueDate,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.maxValueDate = valueProvided;
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'maxValueDateTime', {
            enumerable: true,
            get: () => this.__data.maxValueDateTime,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.maxValueDateTime = valueProvided;
            }
        });

        /**
         * @description None
         * @property {instant|undefined}
        */
        Object.defineProperty(this, 'maxValueInstant', {
            enumerable: true,
            get: () => this.__data.maxValueInstant,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.maxValueInstant = valueProvided;
            }
        });

        /**
         * @description None
         * @property {time|undefined}
        */
        Object.defineProperty(this, 'maxValueTime', {
            enumerable: true,
            get: () => this.__data.maxValueTime,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.maxValueTime = valueProvided;
            }
        });

        /**
         * @description None
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'maxValueDecimal', {
            enumerable: true,
            get: () => this.__data.maxValueDecimal,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.maxValueDecimal = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'maxValueInteger', {
            enumerable: true,
            get: () => this.__data.maxValueInteger,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.maxValueInteger = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'maxValuePositiveInt', {
            enumerable: true,
            get: () => this.__data.maxValuePositiveInt,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.maxValuePositiveInt = valueProvided;
            }
        });

        /**
         * @description None
         * @property {unsignedInt|undefined}
        */
        Object.defineProperty(this, 'maxValueUnsignedInt', {
            enumerable: true,
            get: () => this.__data.maxValueUnsignedInt,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.maxValueUnsignedInt = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'maxValueQuantity', {
            enumerable: true,
            get: () => this.__data.maxValueQuantity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.maxValueQuantity = new Quantity(valueProvided);
            }
        });

        /**
         * @description Indicates the maximum length in characters that is permitted to be present in
    conformant instances and which is expected to be supported by conformant
    consumers that support the element.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'maxLength', {
            enumerable: true,
            get: () => this.__data.maxLength,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.maxLength = valueProvided;
            }
        });

        /**
         * @description A reference to an invariant that may make additional statements about the
    cardinality or value in the instance.
         * @property {id[]|undefined}
        */
        Object.defineProperty(this, 'condition', {
            enumerable: true,
            get: () => this.__data.condition,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.condition = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description Formal constraints such as co-occurrence and other constraints that can be
    computationally evaluated within the context of the instance.
         * @property {ElementDefinitionConstraint[]|undefined}
        */
        Object.defineProperty(this, 'constraint', {
            enumerable: true,
            get: () => this.__data.constraint,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ElementDefinitionConstraint = require('../backbone_elements/elementDefinitionConstraint.js');
                this.__data.constraint = Array.isArray(valueProvided) ? valueProvided.map(v => new ElementDefinitionConstraint(v)) : [new ElementDefinitionConstraint(valueProvided)];
            }
        });

        /**
         * @description If true, implementations that produce or consume resources SHALL provide
    "support" for the element in some meaningful way.  If false, the element may
    be ignored and not supported. If false, whether to populate or use the data
    element in any way is at the discretion of the implementation.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'mustSupport', {
            enumerable: true,
            get: () => this.__data.mustSupport,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.mustSupport = valueProvided;
            }
        });

        /**
         * @description If true, the value of this element affects the interpretation of the element
    or resource that contains it, and the value of the element cannot be ignored.
    Typically, this is used for status, negation and qualification codes. The
    effect of this is that the element cannot be ignored by systems: they SHALL
    either recognize the element and process it, and/or a pre-determination has
    been made that it is not relevant to their particular system.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'isModifier', {
            enumerable: true,
            get: () => this.__data.isModifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.isModifier = valueProvided;
            }
        });

        /**
         * @description Explains how that element affects the interpretation of the resource or
    element that contains it.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'isModifierReason', {
            enumerable: true,
            get: () => this.__data.isModifierReason,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.isModifierReason = valueProvided;
            }
        });

        /**
         * @description Whether the element should be included if a client requests a search with the
    parameter _summary=true.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'isSummary', {
            enumerable: true,
            get: () => this.__data.isSummary,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.isSummary = valueProvided;
            }
        });

        /**
         * @description Binds to a value set if this element is coded (code, Coding, CodeableConcept,
    Quantity), or the data types (string, uri).
         * @property {ElementDefinitionBinding|undefined}
        */
        Object.defineProperty(this, 'binding', {
            enumerable: true,
            get: () => this.__data.binding,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ElementDefinitionBinding = require('../backbone_elements/elementDefinitionBinding.js');
                this.__data.binding = new ElementDefinitionBinding(valueProvided);
            }
        });

        /**
         * @description Identifies a concept from an external specification that roughly corresponds
    to this element.
         * @property {ElementDefinitionMapping[]|undefined}
        */
        Object.defineProperty(this, 'mapping', {
            enumerable: true,
            get: () => this.__data.mapping,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ElementDefinitionMapping = require('../backbone_elements/elementDefinitionMapping.js');
                this.__data.mapping = Array.isArray(valueProvided) ? valueProvided.map(v => new ElementDefinitionMapping(v)) : [new ElementDefinitionMapping(valueProvided)];
            }
        });

        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            path,
            representation,
            sliceName,
            sliceIsConstraining,
            label,
            code,
            slicing,
            short,
            definition,
            comment,
            requirements,
            alias,
            min,
            max,
            base,
            contentReference,
            type,
            defaultValueBase64Binary,
            defaultValueBoolean,
            defaultValueCanonical,
            defaultValueCode,
            defaultValueDate,
            defaultValueDateTime,
            defaultValueDecimal,
            defaultValueId,
            defaultValueInstant,
            defaultValueInteger,
            defaultValueMarkdown,
            defaultValueOid,
            defaultValuePositiveInt,
            defaultValueString,
            defaultValueTime,
            defaultValueUnsignedInt,
            defaultValueUri,
            defaultValueUrl,
            defaultValueUuid,
            defaultValueAddress,
            defaultValueAge,
            defaultValueAnnotation,
            defaultValueAttachment,
            defaultValueCodeableConcept,
            defaultValueCoding,
            defaultValueContactPoint,
            defaultValueCount,
            defaultValueDistance,
            defaultValueDuration,
            defaultValueHumanName,
            defaultValueIdentifier,
            defaultValueMoney,
            defaultValuePeriod,
            defaultValueQuantity,
            defaultValueRange,
            defaultValueRatio,
            defaultValueReference,
            defaultValueSampledData,
            defaultValueSignature,
            defaultValueTiming,
            defaultValueContactDetail,
            defaultValueContributor,
            defaultValueDataRequirement,
            defaultValueExpression,
            defaultValueParameterDefinition,
            defaultValueRelatedArtifact,
            defaultValueTriggerDefinition,
            defaultValueUsageContext,
            defaultValueDosage,
            defaultValueMeta,
            meaningWhenMissing,
            orderMeaning,
            fixedBase64Binary,
            fixedBoolean,
            fixedCanonical,
            fixedCode,
            fixedDate,
            fixedDateTime,
            fixedDecimal,
            fixedId,
            fixedInstant,
            fixedInteger,
            fixedMarkdown,
            fixedOid,
            fixedPositiveInt,
            fixedString,
            fixedTime,
            fixedUnsignedInt,
            fixedUri,
            fixedUrl,
            fixedUuid,
            fixedAddress,
            fixedAge,
            fixedAnnotation,
            fixedAttachment,
            fixedCodeableConcept,
            fixedCoding,
            fixedContactPoint,
            fixedCount,
            fixedDistance,
            fixedDuration,
            fixedHumanName,
            fixedIdentifier,
            fixedMoney,
            fixedPeriod,
            fixedQuantity,
            fixedRange,
            fixedRatio,
            fixedReference,
            fixedSampledData,
            fixedSignature,
            fixedTiming,
            fixedContactDetail,
            fixedContributor,
            fixedDataRequirement,
            fixedExpression,
            fixedParameterDefinition,
            fixedRelatedArtifact,
            fixedTriggerDefinition,
            fixedUsageContext,
            fixedDosage,
            fixedMeta,
            patternBase64Binary,
            patternBoolean,
            patternCanonical,
            patternCode,
            patternDate,
            patternDateTime,
            patternDecimal,
            patternId,
            patternInstant,
            patternInteger,
            patternMarkdown,
            patternOid,
            patternPositiveInt,
            patternString,
            patternTime,
            patternUnsignedInt,
            patternUri,
            patternUrl,
            patternUuid,
            patternAddress,
            patternAge,
            patternAnnotation,
            patternAttachment,
            patternCodeableConcept,
            patternCoding,
            patternContactPoint,
            patternCount,
            patternDistance,
            patternDuration,
            patternHumanName,
            patternIdentifier,
            patternMoney,
            patternPeriod,
            patternQuantity,
            patternRange,
            patternRatio,
            patternReference,
            patternSampledData,
            patternSignature,
            patternTiming,
            patternContactDetail,
            patternContributor,
            patternDataRequirement,
            patternExpression,
            patternParameterDefinition,
            patternRelatedArtifact,
            patternTriggerDefinition,
            patternUsageContext,
            patternDosage,
            patternMeta,
            example,
            minValueDate,
            minValueDateTime,
            minValueInstant,
            minValueTime,
            minValueDecimal,
            minValueInteger,
            minValuePositiveInt,
            minValueUnsignedInt,
            minValueQuantity,
            maxValueDate,
            maxValueDateTime,
            maxValueInstant,
            maxValueTime,
            maxValueDecimal,
            maxValueInteger,
            maxValuePositiveInt,
            maxValueUnsignedInt,
            maxValueQuantity,
            maxLength,
            condition,
            constraint,
            mustSupport,
            isModifier,
            isModifierReason,
            isSummary,
            binding,
            mapping,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ElementDefinition',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ElementDefinition';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            path: this.path,
            representation: this.representation,
            sliceName: this.sliceName,
            sliceIsConstraining: this.sliceIsConstraining,
            label: this.label,
            code: this.code && this.code.map(v => v.toJSON()),
            slicing: this.slicing && this.slicing.toJSON(),
            short: this.short,
            definition: this.definition,
            comment: this.comment,
            requirements: this.requirements,
            alias: this.alias,
            min: this.min,
            max: this.max,
            base: this.base && this.base.toJSON(),
            contentReference: this.contentReference,
            type: this.type && this.type.map(v => v.toJSON()),
            defaultValueBase64Binary: this.defaultValueBase64Binary,
            defaultValueBoolean: this.defaultValueBoolean,
            defaultValueCanonical: this.defaultValueCanonical,
            defaultValueCode: this.defaultValueCode,
            defaultValueDate: this.defaultValueDate,
            defaultValueDateTime: this.defaultValueDateTime,
            defaultValueDecimal: this.defaultValueDecimal,
            defaultValueId: this.defaultValueId,
            defaultValueInstant: this.defaultValueInstant,
            defaultValueInteger: this.defaultValueInteger,
            defaultValueMarkdown: this.defaultValueMarkdown,
            defaultValueOid: this.defaultValueOid,
            defaultValuePositiveInt: this.defaultValuePositiveInt,
            defaultValueString: this.defaultValueString,
            defaultValueTime: this.defaultValueTime,
            defaultValueUnsignedInt: this.defaultValueUnsignedInt,
            defaultValueUri: this.defaultValueUri,
            defaultValueUrl: this.defaultValueUrl,
            defaultValueUuid: this.defaultValueUuid,
            defaultValueAddress: this.defaultValueAddress && this.defaultValueAddress.toJSON(),
            defaultValueAge: this.defaultValueAge && this.defaultValueAge.toJSON(),
            defaultValueAnnotation: this.defaultValueAnnotation && this.defaultValueAnnotation.toJSON(),
            defaultValueAttachment: this.defaultValueAttachment && this.defaultValueAttachment.toJSON(),
            defaultValueCodeableConcept: this.defaultValueCodeableConcept && this.defaultValueCodeableConcept.toJSON(),
            defaultValueCoding: this.defaultValueCoding && this.defaultValueCoding.toJSON(),
            defaultValueContactPoint: this.defaultValueContactPoint && this.defaultValueContactPoint.toJSON(),
            defaultValueCount: this.defaultValueCount && this.defaultValueCount.toJSON(),
            defaultValueDistance: this.defaultValueDistance && this.defaultValueDistance.toJSON(),
            defaultValueDuration: this.defaultValueDuration && this.defaultValueDuration.toJSON(),
            defaultValueHumanName: this.defaultValueHumanName && this.defaultValueHumanName.toJSON(),
            defaultValueIdentifier: this.defaultValueIdentifier && this.defaultValueIdentifier.toJSON(),
            defaultValueMoney: this.defaultValueMoney && this.defaultValueMoney.toJSON(),
            defaultValuePeriod: this.defaultValuePeriod && this.defaultValuePeriod.toJSON(),
            defaultValueQuantity: this.defaultValueQuantity && this.defaultValueQuantity.toJSON(),
            defaultValueRange: this.defaultValueRange && this.defaultValueRange.toJSON(),
            defaultValueRatio: this.defaultValueRatio && this.defaultValueRatio.toJSON(),
            defaultValueReference: this.defaultValueReference && this.defaultValueReference.toJSON(),
            defaultValueSampledData: this.defaultValueSampledData && this.defaultValueSampledData.toJSON(),
            defaultValueSignature: this.defaultValueSignature && this.defaultValueSignature.toJSON(),
            defaultValueTiming: this.defaultValueTiming && this.defaultValueTiming.toJSON(),
            defaultValueContactDetail: this.defaultValueContactDetail && this.defaultValueContactDetail.toJSON(),
            defaultValueContributor: this.defaultValueContributor && this.defaultValueContributor.toJSON(),
            defaultValueDataRequirement: this.defaultValueDataRequirement && this.defaultValueDataRequirement.toJSON(),
            defaultValueExpression: this.defaultValueExpression && this.defaultValueExpression.toJSON(),
            defaultValueParameterDefinition: this.defaultValueParameterDefinition && this.defaultValueParameterDefinition.toJSON(),
            defaultValueRelatedArtifact: this.defaultValueRelatedArtifact && this.defaultValueRelatedArtifact.toJSON(),
            defaultValueTriggerDefinition: this.defaultValueTriggerDefinition && this.defaultValueTriggerDefinition.toJSON(),
            defaultValueUsageContext: this.defaultValueUsageContext && this.defaultValueUsageContext.toJSON(),
            defaultValueDosage: this.defaultValueDosage && this.defaultValueDosage.toJSON(),
            defaultValueMeta: this.defaultValueMeta && this.defaultValueMeta.toJSON(),
            meaningWhenMissing: this.meaningWhenMissing,
            orderMeaning: this.orderMeaning,
            fixedBase64Binary: this.fixedBase64Binary,
            fixedBoolean: this.fixedBoolean,
            fixedCanonical: this.fixedCanonical,
            fixedCode: this.fixedCode,
            fixedDate: this.fixedDate,
            fixedDateTime: this.fixedDateTime,
            fixedDecimal: this.fixedDecimal,
            fixedId: this.fixedId,
            fixedInstant: this.fixedInstant,
            fixedInteger: this.fixedInteger,
            fixedMarkdown: this.fixedMarkdown,
            fixedOid: this.fixedOid,
            fixedPositiveInt: this.fixedPositiveInt,
            fixedString: this.fixedString,
            fixedTime: this.fixedTime,
            fixedUnsignedInt: this.fixedUnsignedInt,
            fixedUri: this.fixedUri,
            fixedUrl: this.fixedUrl,
            fixedUuid: this.fixedUuid,
            fixedAddress: this.fixedAddress && this.fixedAddress.toJSON(),
            fixedAge: this.fixedAge && this.fixedAge.toJSON(),
            fixedAnnotation: this.fixedAnnotation && this.fixedAnnotation.toJSON(),
            fixedAttachment: this.fixedAttachment && this.fixedAttachment.toJSON(),
            fixedCodeableConcept: this.fixedCodeableConcept && this.fixedCodeableConcept.toJSON(),
            fixedCoding: this.fixedCoding && this.fixedCoding.toJSON(),
            fixedContactPoint: this.fixedContactPoint && this.fixedContactPoint.toJSON(),
            fixedCount: this.fixedCount && this.fixedCount.toJSON(),
            fixedDistance: this.fixedDistance && this.fixedDistance.toJSON(),
            fixedDuration: this.fixedDuration && this.fixedDuration.toJSON(),
            fixedHumanName: this.fixedHumanName && this.fixedHumanName.toJSON(),
            fixedIdentifier: this.fixedIdentifier && this.fixedIdentifier.toJSON(),
            fixedMoney: this.fixedMoney && this.fixedMoney.toJSON(),
            fixedPeriod: this.fixedPeriod && this.fixedPeriod.toJSON(),
            fixedQuantity: this.fixedQuantity && this.fixedQuantity.toJSON(),
            fixedRange: this.fixedRange && this.fixedRange.toJSON(),
            fixedRatio: this.fixedRatio && this.fixedRatio.toJSON(),
            fixedReference: this.fixedReference && this.fixedReference.toJSON(),
            fixedSampledData: this.fixedSampledData && this.fixedSampledData.toJSON(),
            fixedSignature: this.fixedSignature && this.fixedSignature.toJSON(),
            fixedTiming: this.fixedTiming && this.fixedTiming.toJSON(),
            fixedContactDetail: this.fixedContactDetail && this.fixedContactDetail.toJSON(),
            fixedContributor: this.fixedContributor && this.fixedContributor.toJSON(),
            fixedDataRequirement: this.fixedDataRequirement && this.fixedDataRequirement.toJSON(),
            fixedExpression: this.fixedExpression && this.fixedExpression.toJSON(),
            fixedParameterDefinition: this.fixedParameterDefinition && this.fixedParameterDefinition.toJSON(),
            fixedRelatedArtifact: this.fixedRelatedArtifact && this.fixedRelatedArtifact.toJSON(),
            fixedTriggerDefinition: this.fixedTriggerDefinition && this.fixedTriggerDefinition.toJSON(),
            fixedUsageContext: this.fixedUsageContext && this.fixedUsageContext.toJSON(),
            fixedDosage: this.fixedDosage && this.fixedDosage.toJSON(),
            fixedMeta: this.fixedMeta && this.fixedMeta.toJSON(),
            patternBase64Binary: this.patternBase64Binary,
            patternBoolean: this.patternBoolean,
            patternCanonical: this.patternCanonical,
            patternCode: this.patternCode,
            patternDate: this.patternDate,
            patternDateTime: this.patternDateTime,
            patternDecimal: this.patternDecimal,
            patternId: this.patternId,
            patternInstant: this.patternInstant,
            patternInteger: this.patternInteger,
            patternMarkdown: this.patternMarkdown,
            patternOid: this.patternOid,
            patternPositiveInt: this.patternPositiveInt,
            patternString: this.patternString,
            patternTime: this.patternTime,
            patternUnsignedInt: this.patternUnsignedInt,
            patternUri: this.patternUri,
            patternUrl: this.patternUrl,
            patternUuid: this.patternUuid,
            patternAddress: this.patternAddress && this.patternAddress.toJSON(),
            patternAge: this.patternAge && this.patternAge.toJSON(),
            patternAnnotation: this.patternAnnotation && this.patternAnnotation.toJSON(),
            patternAttachment: this.patternAttachment && this.patternAttachment.toJSON(),
            patternCodeableConcept: this.patternCodeableConcept && this.patternCodeableConcept.toJSON(),
            patternCoding: this.patternCoding && this.patternCoding.toJSON(),
            patternContactPoint: this.patternContactPoint && this.patternContactPoint.toJSON(),
            patternCount: this.patternCount && this.patternCount.toJSON(),
            patternDistance: this.patternDistance && this.patternDistance.toJSON(),
            patternDuration: this.patternDuration && this.patternDuration.toJSON(),
            patternHumanName: this.patternHumanName && this.patternHumanName.toJSON(),
            patternIdentifier: this.patternIdentifier && this.patternIdentifier.toJSON(),
            patternMoney: this.patternMoney && this.patternMoney.toJSON(),
            patternPeriod: this.patternPeriod && this.patternPeriod.toJSON(),
            patternQuantity: this.patternQuantity && this.patternQuantity.toJSON(),
            patternRange: this.patternRange && this.patternRange.toJSON(),
            patternRatio: this.patternRatio && this.patternRatio.toJSON(),
            patternReference: this.patternReference && this.patternReference.toJSON(),
            patternSampledData: this.patternSampledData && this.patternSampledData.toJSON(),
            patternSignature: this.patternSignature && this.patternSignature.toJSON(),
            patternTiming: this.patternTiming && this.patternTiming.toJSON(),
            patternContactDetail: this.patternContactDetail && this.patternContactDetail.toJSON(),
            patternContributor: this.patternContributor && this.patternContributor.toJSON(),
            patternDataRequirement: this.patternDataRequirement && this.patternDataRequirement.toJSON(),
            patternExpression: this.patternExpression && this.patternExpression.toJSON(),
            patternParameterDefinition: this.patternParameterDefinition && this.patternParameterDefinition.toJSON(),
            patternRelatedArtifact: this.patternRelatedArtifact && this.patternRelatedArtifact.toJSON(),
            patternTriggerDefinition: this.patternTriggerDefinition && this.patternTriggerDefinition.toJSON(),
            patternUsageContext: this.patternUsageContext && this.patternUsageContext.toJSON(),
            patternDosage: this.patternDosage && this.patternDosage.toJSON(),
            patternMeta: this.patternMeta && this.patternMeta.toJSON(),
            example: this.example && this.example.map(v => v.toJSON()),
            minValueDate: this.minValueDate,
            minValueDateTime: this.minValueDateTime,
            minValueInstant: this.minValueInstant,
            minValueTime: this.minValueTime,
            minValueDecimal: this.minValueDecimal,
            minValueInteger: this.minValueInteger,
            minValuePositiveInt: this.minValuePositiveInt,
            minValueUnsignedInt: this.minValueUnsignedInt,
            minValueQuantity: this.minValueQuantity && this.minValueQuantity.toJSON(),
            maxValueDate: this.maxValueDate,
            maxValueDateTime: this.maxValueDateTime,
            maxValueInstant: this.maxValueInstant,
            maxValueTime: this.maxValueTime,
            maxValueDecimal: this.maxValueDecimal,
            maxValueInteger: this.maxValueInteger,
            maxValuePositiveInt: this.maxValuePositiveInt,
            maxValueUnsignedInt: this.maxValueUnsignedInt,
            maxValueQuantity: this.maxValueQuantity && this.maxValueQuantity.toJSON(),
            maxLength: this.maxLength,
            condition: this.condition,
            constraint: this.constraint && this.constraint.map(v => v.toJSON()),
            mustSupport: this.mustSupport,
            isModifier: this.isModifier,
            isModifierReason: this.isModifierReason,
            isSummary: this.isSummary,
            binding: this.binding && this.binding.toJSON(),
            mapping: this.mapping && this.mapping.map(v => v.toJSON()),
        };
    }
}

module.exports = ElementDefinition;
