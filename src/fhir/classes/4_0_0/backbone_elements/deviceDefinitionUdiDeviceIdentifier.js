/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

/**
DeviceDefinition.UdiDeviceIdentifier
    The characteristics, operational status and capabilities of a medical-related
    component of a medical device.
*/
class DeviceDefinitionUdiDeviceIdentifier {
    constructor(
        {
            id,
            extension,
            modifierExtension,
            deviceIdentifier,
            issuer,
            jurisdiction,
        }
    ) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description The identifier that is to be associated with every Device that references this
    DeviceDefintiion for the issuer and jurisdication porvided in the
    DeviceDefinition.udiDeviceIdentifier.
         * @property {String}
        */
        Object.defineProperty(this, 'deviceIdentifier', {
            enumerable: true,
            get: () => this.__data.deviceIdentifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.deviceIdentifier = valueProvided;
            }
        });

        /**
         * @description The organization that assigns the identifier algorithm.
         * @property {uri}
        */
        Object.defineProperty(this, 'issuer', {
            enumerable: true,
            get: () => this.__data.issuer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.issuer = valueProvided;
            }
        });

        /**
         * @description The jurisdiction to which the deviceIdentifier applies.
         * @property {uri}
        */
        Object.defineProperty(this, 'jurisdiction', {
            enumerable: true,
            get: () => this.__data.jurisdiction,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.jurisdiction = valueProvided;
            }
        });

        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            deviceIdentifier,
            issuer,
            jurisdiction,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'DeviceDefinitionUdiDeviceIdentifier',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'DeviceDefinitionUdiDeviceIdentifier';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            deviceIdentifier: this.deviceIdentifier,
            issuer: this.issuer,
            jurisdiction: this.jurisdiction,
        };
    }
}

module.exports = DeviceDefinitionUdiDeviceIdentifier;
