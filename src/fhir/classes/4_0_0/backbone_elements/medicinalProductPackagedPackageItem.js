/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');
const Resource = require('../resources/resource');
const async = require('async');


/**
MedicinalProductPackaged.PackageItem
    A medicinal product in a container or package.
*/
class MedicinalProductPackagedPackageItem extends Element {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {CodeableConcept} type,
     * @param {Quantity} quantity,
     * @param {CodeableConcept[]|undefined} [material],
     * @param {CodeableConcept[]|undefined} [alternateMaterial],
     * @param {Reference[]|undefined} [device],
     * @param {Reference[]|undefined} [manufacturedItem],
     * @param {MedicinalProductPackagedPackageItem[]|undefined} [packageItem],
     * @param {ProdCharacteristic|undefined} [physicalCharacteristics],
     * @param {CodeableConcept[]|undefined} [otherCharacteristics],
     * @param {ProductShelfLife[]|undefined} [shelfLifeStorage],
     * @param {Reference[]|undefined} [manufacturer],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            identifier,
            type,
            quantity,
            material,
            alternateMaterial,
            device,
            manufacturedItem,
            packageItem,
            physicalCharacteristics,
            otherCharacteristics,
            shelfLifeStorage,
            manufacturer,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.extension = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Extension ?
                                v : new Extension(v)
                            );
                } else {
                    if (valueProvided instanceof Extension) {
                        this.__data.extension = valueProvided;
                    } else {
                        this.__data.extension = [new Extension(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.modifierExtension = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Extension ?
                                v : new Extension(v)
                            );
                } else {
                    if (valueProvided instanceof Extension) {
                        this.__data.modifierExtension = valueProvided;
                    } else {
                        this.__data.modifierExtension = [new Extension(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Including possibly Data Carrier Identifier.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.identifier = undefined;
                    return;
                }
                const Identifier = require('../complex_types/identifier.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.identifier = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Identifier ?
                                v : new Identifier(v)
                            );
                } else {
                    if (valueProvided instanceof Identifier) {
                        this.__data.identifier = valueProvided;
                    } else {
                        this.__data.identifier = [new Identifier(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description The physical type of the container of the medicine.
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'type', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.type = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (valueProvided instanceof CodeableConcept){
                    this.__data.type = valueProvided;
                } else {
                    this.__data.type = new CodeableConcept(valueProvided);
                }
            }
        });

        /**
         * @description The quantity of this package in the medicinal product, at the current level of
    packaging. The outermost is always 1.
         * @property {Quantity}
        */
        Object.defineProperty(this, 'quantity', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.quantity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.quantity = undefined;
                    return;
                }
                const Quantity = require('../complex_types/quantity.js');
                if (valueProvided instanceof Quantity){
                    this.__data.quantity = valueProvided;
                } else {
                    this.__data.quantity = new Quantity(valueProvided);
                }
            }
        });

        /**
         * @description Material type of the package item.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'material', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.material,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.material = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.material = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof CodeableConcept ?
                                v : new CodeableConcept(v)
                            );
                } else {
                    if (valueProvided instanceof CodeableConcept) {
                        this.__data.material = valueProvided;
                    } else {
                        this.__data.material = [new CodeableConcept(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description A possible alternate material for the packaging.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'alternateMaterial', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.alternateMaterial,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.alternateMaterial = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.alternateMaterial = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof CodeableConcept ?
                                v : new CodeableConcept(v)
                            );
                } else {
                    if (valueProvided instanceof CodeableConcept) {
                        this.__data.alternateMaterial = valueProvided;
                    } else {
                        this.__data.alternateMaterial = [new CodeableConcept(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description A device accompanying a medicinal product.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'device', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.device,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.device = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.device = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Reference ?
                                v : new Reference(v)
                            );
                } else {
                    if (valueProvided instanceof Reference) {
                        this.__data.device = valueProvided;
                    } else {
                        this.__data.device = [new Reference(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description The manufactured item as contained in the packaged medicinal product.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'manufacturedItem', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.manufacturedItem,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.manufacturedItem = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.manufacturedItem = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Reference ?
                                v : new Reference(v)
                            );
                } else {
                    if (valueProvided instanceof Reference) {
                        this.__data.manufacturedItem = valueProvided;
                    } else {
                        this.__data.manufacturedItem = [new Reference(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Allows containers within containers.
         * @property {MedicinalProductPackagedPackageItem[]|undefined}
        */
        Object.defineProperty(this, 'packageItem', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.packageItem,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.packageItem = undefined;
                    return;
                }
                if (Array.isArray(valueProvided)) {
                    this.__data.packageItem = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof MedicinalProductPackagedPackageItem ?
                                v : new MedicinalProductPackagedPackageItem(v)
                            );
                } else {
                    if (valueProvided instanceof MedicinalProductPackagedPackageItem) {
                        this.__data.packageItem = valueProvided;
                    } else {
                        this.__data.packageItem = [new MedicinalProductPackagedPackageItem(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Dimensions, color etc.
         * @property {ProdCharacteristic|undefined}
        */
        Object.defineProperty(this, 'physicalCharacteristics', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.physicalCharacteristics,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.physicalCharacteristics = undefined;
                    return;
                }
                const ProdCharacteristic = require('../backbone_elements/prodCharacteristic.js');
                if (valueProvided instanceof ProdCharacteristic){
                    this.__data.physicalCharacteristics = valueProvided;
                } else {
                    this.__data.physicalCharacteristics = new ProdCharacteristic(valueProvided);
                }
            }
        });

        /**
         * @description Other codeable characteristics.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'otherCharacteristics', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.otherCharacteristics,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.otherCharacteristics = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.otherCharacteristics = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof CodeableConcept ?
                                v : new CodeableConcept(v)
                            );
                } else {
                    if (valueProvided instanceof CodeableConcept) {
                        this.__data.otherCharacteristics = valueProvided;
                    } else {
                        this.__data.otherCharacteristics = [new CodeableConcept(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Shelf Life and storage information.
         * @property {ProductShelfLife[]|undefined}
        */
        Object.defineProperty(this, 'shelfLifeStorage', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.shelfLifeStorage,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.shelfLifeStorage = undefined;
                    return;
                }
                const ProductShelfLife = require('../backbone_elements/productShelfLife.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.shelfLifeStorage = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof ProductShelfLife ?
                                v : new ProductShelfLife(v)
                            );
                } else {
                    if (valueProvided instanceof ProductShelfLife) {
                        this.__data.shelfLifeStorage = valueProvided;
                    } else {
                        this.__data.shelfLifeStorage = [new ProductShelfLife(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Manufacturer of this Package Item.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'manufacturer', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.manufacturer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.manufacturer = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.manufacturer = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Reference ?
                                v : new Reference(v)
                            );
                } else {
                    if (valueProvided instanceof Reference) {
                        this.__data.manufacturer = valueProvided;
                    } else {
                        this.__data.manufacturer = [new Reference(valueProvided)];
                    }
                }
            }
        });




        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            identifier,
            type,
            quantity,
            material,
            alternateMaterial,
            device,
            manufacturedItem,
            packageItem,
            physicalCharacteristics,
            otherCharacteristics,
            shelfLifeStorage,
            manufacturer,
        });

    }



    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            type: this.type && this.type.toJSON(),
            quantity: this.quantity && this.quantity.toJSON(),
            material: this.material && this.material.map(v => v.toJSON()),
            alternateMaterial: this.alternateMaterial && this.alternateMaterial.map(v => v.toJSON()),
            device: this.device && this.device.map(v => v.toJSON()),
            manufacturedItem: this.manufacturedItem && this.manufacturedItem.map(v => v.toJSON()),
            packageItem: this.packageItem && this.packageItem.map(v => v.toJSON()),
            physicalCharacteristics: this.physicalCharacteristics && this.physicalCharacteristics.toJSON(),
            otherCharacteristics: this.otherCharacteristics && this.otherCharacteristics.map(v => v.toJSON()),
            shelfLifeStorage: this.shelfLifeStorage && this.shelfLifeStorage.map(v => v.toJSON()),
            manufacturer: this.manufacturer && this.manufacturer.map(v => v.toJSON()),
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync({fnUpdateReferenceAsync}) {
            if (this.extension) {await async.each(this.extension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.modifierExtension) {await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.identifier) {await async.each(this.identifier, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.type) {await this.type.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.quantity) {await this.quantity.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.material) {await async.each(this.material, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.alternateMaterial) {await async.each(this.alternateMaterial, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.device) {await async.each(this.device, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.manufacturedItem) {await async.each(this.manufacturedItem, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.packageItem) {await async.each(this.packageItem, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.physicalCharacteristics) {await this.physicalCharacteristics.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.otherCharacteristics) {await async.each(this.otherCharacteristics, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.shelfLifeStorage) {await async.each(this.shelfLifeStorage, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.manufacturer) {await async.each(this.manufacturer, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal() {
        const {removeNull} = require('../../../../utils/nullRemover');
        const json = {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            identifier: this.identifier && this.identifier.map(v => v.toJSONInternal()),
            type: this.type && this.type.toJSONInternal(),
            quantity: this.quantity && this.quantity.toJSONInternal(),
            material: this.material && this.material.map(v => v.toJSONInternal()),
            alternateMaterial: this.alternateMaterial && this.alternateMaterial.map(v => v.toJSONInternal()),
            device: this.device && this.device.map(v => v.toJSONInternal()),
            manufacturedItem: this.manufacturedItem && this.manufacturedItem.map(v => v.toJSONInternal()),
            packageItem: this.packageItem && this.packageItem.map(v => v.toJSONInternal()),
            physicalCharacteristics: this.physicalCharacteristics && this.physicalCharacteristics.toJSONInternal(),
            otherCharacteristics: this.otherCharacteristics && this.otherCharacteristics.map(v => v.toJSONInternal()),
            shelfLifeStorage: this.shelfLifeStorage && this.shelfLifeStorage.map(v => v.toJSONInternal()),
            manufacturer: this.manufacturer && this.manufacturer.map(v => v.toJSONInternal()),
        };



        return removeNull(json);
    }
}

module.exports = MedicinalProductPackagedPackageItem;
