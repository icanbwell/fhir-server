/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const {Resource} = require('../resources/resource');


/**
ClinicalImpression.Finding
    A record of a clinical assessment performed to determine what problem(s) may
    affect the patient and before planning the treatments or management strategies
    that are best to manage a patient's condition. Assessments are often 1:1 with
    a clinical consultation / encounter,  but this varies greatly depending on the
    clinical workflow. This resource is called "ClinicalImpression" rather than
    "ClinicalAssessment" to avoid confusion with the recording of assessment tools
    such as Apgar score.
*/
class ClinicalImpressionFinding extends Resource {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {CodeableConcept|undefined} [itemCodeableConcept],
     * @param {Reference|undefined} [itemReference],
     * @param {String|undefined} [basis],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            itemCodeableConcept,
            itemReference,
            basis,
        }
    ) {
        super({});
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description Specific text or code for finding or diagnosis, which may include ruled-out or
    resolved conditions.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'itemCodeableConcept', {
            enumerable: true,
            get: () => this.__data.itemCodeableConcept,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.itemCodeableConcept = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description Specific reference for finding or diagnosis, which may include ruled-out or
    resolved conditions.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'itemReference', {
            enumerable: true,
            get: () => this.__data.itemReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.itemReference = new Reference(valueProvided);
            }
        });

        /**
         * @description Which investigations support finding or diagnosis.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'basis', {
            enumerable: true,
            get: () => this.__data.basis,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.basis = valueProvided;
            }
        });

        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            itemCodeableConcept,
            itemReference,
            basis,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ClinicalImpressionFinding',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ClinicalImpressionFinding';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            itemCodeableConcept: this.itemCodeableConcept && this.itemCodeableConcept.toJSON(),
            itemReference: this.itemReference && this.itemReference.toJSON(),
            basis: this.basis,
        };
    }
}

module.exports = ClinicalImpressionFinding;
