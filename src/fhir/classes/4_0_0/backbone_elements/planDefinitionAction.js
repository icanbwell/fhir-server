// This file is auto-generated by generate_classes so do not edit manually

/**
PlanDefinition.Action
    This resource allows for the definition of various types of plans as a
    sharable, consumable, and executable artifact. The resource is general enough
    to support the description of a broad range of clinical artifacts such as
    clinical decision support rules, order sets and protocols.
*/
class PlanDefinitionAction {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description A user-visible prefix for the action.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'prefix', {
            enumerable: true,
            get: () => this.__data.prefix,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.prefix = value;
            }
        });

        /**
         * @description The title of the action displayed to a user.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'title', {
            enumerable: true,
            get: () => this.__data.title,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.title = value;
            }
        });

        /**
         * @description A brief description of the action used to provide a summary to display to the
    user.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.description = value;
            }
        });

        /**
         * @description A text equivalent of the action to be performed. This provides a human-
    interpretable description of the action when the definition is consumed by a
    system that might not be capable of interpreting it dynamically.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'textEquivalent', {
            enumerable: true,
            get: () => this.__data.textEquivalent,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.textEquivalent = value;
            }
        });

        /**
         * @description Indicates how quickly the action should be addressed with respect to other
    actions.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'priority', {
            enumerable: true,
            get: () => this.__data.priority,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.priority = value;
            }
        });

        /**
         * @description A code that provides meaning for the action or action group. For example, a
    section may have a LOINC code for the section of a documentation template.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            get: () => this.__data.code,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.code = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description A description of why this action is necessary or appropriate.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'reason', {
            enumerable: true,
            get: () => this.__data.reason,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.reason = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description Didactic or other informational resources associated with the action that can
    be provided to the CDS recipient. Information resources can include inline
    text commentary and links to web resources.
         * @property {RelatedArtifact[]|undefined}
        */
        Object.defineProperty(this, 'documentation', {
            enumerable: true,
            get: () => this.__data.documentation,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let RelatedArtifact = require('../complex_types/relatedArtifact.js');
                this.__data.documentation = Array.isArray(value) ? value.map(v => new RelatedArtifact(v)) : [new RelatedArtifact(value)];
            }
        });

        /**
         * @description Identifies goals that this action supports. The reference must be to a goal
    element defined within this plan definition.
         * @property {id[]|undefined}
        */
        Object.defineProperty(this, 'goalId', {
            enumerable: true,
            get: () => this.__data.goalId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.goalId = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'subjectCodeableConcept', {
            enumerable: true,
            get: () => this.__data.subjectCodeableConcept,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.subjectCodeableConcept = new CodeableConcept(value);
            }
        });

        /**
         * @description None
         * @property {Group|undefined}
        */
        Object.defineProperty(this, 'subjectReference', {
            enumerable: true,
            get: () => this.__data.subjectReference,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.subjectReference = new Reference(value);
            }
        });

        /**
         * @description A description of when the action should be triggered.
         * @property {TriggerDefinition[]|undefined}
        */
        Object.defineProperty(this, 'trigger', {
            enumerable: true,
            get: () => this.__data.trigger,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let TriggerDefinition = require('../complex_types/triggerDefinition.js');
                this.__data.trigger = Array.isArray(value) ? value.map(v => new TriggerDefinition(v)) : [new TriggerDefinition(value)];
            }
        });

        /**
         * @description An expression that describes applicability criteria or start/stop conditions
    for the action.
         * @property {PlanDefinitionCondition[]|undefined}
        */
        Object.defineProperty(this, 'condition', {
            enumerable: true,
            get: () => this.__data.condition,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let PlanDefinitionCondition = require('../backbone_elements/planDefinitionCondition.js');
                this.__data.condition = Array.isArray(value) ? value.map(v => new PlanDefinitionCondition(v)) : [new PlanDefinitionCondition(value)];
            }
        });

        /**
         * @description Defines input data requirements for the action.
         * @property {DataRequirement[]|undefined}
        */
        Object.defineProperty(this, 'input', {
            enumerable: true,
            get: () => this.__data.input,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let DataRequirement = require('../complex_types/dataRequirement.js');
                this.__data.input = Array.isArray(value) ? value.map(v => new DataRequirement(v)) : [new DataRequirement(value)];
            }
        });

        /**
         * @description Defines the outputs of the action, if any.
         * @property {DataRequirement[]|undefined}
        */
        Object.defineProperty(this, 'output', {
            enumerable: true,
            get: () => this.__data.output,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let DataRequirement = require('../complex_types/dataRequirement.js');
                this.__data.output = Array.isArray(value) ? value.map(v => new DataRequirement(v)) : [new DataRequirement(value)];
            }
        });

        /**
         * @description A relationship to another action such as "before" or "30-60 minutes after
    start of".
         * @property {PlanDefinitionRelatedAction[]|undefined}
        */
        Object.defineProperty(this, 'relatedAction', {
            enumerable: true,
            get: () => this.__data.relatedAction,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let PlanDefinitionRelatedAction = require('../backbone_elements/planDefinitionRelatedAction.js');
                this.__data.relatedAction = Array.isArray(value) ? value.map(v => new PlanDefinitionRelatedAction(v)) : [new PlanDefinitionRelatedAction(value)];
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'timingDateTime', {
            enumerable: true,
            get: () => this.__data.timingDateTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.timingDateTime = value;
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'timingAge', {
            enumerable: true,
            get: () => this.__data.timingAge,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.timingAge = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'timingPeriod', {
            enumerable: true,
            get: () => this.__data.timingPeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.timingPeriod = new Period(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'timingDuration', {
            enumerable: true,
            get: () => this.__data.timingDuration,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.timingDuration = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Range|undefined}
        */
        Object.defineProperty(this, 'timingRange', {
            enumerable: true,
            get: () => this.__data.timingRange,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Range = require('../complex_types/range.js');
                this.__data.timingRange = new Range(value);
            }
        });

        /**
         * @description None
         * @property {Timing|undefined}
        */
        Object.defineProperty(this, 'timingTiming', {
            enumerable: true,
            get: () => this.__data.timingTiming,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Timing = require('../backbone_elements/timing.js');
                this.__data.timingTiming = new Timing(value);
            }
        });

        /**
         * @description Indicates who should participate in performing the action described.
         * @property {PlanDefinitionParticipant[]|undefined}
        */
        Object.defineProperty(this, 'participant', {
            enumerable: true,
            get: () => this.__data.participant,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let PlanDefinitionParticipant = require('../backbone_elements/planDefinitionParticipant.js');
                this.__data.participant = Array.isArray(value) ? value.map(v => new PlanDefinitionParticipant(v)) : [new PlanDefinitionParticipant(value)];
            }
        });

        /**
         * @description The type of action to perform (create, update, remove).
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.type = new CodeableConcept(value);
            }
        });

        /**
         * @description Defines the grouping behavior for the action and its children.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'groupingBehavior', {
            enumerable: true,
            get: () => this.__data.groupingBehavior,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.groupingBehavior = value;
            }
        });

        /**
         * @description Defines the selection behavior for the action and its children.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'selectionBehavior', {
            enumerable: true,
            get: () => this.__data.selectionBehavior,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.selectionBehavior = value;
            }
        });

        /**
         * @description Defines the required behavior for the action.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'requiredBehavior', {
            enumerable: true,
            get: () => this.__data.requiredBehavior,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.requiredBehavior = value;
            }
        });

        /**
         * @description Defines whether the action should usually be preselected.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'precheckBehavior', {
            enumerable: true,
            get: () => this.__data.precheckBehavior,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.precheckBehavior = value;
            }
        });

        /**
         * @description Defines whether the action can be selected multiple times.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'cardinalityBehavior', {
            enumerable: true,
            get: () => this.__data.cardinalityBehavior,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.cardinalityBehavior = value;
            }
        });

        /**
         * @description None
         * @property {canonical|undefined}
        */
        Object.defineProperty(this, 'definitionCanonical', {
            enumerable: true,
            get: () => this.__data.definitionCanonical,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.definitionCanonical = value;
            }
        });

        /**
         * @description None
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'definitionUri', {
            enumerable: true,
            get: () => this.__data.definitionUri,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.definitionUri = value;
            }
        });

        /**
         * @description A reference to a StructureMap resource that defines a transform that can be
    executed to produce the intent resource using the ActivityDefinition instance
    as the input.
         * @property {canonical|undefined}
        */
        Object.defineProperty(this, 'transform', {
            enumerable: true,
            get: () => this.__data.transform,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.transform = value;
            }
        });

        /**
         * @description Customizations that should be applied to the statically defined resource. For
    example, if the dosage of a medication must be computed based on the patient's
    weight, a customization would be used to specify an expression that calculated
    the weight, and the path on the resource that would contain the result.
         * @property {PlanDefinitionDynamicValue[]|undefined}
        */
        Object.defineProperty(this, 'dynamicValue', {
            enumerable: true,
            get: () => this.__data.dynamicValue,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let PlanDefinitionDynamicValue = require('../backbone_elements/planDefinitionDynamicValue.js');
                this.__data.dynamicValue = Array.isArray(value) ? value.map(v => new PlanDefinitionDynamicValue(v)) : [new PlanDefinitionDynamicValue(value)];
            }
        });

        /**
         * @description Sub actions that are contained within the action. The behavior of this action
    determines the functionality of the sub-actions. For example, a selection
    behavior of at-most-one indicates that of the sub-actions, at most one may be
    chosen as part of realizing the action definition.
         * @property {PlanDefinitionAction[]|undefined}
        */
        Object.defineProperty(this, 'action', {
            enumerable: true,
            get: () => this.__data.action,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.action = Array.isArray(value) ? value.map(v => new PlanDefinitionAction(v)) : [new PlanDefinitionAction(value)];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'PlanDefinitionAction',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'PlanDefinitionAction';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            prefix: this.prefix,
            title: this.title,
            description: this.description,
            textEquivalent: this.textEquivalent,
            priority: this.priority,
            code: this.code && this.code.map(v => v.toJSON()),
            reason: this.reason && this.reason.map(v => v.toJSON()),
            documentation: this.documentation && this.documentation.map(v => v.toJSON()),
            goalId: this.goalId,
            subjectCodeableConcept: this.subjectCodeableConcept && this.subjectCodeableConcept.toJSON(),
            subjectReference: this.subjectReference && this.subjectReference.toJSON(),
            trigger: this.trigger && this.trigger.map(v => v.toJSON()),
            condition: this.condition && this.condition.map(v => v.toJSON()),
            input: this.input && this.input.map(v => v.toJSON()),
            output: this.output && this.output.map(v => v.toJSON()),
            relatedAction: this.relatedAction && this.relatedAction.map(v => v.toJSON()),
            timingDateTime: this.timingDateTime,
            timingAge: this.timingAge && this.timingAge.toJSON(),
            timingPeriod: this.timingPeriod && this.timingPeriod.toJSON(),
            timingDuration: this.timingDuration && this.timingDuration.toJSON(),
            timingRange: this.timingRange && this.timingRange.toJSON(),
            timingTiming: this.timingTiming && this.timingTiming.toJSON(),
            participant: this.participant && this.participant.map(v => v.toJSON()),
            type: this.type && this.type.toJSON(),
            groupingBehavior: this.groupingBehavior,
            selectionBehavior: this.selectionBehavior,
            requiredBehavior: this.requiredBehavior,
            precheckBehavior: this.precheckBehavior,
            cardinalityBehavior: this.cardinalityBehavior,
            definitionCanonical: this.definitionCanonical,
            definitionUri: this.definitionUri,
            transform: this.transform,
            dynamicValue: this.dynamicValue && this.dynamicValue.map(v => v.toJSON()),
            action: this.action && this.action.map(v => v.toJSON()),
        };
    }
}

module.exports = PlanDefinitionAction;
