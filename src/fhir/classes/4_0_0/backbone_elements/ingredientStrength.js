

// This file is auto-generated by generate_classes so do not edit manually

const { removeNull } = require('../../../../utils/nullRemover');

const Element = require('../complex_types/element');
const Resource = require('../resources/resource');
const async = require('async');

/**
Ingredient.Strength
    An ingredient of a manufactured item or pharmaceutical product.
*/
class IngredientStrength extends Element {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Ratio|undefined} [presentationRatio],
     * @param {RatioRange|undefined} [presentationRatioRange],
     * @param {String|undefined} [textPresentation],
     * @param {Ratio|undefined} [concentrationRatio],
     * @param {RatioRange|undefined} [concentrationRatioRange],
     * @param {String|undefined} [textConcentration],
     * @param {String|undefined} [measurementPoint],
     * @param {CodeableConcept[]|undefined} [country],
     * @param {IngredientReferenceStrength[]|undefined} [referenceStrength],
    */
    constructor (
        {
            id,
            extension,
            modifierExtension,
            presentationRatio,
            presentationRatioRange,
            textPresentation,
            concentrationRatio,
            concentrationRatioRange,
            textConcentration,
            measurementPoint,
            country,
            referenceStrength,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.extension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.
    
    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.modifierExtension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description None
         * @property {Ratio|undefined}
        */
        Object.defineProperty(this, 'presentationRatio', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.presentationRatio,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.presentationRatio = undefined;
                    return;
                }
                const Ratio = require('../complex_types/ratio.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.presentationRatio = FhirResourceCreator.create(valueProvided, Ratio);
            }
        });

        /**
         * @description None
         * @property {RatioRange|undefined}
        */
        Object.defineProperty(this, 'presentationRatioRange', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.presentationRatioRange,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.presentationRatioRange = undefined;
                    return;
                }
                const RatioRange = require('../complex_types/ratioRange.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.presentationRatioRange = FhirResourceCreator.create(valueProvided, RatioRange);
            }
        });

        /**
         * @description A textual represention of either the whole of the presentation strength or a
    part of it - with the rest being in Strength.presentation as a ratio.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'textPresentation', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.textPresentation,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.textPresentation = undefined;
                    return;
                }
                this.__data.textPresentation = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Ratio|undefined}
        */
        Object.defineProperty(this, 'concentrationRatio', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.concentrationRatio,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.concentrationRatio = undefined;
                    return;
                }
                const Ratio = require('../complex_types/ratio.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.concentrationRatio = FhirResourceCreator.create(valueProvided, Ratio);
            }
        });

        /**
         * @description None
         * @property {RatioRange|undefined}
        */
        Object.defineProperty(this, 'concentrationRatioRange', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.concentrationRatioRange,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.concentrationRatioRange = undefined;
                    return;
                }
                const RatioRange = require('../complex_types/ratioRange.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.concentrationRatioRange = FhirResourceCreator.create(valueProvided, RatioRange);
            }
        });

        /**
         * @description A textual represention of either the whole of the concentration strength or a
    part of it - with the rest being in Strength.concentration as a ratio.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'textConcentration', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.textConcentration,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.textConcentration = undefined;
                    return;
                }
                this.__data.textConcentration = valueProvided;
            }
        });

        /**
         * @description For when strength is measured at a particular point or distance. There are
    products where strength is measured at a particular point. For example, the
    strength of the ingredient in some inhalers is measured at a particular
    position relative to the point of aerosolization.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'measurementPoint', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.measurementPoint,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.measurementPoint = undefined;
                    return;
                }
                this.__data.measurementPoint = valueProvided;
            }
        });

        /**
         * @description The country or countries for which the strength range applies.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'country', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.country,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.country = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.country = FhirResourceCreator.createArray(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Strength expressed in terms of a reference substance. For when the ingredient
    strength is additionally expressed as equivalent to the strength of some other
    closely related substance (e.g. salt vs. base). Reference strength represents
    the strength (quantitative composition) of the active moiety of the active
    substance. There are situations when the active substance and active moiety
    are different, therefore both a strength and a reference strength are needed.
         * @property {IngredientReferenceStrength[]|undefined}
        */
        Object.defineProperty(this, 'referenceStrength', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.referenceStrength,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.referenceStrength = undefined;
                    return;
                }
                const IngredientReferenceStrength = require('../backbone_elements/ingredientReferenceStrength.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.referenceStrength = FhirResourceCreator.createArray(valueProvided, IngredientReferenceStrength);
            }
        });


        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            presentationRatio,
            presentationRatioRange,
            textPresentation,
            concentrationRatio,
            concentrationRatioRange,
            textConcentration,
            measurementPoint,
            country,
            referenceStrength,
        });
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON () {
        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            presentationRatio: this.presentationRatio && this.presentationRatio.toJSON(),
            presentationRatioRange: this.presentationRatioRange && this.presentationRatioRange.toJSON(),
            textPresentation: this.textPresentation,
            concentrationRatio: this.concentrationRatio && this.concentrationRatio.toJSON(),
            concentrationRatioRange: this.concentrationRatioRange && this.concentrationRatioRange.toJSON(),
            textConcentration: this.textConcentration,
            measurementPoint: this.measurementPoint,
            country: this.country && this.country.map(v => v.toJSON()),
            referenceStrength: this.referenceStrength && this.referenceStrength.map(v => v.toJSON()),
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync ({ fnUpdateReferenceAsync }) {
            if (this.extension) { await async.each(this.extension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.modifierExtension) { await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.presentationRatio) { await this.presentationRatio.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.presentationRatioRange) { await this.presentationRatioRange.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.concentrationRatio) { await this.concentrationRatio.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.concentrationRatioRange) { await this.concentrationRatioRange.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.country) { await async.each(this.country, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.referenceStrength) { await async.each(this.referenceStrength, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal () {
        const json = {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            presentationRatio: this.presentationRatio && this.presentationRatio.toJSONInternal(),
            presentationRatioRange: this.presentationRatioRange && this.presentationRatioRange.toJSONInternal(),
            textPresentation: this.textPresentation,
            concentrationRatio: this.concentrationRatio && this.concentrationRatio.toJSONInternal(),
            concentrationRatioRange: this.concentrationRatioRange && this.concentrationRatioRange.toJSONInternal(),
            textConcentration: this.textConcentration,
            measurementPoint: this.measurementPoint,
            country: this.country && this.country.map(v => v.toJSONInternal()),
            referenceStrength: this.referenceStrength && this.referenceStrength.map(v => v.toJSONInternal()),
        };

        return removeNull(json);
    }
}

module.exports = IngredientStrength;
