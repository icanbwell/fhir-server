/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');
const Resource = require('../resources/resource');
const async = require('async');


/**
SpecimenDefinition.TypeTested
    A kind of specimen with associated set of requirements.
*/
class SpecimenDefinitionTypeTested extends Element {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Boolean|undefined} [isDerived],
     * @param {CodeableConcept|undefined} [type],
     * @param {code} preference,
     * @param {SpecimenDefinitionContainer|undefined} [container],
     * @param {String|undefined} [requirement],
     * @param {Quantity|undefined} [retentionTime],
     * @param {CodeableConcept[]|undefined} [rejectionCriterion],
     * @param {SpecimenDefinitionHandling[]|undefined} [handling],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            isDerived,
            type,
            preference,
            container,
            requirement,
            retentionTime,
            rejectionCriterion,
            handling,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.extension = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Extension ?
                                v : new Extension(v)
                            );
                } else {
                    if (valueProvided instanceof Extension) {
                        this.__data.extension = valueProvided;
                    } else {
                        this.__data.extension = [new Extension(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.modifierExtension = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Extension ?
                                v : new Extension(v)
                            );
                } else {
                    if (valueProvided instanceof Extension) {
                        this.__data.modifierExtension = valueProvided;
                    } else {
                        this.__data.modifierExtension = [new Extension(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Primary of secondary specimen.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'isDerived', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.isDerived,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.isDerived = undefined;
                    return;
                }
                this.__data.isDerived = valueProvided;
            }
        });

        /**
         * @description The kind of specimen conditioned for testing expected by lab.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'type', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.type = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (valueProvided instanceof CodeableConcept){
                    this.__data.type = valueProvided;
                } else {
                    this.__data.type = new CodeableConcept(valueProvided);
                }
            }
        });

        /**
         * @description The preference for this type of conditioned specimen.
         * @property {code}
        */
        Object.defineProperty(this, 'preference', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.preference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.preference = undefined;
                    return;
                }
                this.__data.preference = valueProvided;
            }
        });

        /**
         * @description The specimen's container.
         * @property {SpecimenDefinitionContainer|undefined}
        */
        Object.defineProperty(this, 'container', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.container,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.container = undefined;
                    return;
                }
                const SpecimenDefinitionContainer = require('../backbone_elements/specimenDefinitionContainer.js');
                if (valueProvided instanceof SpecimenDefinitionContainer){
                    this.__data.container = valueProvided;
                } else {
                    this.__data.container = new SpecimenDefinitionContainer(valueProvided);
                }
            }
        });

        /**
         * @description Requirements for delivery and special handling of this kind of conditioned
    specimen.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'requirement', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.requirement,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.requirement = undefined;
                    return;
                }
                this.__data.requirement = valueProvided;
            }
        });

        /**
         * @description The usual time that a specimen of this kind is retained after the ordered
    tests are completed, for the purpose of additional testing.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'retentionTime', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.retentionTime,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.retentionTime = undefined;
                    return;
                }
                const Quantity = require('../complex_types/quantity.js');
                if (valueProvided instanceof Quantity){
                    this.__data.retentionTime = valueProvided;
                } else {
                    this.__data.retentionTime = new Quantity(valueProvided);
                }
            }
        });

        /**
         * @description Criterion for rejection of the specimen in its container by the laboratory.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'rejectionCriterion', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.rejectionCriterion,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.rejectionCriterion = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.rejectionCriterion = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof CodeableConcept ?
                                v : new CodeableConcept(v)
                            );
                } else {
                    if (valueProvided instanceof CodeableConcept) {
                        this.__data.rejectionCriterion = valueProvided;
                    } else {
                        this.__data.rejectionCriterion = [new CodeableConcept(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Set of instructions for preservation/transport of the specimen at a defined
    temperature interval, prior the testing process.
         * @property {SpecimenDefinitionHandling[]|undefined}
        */
        Object.defineProperty(this, 'handling', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.handling,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.handling = undefined;
                    return;
                }
                const SpecimenDefinitionHandling = require('../backbone_elements/specimenDefinitionHandling.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.handling = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof SpecimenDefinitionHandling ?
                                v : new SpecimenDefinitionHandling(v)
                            );
                } else {
                    if (valueProvided instanceof SpecimenDefinitionHandling) {
                        this.__data.handling = valueProvided;
                    } else {
                        this.__data.handling = [new SpecimenDefinitionHandling(valueProvided)];
                    }
                }
            }
        });




        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            isDerived,
            type,
            preference,
            container,
            requirement,
            retentionTime,
            rejectionCriterion,
            handling,
        });

    }



    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            isDerived: this.isDerived,
            type: this.type && this.type.toJSON(),
            preference: this.preference,
            container: this.container && this.container.toJSON(),
            requirement: this.requirement,
            retentionTime: this.retentionTime && this.retentionTime.toJSON(),
            rejectionCriterion: this.rejectionCriterion && this.rejectionCriterion.map(v => v.toJSON()),
            handling: this.handling && this.handling.map(v => v.toJSON()),
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync({fnUpdateReferenceAsync}) {
            if (this.extension) {await async.each(this.extension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.modifierExtension) {await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.type) {await this.type.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.container) {await this.container.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.retentionTime) {await this.retentionTime.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.rejectionCriterion) {await async.each(this.rejectionCriterion, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.handling) {await async.each(this.handling, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal() {
        const {removeNull} = require('../../../../utils/nullRemover');
        const json = {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            isDerived: this.isDerived,
            type: this.type && this.type.toJSONInternal(),
            preference: this.preference,
            container: this.container && this.container.toJSONInternal(),
            requirement: this.requirement,
            retentionTime: this.retentionTime && this.retentionTime.toJSONInternal(),
            rejectionCriterion: this.rejectionCriterion && this.rejectionCriterion.map(v => v.toJSONInternal()),
            handling: this.handling && this.handling.map(v => v.toJSONInternal()),
        };



        return removeNull(json);
    }
}

module.exports = SpecimenDefinitionTypeTested;
