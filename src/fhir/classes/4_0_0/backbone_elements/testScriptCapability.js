/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

/**
TestScript.Capability
    A structured set of tests against a FHIR server or client implementation to
    determine compliance against the FHIR specification.
*/
class TestScriptCapability {
    constructor(
        {
            id,
            extension,
            modifierExtension,
            required,
            validated,
            description,
            origin,
            destination,
            link,
            capabilities,
        }
    ) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description Whether or not the test execution will require the given capabilities of the
    server in order for this test script to execute.
         * @property {Boolean}
        */
        Object.defineProperty(this, 'required', {
            enumerable: true,
            get: () => this.__data.required,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.required = valueProvided;
            }
        });

        /**
         * @description Whether or not the test execution will validate the given capabilities of the
    server in order for this test script to execute.
         * @property {Boolean}
        */
        Object.defineProperty(this, 'validated', {
            enumerable: true,
            get: () => this.__data.validated,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.validated = valueProvided;
            }
        });

        /**
         * @description Description of the capabilities that this test script is requiring the server
    to support.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description Which origin server these requirements apply to.
         * @property {Int[]|undefined}
        */
        Object.defineProperty(this, 'origin', {
            enumerable: true,
            get: () => this.__data.origin,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.origin = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description Which server these requirements apply to.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'destination', {
            enumerable: true,
            get: () => this.__data.destination,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.destination = valueProvided;
            }
        });

        /**
         * @description Links to the FHIR specification that describes this interaction and the
    resources involved in more detail.
         * @property {uri[]|undefined}
        */
        Object.defineProperty(this, 'link', {
            enumerable: true,
            get: () => this.__data.link,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.link = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description Minimum capabilities required of server for test script to execute
    successfully.   If server does not meet at a minimum the referenced capability
    statement, then all tests in this script are skipped.
         * @property {canonical}
        */
        Object.defineProperty(this, 'capabilities', {
            enumerable: true,
            get: () => this.__data.capabilities,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.capabilities = valueProvided;
            }
        });

        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            required,
            validated,
            description,
            origin,
            destination,
            link,
            capabilities,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'TestScriptCapability',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'TestScriptCapability';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            required: this.required,
            validated: this.validated,
            description: this.description,
            origin: this.origin,
            destination: this.destination,
            link: this.link,
            capabilities: this.capabilities,
        };
    }
}

module.exports = TestScriptCapability;
