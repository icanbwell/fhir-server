/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

/**
Immunization.ProtocolApplied
    Describes the event of a patient being administered a vaccine or a record of
    an immunization as reported by a patient, a clinician or another party.
*/
class ImmunizationProtocolApplied {
    constructor(
        {
            id,
            extension,
            modifierExtension,
            series,
            authority,
            targetDisease,
            doseNumberPositiveInt,
            doseNumberString,
            seriesDosesPositiveInt,
            seriesDosesString,
        }
    ) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description One possible path to achieve presumed immunity against a disease - within the
    context of an authority.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'series', {
            enumerable: true,
            get: () => this.__data.series,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.series = valueProvided;
            }
        });

        /**
         * @description Indicates the authority who published the protocol (e.g. ACIP) that is being
    followed.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'authority', {
            enumerable: true,
            get: () => this.__data.authority,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.authority = new Reference(valueProvided);
            }
        });

        /**
         * @description The vaccine preventable disease the dose is being administered against.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'targetDisease', {
            enumerable: true,
            get: () => this.__data.targetDisease,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.targetDisease = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'doseNumberPositiveInt', {
            enumerable: true,
            get: () => this.__data.doseNumberPositiveInt,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.doseNumberPositiveInt = valueProvided;
            }
        });

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'doseNumberString', {
            enumerable: true,
            get: () => this.__data.doseNumberString,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.doseNumberString = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'seriesDosesPositiveInt', {
            enumerable: true,
            get: () => this.__data.seriesDosesPositiveInt,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.seriesDosesPositiveInt = valueProvided;
            }
        });

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'seriesDosesString', {
            enumerable: true,
            get: () => this.__data.seriesDosesString,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.seriesDosesString = valueProvided;
            }
        });

        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            series,
            authority,
            targetDisease,
            doseNumberPositiveInt,
            doseNumberString,
            seriesDosesPositiveInt,
            seriesDosesString,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ImmunizationProtocolApplied',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ImmunizationProtocolApplied';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            series: this.series,
            authority: this.authority && this.authority.toJSON(),
            targetDisease: this.targetDisease && this.targetDisease.map(v => v.toJSON()),
            doseNumberPositiveInt: this.doseNumberPositiveInt,
            doseNumberString: this.doseNumberString,
            seriesDosesPositiveInt: this.seriesDosesPositiveInt,
            seriesDosesString: this.seriesDosesString,
        };
    }
}

module.exports = ImmunizationProtocolApplied;
