

// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');
const Resource = require('../resources/resource');
const async = require('async');

/**
ClinicalUseDefinition.Indication
    A single issue - either an indication, contraindication, interaction or an
    undesirable effect for a medicinal product, medication, device or procedure.
*/
class ClinicalUseDefinitionIndication extends Element {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {CodeableReference|undefined} [diseaseSymptomProcedure],
     * @param {CodeableReference|undefined} [diseaseStatus],
     * @param {CodeableReference[]|undefined} [comorbidity],
     * @param {CodeableReference|undefined} [intendedEffect],
     * @param {Range|undefined} [durationRange],
     * @param {String|undefined} [durationString],
     * @param {Reference[]|undefined} [undesirableEffect],
     * @param {ClinicalUseDefinitionOtherTherapy[]|undefined} [otherTherapy],
    */
    constructor (
        {
            id,
            extension,
            modifierExtension,
            diseaseSymptomProcedure,
            diseaseStatus,
            comorbidity,
            intendedEffect,
            durationRange,
            durationString,
            undesirableEffect,
            otherTherapy
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.extension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.modifierExtension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description The situation that is being documented as an indicaton for this item.
         * @property {CodeableReference|undefined}
        */
        Object.defineProperty(this, 'diseaseSymptomProcedure', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.diseaseSymptomProcedure,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.diseaseSymptomProcedure = undefined;
                    return;
                }
                const CodeableReference = require('../complex_types/codeableReference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.diseaseSymptomProcedure = FhirResourceCreator.create(valueProvided, CodeableReference);
            }
        });

        /**
         * @description The status of the disease or symptom for the indication, for example "chronic"
    or "metastatic".
         * @property {CodeableReference|undefined}
        */
        Object.defineProperty(this, 'diseaseStatus', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.diseaseStatus,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.diseaseStatus = undefined;
                    return;
                }
                const CodeableReference = require('../complex_types/codeableReference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.diseaseStatus = FhirResourceCreator.create(valueProvided, CodeableReference);
            }
        });

        /**
         * @description A comorbidity (concurrent condition) or coinfection as part of the indication.
         * @property {CodeableReference[]|undefined}
        */
        Object.defineProperty(this, 'comorbidity', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.comorbidity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.comorbidity = undefined;
                    return;
                }
                const CodeableReference = require('../complex_types/codeableReference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.comorbidity = FhirResourceCreator.createArray(valueProvided, CodeableReference);
            }
        });

        /**
         * @description The intended effect, aim or strategy to be achieved.
         * @property {CodeableReference|undefined}
        */
        Object.defineProperty(this, 'intendedEffect', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.intendedEffect,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.intendedEffect = undefined;
                    return;
                }
                const CodeableReference = require('../complex_types/codeableReference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.intendedEffect = FhirResourceCreator.create(valueProvided, CodeableReference);
            }
        });

        /**
         * @description None
         * @property {Range|undefined}
        */
        Object.defineProperty(this, 'durationRange', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.durationRange,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.durationRange = undefined;
                    return;
                }
                const Range = require('../complex_types/range.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.durationRange = FhirResourceCreator.create(valueProvided, Range);
            }
        });

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'durationString', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.durationString,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.durationString = undefined;
                    return;
                }
                this.__data.durationString = valueProvided;
            }
        });

        /**
         * @description An unwanted side effect or negative outcome that may happen if you use the
    drug (or other subject of this resource) for this indication.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'undesirableEffect', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.undesirableEffect,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.undesirableEffect = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.undesirableEffect = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description Information about the use of the medicinal product in relation to other
    therapies described as part of the indication.
         * @property {ClinicalUseDefinitionOtherTherapy[]|undefined}
        */
        Object.defineProperty(this, 'otherTherapy', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.otherTherapy,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.otherTherapy = undefined;
                    return;
                }
                const ClinicalUseDefinitionOtherTherapy = require('../backbone_elements/clinicalUseDefinitionOtherTherapy.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.otherTherapy = FhirResourceCreator.createArray(valueProvided, ClinicalUseDefinitionOtherTherapy);
            }
        });


        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            diseaseSymptomProcedure,
            diseaseStatus,
            comorbidity,
            intendedEffect,
            durationRange,
            durationString,
            undesirableEffect,
            otherTherapy
        });
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON () {
        const { removeNull } = require('../../../../utils/nullRemover');

        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            diseaseSymptomProcedure: this.diseaseSymptomProcedure && this.diseaseSymptomProcedure.toJSON(),
            diseaseStatus: this.diseaseStatus && this.diseaseStatus.toJSON(),
            comorbidity: this.comorbidity && this.comorbidity.map(v => v.toJSON()),
            intendedEffect: this.intendedEffect && this.intendedEffect.toJSON(),
            durationRange: this.durationRange && this.durationRange.toJSON(),
            durationString: this.durationString,
            undesirableEffect: this.undesirableEffect && this.undesirableEffect.map(v => v.toJSON()),
            otherTherapy: this.otherTherapy && this.otherTherapy.map(v => v.toJSON())
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync ({ fnUpdateReferenceAsync }) {
            if (this.extension) { await async.each(this.extension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.modifierExtension) { await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.diseaseSymptomProcedure) { await this.diseaseSymptomProcedure.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.diseaseStatus) { await this.diseaseStatus.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.comorbidity) { await async.each(this.comorbidity, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.intendedEffect) { await this.intendedEffect.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.durationRange) { await this.durationRange.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.undesirableEffect) { await async.each(this.undesirableEffect, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.otherTherapy) { await async.each(this.otherTherapy, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal () {
        const { removeNull } = require('../../../../utils/nullRemover');
        const json = {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            diseaseSymptomProcedure: this.diseaseSymptomProcedure && this.diseaseSymptomProcedure.toJSONInternal(),
            diseaseStatus: this.diseaseStatus && this.diseaseStatus.toJSONInternal(),
            comorbidity: this.comorbidity && this.comorbidity.map(v => v.toJSONInternal()),
            intendedEffect: this.intendedEffect && this.intendedEffect.toJSONInternal(),
            durationRange: this.durationRange && this.durationRange.toJSONInternal(),
            durationString: this.durationString,
            undesirableEffect: this.undesirableEffect && this.undesirableEffect.map(v => v.toJSONInternal()),
            otherTherapy: this.otherTherapy && this.otherTherapy.map(v => v.toJSONInternal())
        };

        return removeNull(json);
    }
}

module.exports = ClinicalUseDefinitionIndication;
