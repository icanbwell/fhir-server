/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

/**
SubstanceNucleicAcid.Linkage
    Nucleic acids are defined by three distinct elements: the base, sugar and
    linkage. Individual substance/moiety IDs will be created for each of these
    elements. The nucleotide sequence will be always entered in the 5’-3’
    direction.
*/
class SubstanceNucleicAcidLinkage {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {String|undefined} [connectivity],
     * @param {Identifier|undefined} [identifier],
     * @param {String|undefined} [name],
     * @param {String|undefined} [residueSite],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            connectivity,
            identifier,
            name,
            residueSite,
        }
    ) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description The entity that links the sugar residues together should also be captured for
    nearly all naturally occurring nucleic acid the linkage is a phosphate group.
    For many synthetic oligonucleotides phosphorothioate linkages are often seen.
    Linkage connectivity is assumed to be 3’-5’. If the linkage is either 3’-3’ or
    5’-5’ this should be specified.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'connectivity', {
            enumerable: true,
            get: () => this.__data.connectivity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.connectivity = valueProvided;
            }
        });

        /**
         * @description Each linkage will be registered as a fragment and have an ID.
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = new Identifier(valueProvided);
            }
        });

        /**
         * @description Each linkage will be registered as a fragment and have at least one name. A
    single name shall be assigned to each linkage.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'name', {
            enumerable: true,
            get: () => this.__data.name,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.name = valueProvided;
            }
        });

        /**
         * @description Residues shall be captured as described in 5.3.6.8.3.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'residueSite', {
            enumerable: true,
            get: () => this.__data.residueSite,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.residueSite = valueProvided;
            }
        });

        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            connectivity,
            identifier,
            name,
            residueSite,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'SubstanceNucleicAcidLinkage',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'SubstanceNucleicAcidLinkage';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            connectivity: this.connectivity,
            identifier: this.identifier && this.identifier.toJSON(),
            name: this.name,
            residueSite: this.residueSite,
        };
    }
}

module.exports = SubstanceNucleicAcidLinkage;
