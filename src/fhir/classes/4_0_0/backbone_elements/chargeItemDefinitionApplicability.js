/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

/**
ChargeItemDefinition.Applicability
    The ChargeItemDefinition resource provides the properties that apply to the
    (billing) codes necessary to calculate costs and prices. The properties may
    differ largely depending on type and realm, therefore this resource gives only
    a rough structure and requires profiling for each type of billing code system.
*/
class ChargeItemDefinitionApplicability {
    constructor(
        {
            id,
            extension,
            modifierExtension,
            description,
            language,
            expression,
        }
    ) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description A brief, natural language description of the condition that effectively
    communicates the intended semantics.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description The media type of the language for the expression, e.g. "text/cql" for
    Clinical Query Language expressions or "text/fhirpath" for FHIRPath
    expressions.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description An expression that returns true or false, indicating whether the condition is
    satisfied. When using FHIRPath expressions, the %context environment variable
    must be replaced at runtime with the ChargeItem resource to which this
    definition is applied.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'expression', {
            enumerable: true,
            get: () => this.__data.expression,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.expression = valueProvided;
            }
        });

        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            description,
            language,
            expression,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ChargeItemDefinitionApplicability',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ChargeItemDefinitionApplicability';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            description: this.description,
            language: this.language,
            expression: this.expression,
        };
    }
}

module.exports = ChargeItemDefinitionApplicability;
