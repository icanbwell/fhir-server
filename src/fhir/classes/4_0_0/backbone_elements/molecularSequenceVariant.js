/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');


/**
MolecularSequence.Variant
    Raw data describing a biological sequence.
*/
class MolecularSequenceVariant extends Element {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Int|undefined} [start],
     * @param {Int|undefined} [end],
     * @param {String|undefined} [observedAllele],
     * @param {String|undefined} [referenceAllele],
     * @param {String|undefined} [cigar],
     * @param {Reference|undefined} [variantPointer],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            start,
            end,
            observedAllele,
            referenceAllele,
            cigar,
            variantPointer,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description Start position of the variant on the  reference sequence. If the coordinate
    system is either 0-based or 1-based, then start position is inclusive.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'start', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.start,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.start = undefined;
                    return;
                }
                this.__data.start = valueProvided;
            }
        });

        /**
         * @description End position of the variant on the reference sequence. If the coordinate
    system is 0-based then end is exclusive and does not include the last
    position. If the coordinate system is 1-base, then end is inclusive and
    includes the last position.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'end', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.end,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.end = undefined;
                    return;
                }
                this.__data.end = valueProvided;
            }
        });

        /**
         * @description An allele is one of a set of coexisting sequence variants of a gene ([SO:00010
    23](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)).
    Nucleotide(s)/amino acids from start position of sequence to stop position of
    sequence on the positive (+) strand of the observed  sequence. When the
    sequence  type is DNA, it should be the sequence on the positive (+) strand.
    This will lay in the range between variant.start and variant.end.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'observedAllele', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.observedAllele,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.observedAllele = undefined;
                    return;
                }
                this.__data.observedAllele = valueProvided;
            }
        });

        /**
         * @description An allele is one of a set of coexisting sequence variants of a gene ([SO:00010
    23](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)).
    Nucleotide(s)/amino acids from start position of sequence to stop position of
    sequence on the positive (+) strand of the reference sequence. When the
    sequence  type is DNA, it should be the sequence on the positive (+) strand.
    This will lay in the range between variant.start and variant.end.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'referenceAllele', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.referenceAllele,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.referenceAllele = undefined;
                    return;
                }
                this.__data.referenceAllele = valueProvided;
            }
        });

        /**
         * @description Extended CIGAR string for aligning the sequence with reference bases. See
    detailed documentation [here](http://support.illumina.com/help/SequencingAnaly
    sisWorkflow/Content/Vault/Informatics/Sequencing_Analysis/CASAVA/swSEQ_mCA_Ext
    endedCIGARFormat.htm).
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'cigar', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.cigar,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.cigar = undefined;
                    return;
                }
                this.__data.cigar = valueProvided;
            }
        });

        /**
         * @description A pointer to an Observation containing variant information.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'variantPointer', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.variantPointer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.variantPointer = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                this.__data.variantPointer = new Reference(valueProvided);
            }
        });



        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            start,
            end,
            observedAllele,
            referenceAllele,
            cigar,
            variantPointer,
        });

    }



    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            start: this.start,
            end: this.end,
            observedAllele: this.observedAllele,
            referenceAllele: this.referenceAllele,
            cigar: this.cigar,
            variantPointer: this.variantPointer && this.variantPointer.toJSON(),
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Reference} fnUpdateReference
     * @return {void}
     */
    updateReferences({fnUpdateReference}) {
            if (this.extension) {this.extension.forEach(v => v.updateReferences({fnUpdateReference}));}
            if (this.modifierExtension) {this.modifierExtension.forEach(v => v.updateReferences({fnUpdateReference}));}
            if (this.variantPointer) {this.variantPointer.updateReferences({fnUpdateReference});}
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal() {
        const {removeNull} = require('../../../../utils/nullRemover');
        const json = this.toJSON();


        return removeNull(json);
    }
}

module.exports = MolecularSequenceVariant;
