/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');


/**
RiskAssessment.Prediction
    An assessment of the likely outcome(s) for a patient or other subject as well
    as the likelihood of each outcome.
*/
class RiskAssessmentPrediction extends Element {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {CodeableConcept|undefined} [outcome],
     * @param {decimal|undefined} [probabilityDecimal],
     * @param {Range|undefined} [probabilityRange],
     * @param {CodeableConcept|undefined} [qualitativeRisk],
     * @param {decimal|undefined} [relativeRisk],
     * @param {Period|undefined} [whenPeriod],
     * @param {Range|undefined} [whenRange],
     * @param {String|undefined} [rationale],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            outcome,
            probabilityDecimal,
            probabilityRange,
            qualitativeRisk,
            relativeRisk,
            whenPeriod,
            whenRange,
            rationale,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description One of the potential outcomes for the patient (e.g. remission, death,  a
    particular condition).
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'outcome', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.outcome,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.outcome = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description None
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'probabilityDecimal', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.probabilityDecimal,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.probabilityDecimal = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Range|undefined}
        */
        Object.defineProperty(this, 'probabilityRange', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.probabilityRange,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Range = require('../complex_types/range.js');
                this.__data.probabilityRange = new Range(valueProvided);
            }
        });

        /**
         * @description Indicates how likely the outcome is (in the specified timeframe), expressed as
    a qualitative value (e.g. low, medium, or high).
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'qualitativeRisk', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.qualitativeRisk,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.qualitativeRisk = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description Indicates the risk for this particular subject (with their specific
    characteristics) divided by the risk of the population in general.  (Numbers
    greater than 1 = higher risk than the population, numbers less than 1 = lower
    risk.).
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'relativeRisk', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.relativeRisk,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.relativeRisk = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'whenPeriod', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.whenPeriod,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.whenPeriod = new Period(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Range|undefined}
        */
        Object.defineProperty(this, 'whenRange', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.whenRange,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Range = require('../complex_types/range.js');
                this.__data.whenRange = new Range(valueProvided);
            }
        });

        /**
         * @description Additional information explaining the basis for the prediction.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'rationale', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.rationale,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.rationale = valueProvided;
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            outcome,
            probabilityDecimal,
            probabilityRange,
            qualitativeRisk,
            relativeRisk,
            whenPeriod,
            whenRange,
            rationale,
        });

    }

    static get resourceType() {
        return 'RiskAssessmentPrediction';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            outcome: this.outcome && this.outcome.toJSON(),
            probabilityDecimal: this.probabilityDecimal,
            probabilityRange: this.probabilityRange && this.probabilityRange.toJSON(),
            qualitativeRisk: this.qualitativeRisk && this.qualitativeRisk.toJSON(),
            relativeRisk: this.relativeRisk,
            whenPeriod: this.whenPeriod && this.whenPeriod.toJSON(),
            whenRange: this.whenRange && this.whenRange.toJSON(),
            rationale: this.rationale,
        };
    }
}

module.exports = RiskAssessmentPrediction;
