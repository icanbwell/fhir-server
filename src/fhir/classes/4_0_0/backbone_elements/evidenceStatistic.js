

// This file is auto-generated by generate_classes so do not edit manually

const { removeNull } = require('../../../../utils/nullRemover');

const Element = require('../complex_types/element');
const Resource = require('../resources/resource');
const async = require('async');

/**
Evidence.Statistic
    The Evidence Resource provides a machine-interpretable expression of an
    evidence concept including the evidence variables (eg population,
    exposures/interventions, comparators, outcomes, measured variables,
    confounding variables), the statistics, and the certainty of this evidence.
*/
class EvidenceStatistic extends Element {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {String|undefined} [description],
     * @param {Annotation[]|undefined} [note],
     * @param {CodeableConcept|undefined} [statisticType],
     * @param {CodeableConcept|undefined} [category],
     * @param {Quantity|undefined} [quantity],
     * @param {unsignedInt|undefined} [numberOfEvents],
     * @param {unsignedInt|undefined} [numberAffected],
     * @param {EvidenceSampleSize|undefined} [sampleSize],
     * @param {EvidenceAttributeEstimate[]|undefined} [attributeEstimate],
     * @param {EvidenceModelCharacteristic[]|undefined} [modelCharacteristic],
    */
    constructor (
        {
            id,
            extension,
            modifierExtension,
            description,
            note,
            statisticType,
            category,
            quantity,
            numberOfEvents,
            numberAffected,
            sampleSize,
            attributeEstimate,
            modelCharacteristic
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.extension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.modifierExtension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description A description of the content value of the statistic.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.description = undefined;
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description Footnotes and/or explanatory notes.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.note,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.note = undefined;
                    return;
                }
                const Annotation = require('../complex_types/annotation.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.note = FhirResourceCreator.createArray(valueProvided, Annotation);
            }
        });

        /**
         * @description Type of statistic, eg relative risk.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'statisticType', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.statisticType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.statisticType = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.statisticType = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description When the measured variable is handled categorically, the category element is
    used to define which category the statistic is reporting.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'category', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.category,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.category = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.category = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Statistic value.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'quantity', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.quantity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.quantity = undefined;
                    return;
                }
                const Quantity = require('../complex_types/quantity.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.quantity = FhirResourceCreator.create(valueProvided, Quantity);
            }
        });

        /**
         * @description The number of events associated with the statistic, where the unit of analysis
    is different from numberAffected, sampleSize.knownDataCount and
    sampleSize.numberOfParticipants.
         * @property {unsignedInt|undefined}
        */
        Object.defineProperty(this, 'numberOfEvents', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.numberOfEvents,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.numberOfEvents = undefined;
                    return;
                }
                this.__data.numberOfEvents = valueProvided;
            }
        });

        /**
         * @description The number of participants affected where the unit of analysis is the same as
    sampleSize.knownDataCount and sampleSize.numberOfParticipants.
         * @property {unsignedInt|undefined}
        */
        Object.defineProperty(this, 'numberAffected', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.numberAffected,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.numberAffected = undefined;
                    return;
                }
                this.__data.numberAffected = valueProvided;
            }
        });

        /**
         * @description Number of samples in the statistic.
         * @property {EvidenceSampleSize|undefined}
        */
        Object.defineProperty(this, 'sampleSize', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.sampleSize,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.sampleSize = undefined;
                    return;
                }
                const EvidenceSampleSize = require('../backbone_elements/evidenceSampleSize.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.sampleSize = FhirResourceCreator.create(valueProvided, EvidenceSampleSize);
            }
        });

        /**
         * @description A statistical attribute of the statistic such as a measure of heterogeneity.
         * @property {EvidenceAttributeEstimate[]|undefined}
        */
        Object.defineProperty(this, 'attributeEstimate', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.attributeEstimate,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.attributeEstimate = undefined;
                    return;
                }
                const EvidenceAttributeEstimate = require('../backbone_elements/evidenceAttributeEstimate.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.attributeEstimate = FhirResourceCreator.createArray(valueProvided, EvidenceAttributeEstimate);
            }
        });

        /**
         * @description A component of the method to generate the statistic.
         * @property {EvidenceModelCharacteristic[]|undefined}
        */
        Object.defineProperty(this, 'modelCharacteristic', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modelCharacteristic,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modelCharacteristic = undefined;
                    return;
                }
                const EvidenceModelCharacteristic = require('../backbone_elements/evidenceModelCharacteristic.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.modelCharacteristic = FhirResourceCreator.createArray(valueProvided, EvidenceModelCharacteristic);
            }
        });


        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            description,
            note,
            statisticType,
            category,
            quantity,
            numberOfEvents,
            numberAffected,
            sampleSize,
            attributeEstimate,
            modelCharacteristic
        });
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON () {
        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            description: this.description,
            note: this.note && this.note.map(v => v.toJSON()),
            statisticType: this.statisticType && this.statisticType.toJSON(),
            category: this.category && this.category.toJSON(),
            quantity: this.quantity && this.quantity.toJSON(),
            numberOfEvents: this.numberOfEvents,
            numberAffected: this.numberAffected,
            sampleSize: this.sampleSize && this.sampleSize.toJSON(),
            attributeEstimate: this.attributeEstimate && this.attributeEstimate.map(v => v.toJSON()),
            modelCharacteristic: this.modelCharacteristic && this.modelCharacteristic.map(v => v.toJSON())
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync ({ fnUpdateReferenceAsync }) {
            if (this.extension) { await async.each(this.extension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.modifierExtension) { await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.note) { await async.each(this.note, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.statisticType) { await this.statisticType.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.category) { await this.category.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.quantity) { await this.quantity.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.sampleSize) { await this.sampleSize.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.attributeEstimate) { await async.each(this.attributeEstimate, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.modelCharacteristic) { await async.each(this.modelCharacteristic, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal () {
        const json = {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            description: this.description,
            note: this.note && this.note.map(v => v.toJSONInternal()),
            statisticType: this.statisticType && this.statisticType.toJSONInternal(),
            category: this.category && this.category.toJSONInternal(),
            quantity: this.quantity && this.quantity.toJSONInternal(),
            numberOfEvents: this.numberOfEvents,
            numberAffected: this.numberAffected,
            sampleSize: this.sampleSize && this.sampleSize.toJSONInternal(),
            attributeEstimate: this.attributeEstimate && this.attributeEstimate.map(v => v.toJSONInternal()),
            modelCharacteristic: this.modelCharacteristic && this.modelCharacteristic.map(v => v.toJSONInternal())
        };

        return removeNull(json);
    }
}

module.exports = EvidenceStatistic;
