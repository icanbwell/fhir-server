/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

/**
ElementDefinition.Type
    Captures constraints on each element within the resource, profile, or
    extension.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class ElementDefinitionType {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {uri} code,
     * @param {canonical[]|undefined} [profile],
     * @param {canonical[]|undefined} [targetProfile],
     * @param {code[]|undefined} [aggregation],
     * @param {code|undefined} [versioning],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            code,
            profile,
            targetProfile,
            aggregation,
            versioning,
        }
    ) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description URL of Data type or Resource that is a(or the) type used for this element.
    References are URLs that are relative to
    http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to
    http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed
    in logical models.
         * @property {uri}
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            get: () => this.__data.code,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.code = valueProvided;
            }
        });

        /**
         * @description Identifies a profile structure or implementation Guide that applies to the
    datatype this element refers to. If any profiles are specified, then the
    content must conform to at least one of them. The URL can be a local reference
    - to a contained StructureDefinition, or a reference to another
    StructureDefinition or Implementation Guide by a canonical URL. When an
    implementation guide is specified, the type SHALL conform to at least one
    profile defined in the implementation guide.
         * @property {canonical[]|undefined}
        */
        Object.defineProperty(this, 'profile', {
            enumerable: true,
            get: () => this.__data.profile,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.profile = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description Used when the type is "Reference" or "canonical", and identifies a profile
    structure or implementation Guide that applies to the target of the reference
    this element refers to. If any profiles are specified, then the content must
    conform to at least one of them. The URL can be a local reference - to a
    contained StructureDefinition, or a reference to another StructureDefinition
    or Implementation Guide by a canonical URL. When an implementation guide is
    specified, the target resource SHALL conform to at least one profile defined
    in the implementation guide.
         * @property {canonical[]|undefined}
        */
        Object.defineProperty(this, 'targetProfile', {
            enumerable: true,
            get: () => this.__data.targetProfile,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.targetProfile = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description If the type is a reference to another resource, how the resource is or can be
    aggregated - is it a contained resource, or a reference, and if the context is
    a bundle, is it included in the bundle.
         * @property {code[]|undefined}
        */
        Object.defineProperty(this, 'aggregation', {
            enumerable: true,
            get: () => this.__data.aggregation,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.aggregation = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description Whether this reference needs to be version specific or version independent, or
    whether either can be used.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'versioning', {
            enumerable: true,
            get: () => this.__data.versioning,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.versioning = valueProvided;
            }
        });

        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            code,
            profile,
            targetProfile,
            aggregation,
            versioning,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ElementDefinitionType',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ElementDefinitionType';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            code: this.code,
            profile: this.profile,
            targetProfile: this.targetProfile,
            aggregation: this.aggregation,
            versioning: this.versioning,
        };
    }
}

module.exports = ElementDefinitionType;
