// This file is auto-generated by generate_classes so do not edit manually

/**
FamilyMemberHistory.Condition
    Significant health conditions for a person related to the patient relevant in
    the context of care for the patient.
*/
class FamilyMemberHistoryCondition {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description The actual condition specified. Could be a coded condition (like MI or
    Diabetes) or a less specific string like 'cancer' depending on how much is
    known about the condition and the capabilities of the creating system.
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            get: () => this.__data.code,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.code = new CodeableConcept(value);
            }
        });

        /**
         * @description Indicates what happened following the condition.  If the condition resulted in
    death, deceased date is captured on the relation.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'outcome', {
            enumerable: true,
            get: () => this.__data.outcome,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.outcome = new CodeableConcept(value);
            }
        });

        /**
         * @description This condition contributed to the cause of death of the related person. If
    contributedToDeath is not populated, then it is unknown.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'contributedToDeath', {
            enumerable: true,
            get: () => this.__data.contributedToDeath,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.contributedToDeath = value;
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'onsetAge', {
            enumerable: true,
            get: () => this.__data.onsetAge,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.onsetAge = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Range|undefined}
        */
        Object.defineProperty(this, 'onsetRange', {
            enumerable: true,
            get: () => this.__data.onsetRange,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Range = require('../complex_types/range.js');
                this.__data.onsetRange = new Range(value);
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'onsetPeriod', {
            enumerable: true,
            get: () => this.__data.onsetPeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.onsetPeriod = new Period(value);
            }
        });

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'onsetString', {
            enumerable: true,
            get: () => this.__data.onsetString,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.onsetString = value;
            }
        });

        /**
         * @description An area where general notes can be placed about this specific condition.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            enumerable: true,
            get: () => this.__data.note,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.note = Array.isArray(value) ? value.map(v => new Annotation(v)) : [new Annotation(value)];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'FamilyMemberHistoryCondition',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'FamilyMemberHistoryCondition';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            code: this.code && this.code.toJSON(),
            outcome: this.outcome && this.outcome.toJSON(),
            contributedToDeath: this.contributedToDeath,
            onsetAge: this.onsetAge && this.onsetAge.toJSON(),
            onsetRange: this.onsetRange && this.onsetRange.toJSON(),
            onsetPeriod: this.onsetPeriod && this.onsetPeriod.toJSON(),
            onsetString: this.onsetString,
            note: this.note && this.note.map(v => v.toJSON()),
        };
    }
}

module.exports = FamilyMemberHistoryCondition;
