// This file is auto-generated by generate_classes so do not edit manually

/**
ValueSet.Include
    A ValueSet resource instance specifies a set of codes drawn from one or more
    code systems, intended for use in a particular context. Value sets link
    between [[[CodeSystem]]] definitions and their use in [coded
    elements](terminologies.html).
*/
class ValueSetInclude {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description An absolute URI which is the code system from which the selected codes come
    from.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'system', {
            enumerable: true,
            get: () => this.__data.system,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.system = value;
            }
        });

        /**
         * @description The version of the code system that the codes are selected from, or the
    special version '*' for all versions.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'version', {
            enumerable: true,
            get: () => this.__data.version,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.version = value;
            }
        });

        /**
         * @description Specifies a concept to be included or excluded.
         * @property {ValueSetConcept[]|undefined}
        */
        Object.defineProperty(this, 'concept', {
            enumerable: true,
            get: () => this.__data.concept,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ValueSetConcept = require('../backbone_elements/valueSetConcept.js');
                this.__data.concept = Array.isArray(value) ? value.map(v => new ValueSetConcept(v)) : [new ValueSetConcept(value)];
            }
        });

        /**
         * @description Select concepts by specify a matching criterion based on the properties
    (including relationships) defined by the system, or on filters defined by the
    system. If multiple filters are specified, they SHALL all be true.
         * @property {ValueSetFilter[]|undefined}
        */
        Object.defineProperty(this, 'filter', {
            enumerable: true,
            get: () => this.__data.filter,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ValueSetFilter = require('../backbone_elements/valueSetFilter.js');
                this.__data.filter = Array.isArray(value) ? value.map(v => new ValueSetFilter(v)) : [new ValueSetFilter(value)];
            }
        });

        /**
         * @description Selects the concepts found in this value set (based on its value set
    definition). This is an absolute URI that is a reference to ValueSet.url.  If
    multiple value sets are specified this includes the union of the contents of
    all of the referenced value sets.
         * @property {canonical[]|undefined}
        */
        Object.defineProperty(this, 'valueSet', {
            enumerable: true,
            get: () => this.__data.valueSet,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.valueSet = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ValueSetInclude',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ValueSetInclude';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            system: this.system,
            version: this.version,
            concept: this.concept && this.concept.map(v => v.toJSON()),
            filter: this.filter && this.filter.map(v => v.toJSON()),
            valueSet: this.valueSet,
        };
    }
}

module.exports = ValueSetInclude;
