// This file is auto-generated by generate_classes so do not edit manually

/**
PlanDefinition.Goal
    This resource allows for the definition of various types of plans as a
    sharable, consumable, and executable artifact. The resource is general enough
    to support the description of a broad range of clinical artifacts such as
    clinical decision support rules, order sets and protocols.
*/
class PlanDefinitionGoal {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description Indicates a category the goal falls within.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'category', {
            enumerable: true,
            get: () => this.__data.category,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.category = new CodeableConcept(value);
            }
        });

        /**
         * @description Human-readable and/or coded description of a specific desired objective of
    care, such as "control blood pressure" or "negotiate an obstacle course" or
    "dance with child at wedding".
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.description = new CodeableConcept(value);
            }
        });

        /**
         * @description Identifies the expected level of importance associated with
    reaching/sustaining the defined goal.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'priority', {
            enumerable: true,
            get: () => this.__data.priority,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.priority = new CodeableConcept(value);
            }
        });

        /**
         * @description The event after which the goal should begin being pursued.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'start', {
            enumerable: true,
            get: () => this.__data.start,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.start = new CodeableConcept(value);
            }
        });

        /**
         * @description Identifies problems, conditions, issues, or concerns the goal is intended to
    address.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'addresses', {
            enumerable: true,
            get: () => this.__data.addresses,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.addresses = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description Didactic or other informational resources associated with the goal that
    provide further supporting information about the goal. Information resources
    can include inline text commentary and links to web resources.
         * @property {RelatedArtifact[]|undefined}
        */
        Object.defineProperty(this, 'documentation', {
            enumerable: true,
            get: () => this.__data.documentation,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let RelatedArtifact = require('../complex_types/relatedArtifact.js');
                this.__data.documentation = Array.isArray(value) ? value.map(v => new RelatedArtifact(v)) : [new RelatedArtifact(value)];
            }
        });

        /**
         * @description Indicates what should be done and within what timeframe.
         * @property {PlanDefinitionTarget[]|undefined}
        */
        Object.defineProperty(this, 'target', {
            enumerable: true,
            get: () => this.__data.target,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let PlanDefinitionTarget = require('../backbone_elements/planDefinitionTarget.js');
                this.__data.target = Array.isArray(value) ? value.map(v => new PlanDefinitionTarget(v)) : [new PlanDefinitionTarget(value)];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'PlanDefinitionGoal',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'PlanDefinitionGoal';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            category: this.category && this.category.toJSON(),
            description: this.description && this.description.toJSON(),
            priority: this.priority && this.priority.toJSON(),
            start: this.start && this.start.toJSON(),
            addresses: this.addresses && this.addresses.map(v => v.toJSON()),
            documentation: this.documentation && this.documentation.map(v => v.toJSON()),
            target: this.target && this.target.map(v => v.toJSON()),
        };
    }
}

module.exports = PlanDefinitionGoal;
