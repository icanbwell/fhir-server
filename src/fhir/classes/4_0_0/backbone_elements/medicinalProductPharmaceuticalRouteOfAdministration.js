// This file is auto-generated by generate_classes so do not edit manually

/**
MedicinalProductPharmaceutical.RouteOfAdministration
    A pharmaceutical product described in terms of its composition and dose form.
*/
class MedicinalProductPharmaceuticalRouteOfAdministration {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description Coded expression for the route.
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            get: () => this.__data.code,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.code = new CodeableConcept(value);
            }
        });

        /**
         * @description The first dose (dose quantity) administered in humans can be specified, for a
    product under investigation, using a numerical value and its unit of
    measurement.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'firstDose', {
            enumerable: true,
            get: () => this.__data.firstDose,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.firstDose = new Quantity(value);
            }
        });

        /**
         * @description The maximum single dose that can be administered as per the protocol of a
    clinical trial can be specified using a numerical value and its unit of
    measurement.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'maxSingleDose', {
            enumerable: true,
            get: () => this.__data.maxSingleDose,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.maxSingleDose = new Quantity(value);
            }
        });

        /**
         * @description The maximum dose per day (maximum dose quantity to be administered in any one
    24-h period) that can be administered as per the protocol referenced in the
    clinical trial authorisation.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'maxDosePerDay', {
            enumerable: true,
            get: () => this.__data.maxDosePerDay,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.maxDosePerDay = new Quantity(value);
            }
        });

        /**
         * @description The maximum dose per treatment period that can be administered as per the
    protocol referenced in the clinical trial authorisation.
         * @property {Ratio|undefined}
        */
        Object.defineProperty(this, 'maxDosePerTreatmentPeriod', {
            enumerable: true,
            get: () => this.__data.maxDosePerTreatmentPeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Ratio = require('../complex_types/ratio.js');
                this.__data.maxDosePerTreatmentPeriod = new Ratio(value);
            }
        });

        /**
         * @description The maximum treatment period during which an Investigational Medicinal Product
    can be administered as per the protocol referenced in the clinical trial
    authorisation.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'maxTreatmentPeriod', {
            enumerable: true,
            get: () => this.__data.maxTreatmentPeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.maxTreatmentPeriod = new Quantity(value);
            }
        });

        /**
         * @description A species for which this route applies.
         * @property {MedicinalProductPharmaceuticalTargetSpecies[]|undefined}
        */
        Object.defineProperty(this, 'targetSpecies', {
            enumerable: true,
            get: () => this.__data.targetSpecies,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let MedicinalProductPharmaceuticalTargetSpecies = require('../backbone_elements/medicinalProductPharmaceuticalTargetSpecies.js');
                this.__data.targetSpecies = Array.isArray(value) ? value.map(v => new MedicinalProductPharmaceuticalTargetSpecies(v)) : [new MedicinalProductPharmaceuticalTargetSpecies(value)];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'MedicinalProductPharmaceuticalRouteOfAdministration',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'MedicinalProductPharmaceuticalRouteOfAdministration';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            code: this.code && this.code.toJSON(),
            firstDose: this.firstDose && this.firstDose.toJSON(),
            maxSingleDose: this.maxSingleDose && this.maxSingleDose.toJSON(),
            maxDosePerDay: this.maxDosePerDay && this.maxDosePerDay.toJSON(),
            maxDosePerTreatmentPeriod: this.maxDosePerTreatmentPeriod && this.maxDosePerTreatmentPeriod.toJSON(),
            maxTreatmentPeriod: this.maxTreatmentPeriod && this.maxTreatmentPeriod.toJSON(),
            targetSpecies: this.targetSpecies && this.targetSpecies.map(v => v.toJSON()),
        };
    }
}

module.exports = MedicinalProductPharmaceuticalRouteOfAdministration;
