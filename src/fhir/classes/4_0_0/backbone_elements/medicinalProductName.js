// This file is auto-generated by generate_classes so do not edit manually

/**
MedicinalProduct.Name
    Detailed definition of a medicinal product, typically for uses other than
    direct patient care (e.g. regulatory use).
*/
class MedicinalProductName {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description The full product name.
         * @property {String}
        */
        Object.defineProperty(this, 'productName', {
            enumerable: true,
            get: () => this.__data.productName,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.productName = value;
            }
        });

        /**
         * @description Coding words or phrases of the name.
         * @property {MedicinalProductNamePart[]|undefined}
        */
        Object.defineProperty(this, 'namePart', {
            enumerable: true,
            get: () => this.__data.namePart,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let MedicinalProductNamePart = require('../backbone_elements/medicinalProductNamePart.js');
                this.__data.namePart = Array.isArray(value) ? value.map(v => new MedicinalProductNamePart(v)) : [new MedicinalProductNamePart(value)];
            }
        });

        /**
         * @description Country where the name applies.
         * @property {MedicinalProductCountryLanguage[]|undefined}
        */
        Object.defineProperty(this, 'countryLanguage', {
            enumerable: true,
            get: () => this.__data.countryLanguage,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let MedicinalProductCountryLanguage = require('../backbone_elements/medicinalProductCountryLanguage.js');
                this.__data.countryLanguage = Array.isArray(value) ? value.map(v => new MedicinalProductCountryLanguage(v)) : [new MedicinalProductCountryLanguage(value)];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'MedicinalProductName',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'MedicinalProductName';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            productName: this.productName,
            namePart: this.namePart && this.namePart.map(v => v.toJSON()),
            countryLanguage: this.countryLanguage && this.countryLanguage.map(v => v.toJSON()),
        };
    }
}

module.exports = MedicinalProductName;
