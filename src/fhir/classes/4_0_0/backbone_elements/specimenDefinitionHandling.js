/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');


/**
SpecimenDefinition.Handling
    A kind of specimen with associated set of requirements.
*/
class SpecimenDefinitionHandling extends Element {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {CodeableConcept|undefined} [temperatureQualifier],
     * @param {Range|undefined} [temperatureRange],
     * @param {Quantity|undefined} [maxDuration],
     * @param {String|undefined} [instruction],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            temperatureQualifier,
            temperatureRange,
            maxDuration,
            instruction,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description It qualifies the interval of temperature, which characterizes an occurrence of
    handling. Conditions that are not related to temperature may be handled in the
    instruction element.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'temperatureQualifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.temperatureQualifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.temperatureQualifier = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description The temperature interval for this set of handling instructions.
         * @property {Range|undefined}
        */
        Object.defineProperty(this, 'temperatureRange', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.temperatureRange,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Range = require('../complex_types/range.js');
                this.__data.temperatureRange = new Range(valueProvided);
            }
        });

        /**
         * @description The maximum time interval of preservation of the specimen with these
    conditions.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'maxDuration', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.maxDuration,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.maxDuration = new Quantity(valueProvided);
            }
        });

        /**
         * @description Additional textual instructions for the preservation or transport of the
    specimen. For instance, 'Protect from light exposure'.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'instruction', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.instruction,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.instruction = valueProvided;
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            temperatureQualifier,
            temperatureRange,
            maxDuration,
            instruction,
        });

    }

    static get resourceType() {
        return 'SpecimenDefinitionHandling';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            temperatureQualifier: this.temperatureQualifier && this.temperatureQualifier.toJSON(),
            temperatureRange: this.temperatureRange && this.temperatureRange.toJSON(),
            maxDuration: this.maxDuration && this.maxDuration.toJSON(),
            instruction: this.instruction,
        };
    }
}

module.exports = SpecimenDefinitionHandling;
