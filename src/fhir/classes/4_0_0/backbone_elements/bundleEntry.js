// This file is auto-generated by generate_classes so do not edit manually

/**
Bundle.Entry
    A container for a collection of resources.
*/
class BundleEntry {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description A series of links that provide context to this entry.
         * @property {BundleLink[]|undefined}
        */
        Object.defineProperty(this, 'link', {
            enumerable: true,
            get: () => this.__data.link,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let BundleLink = require('../backbone_elements/bundleLink.js');
                this.__data.link = Array.isArray(value) ? value.map(v => new BundleLink(v)) : [new BundleLink(value)];
            }
        });

        /**
         * @description The Absolute URL for the resource.  The fullUrl SHALL NOT disagree with the id
    in the resource - i.e. if the fullUrl is not a urn:uuid, the URL shall be
    version-independent URL consistent with the Resource.id. The fullUrl is a
    version independent reference to the resource. The fullUrl element SHALL have
    a value except that:
    * fullUrl can be empty on a POST (although it does not need to when specifying
    a temporary id for reference in the bundle)
    * Results from operations might involve resources that are not identified.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'fullUrl', {
            enumerable: true,
            get: () => this.__data.fullUrl,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.fullUrl = value;
            }
        });

        /**
         * @description The Resource for the entry. The purpose/meaning of the resource is determined
    by the Bundle.type.
         * @property {ResourceContainer|undefined}
        */
        Object.defineProperty(this, 'resource', {
            enumerable: true,
            get: () => this.__data.resource,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.resource = value;
            }
        });

        /**
         * @description Information about the search process that lead to the creation of this entry.
         * @property {BundleSearch|undefined}
        */
        Object.defineProperty(this, 'search', {
            enumerable: true,
            get: () => this.__data.search,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let BundleSearch = require('../backbone_elements/bundleSearch.js');
                this.__data.search = new BundleSearch(value);
            }
        });

        /**
         * @description Additional information about how this entry should be processed as part of a
    transaction or batch.  For history, it shows how the entry was processed to
    create the version contained in the entry.
         * @property {BundleRequest|undefined}
        */
        Object.defineProperty(this, 'request', {
            enumerable: true,
            get: () => this.__data.request,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let BundleRequest = require('../backbone_elements/bundleRequest.js');
                this.__data.request = new BundleRequest(value);
            }
        });

        /**
         * @description Indicates the results of processing the corresponding 'request' entry in the
    batch or transaction being responded to or what the results of an operation
    where when returning history.
         * @property {BundleResponse|undefined}
        */
        Object.defineProperty(this, 'response', {
            enumerable: true,
            get: () => this.__data.response,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let BundleResponse = require('../backbone_elements/bundleResponse.js');
                this.__data.response = new BundleResponse(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'BundleEntry',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'BundleEntry';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            link: this.link && this.link.map(v => v.toJSON()),
            fullUrl: this.fullUrl,
            resource: this.resource,
            search: this.search && this.search.toJSON(),
            request: this.request && this.request.toJSON(),
            response: this.response && this.response.toJSON(),
        };
    }
}

module.exports = BundleEntry;
