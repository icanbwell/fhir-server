/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');
const Resource = require('../resources/resource');
const async = require('async');


/**
Bundle.Entry
    A container for a collection of resources.
*/
class BundleEntry extends Element {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {BundleLink[]|undefined} [link],
     * @param {uri|undefined} [fullUrl],
     * @param {ResourceContainer|undefined} [resource],
     * @param {BundleSearch|undefined} [search],
     * @param {BundleRequest|undefined} [request],
     * @param {BundleResponse|undefined} [response],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            link,
            fullUrl,
            resource,
            search,
            request,
            response,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.extension = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Extension ?
                                v : new Extension(v)
                            );
                } else {
                    if (valueProvided instanceof Extension) {
                        this.__data.extension = valueProvided;
                    } else {
                        this.__data.extension = [new Extension(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.modifierExtension = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Extension ?
                                v : new Extension(v)
                            );
                } else {
                    if (valueProvided instanceof Extension) {
                        this.__data.modifierExtension = valueProvided;
                    } else {
                        this.__data.modifierExtension = [new Extension(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description A series of links that provide context to this entry.
         * @property {BundleLink[]|undefined}
        */
        Object.defineProperty(this, 'link', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.link,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.link = undefined;
                    return;
                }
                const BundleLink = require('../backbone_elements/bundleLink.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.link = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof BundleLink ?
                                v : new BundleLink(v)
                            );
                } else {
                    if (valueProvided instanceof BundleLink) {
                        this.__data.link = valueProvided;
                    } else {
                        this.__data.link = [new BundleLink(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description The Absolute URL for the resource.  The fullUrl SHALL NOT disagree with the id
    in the resource - i.e. if the fullUrl is not a urn:uuid, the URL shall be
    version-independent URL consistent with the Resource.id. The fullUrl is a
    version independent reference to the resource. The fullUrl element SHALL have
    a value except that:
    * fullUrl can be empty on a POST (although it does not need to when specifying
    a temporary id for reference in the bundle)
    * Results from operations might involve resources that are not identified.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'fullUrl', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.fullUrl,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.fullUrl = undefined;
                    return;
                }
                this.__data.fullUrl = valueProvided;
            }
        });

        /**
         * @description The Resource for the entry. The purpose/meaning of the resource is determined
    by the Bundle.type.
         * @property {ResourceContainer|undefined}
        */
        Object.defineProperty(this, 'resource', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.resource,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.resource = undefined;
                    return;
                }
                const ResourceContainer = require('../simple_types/resourceContainer.js');
                const {getResource} = require('../../../../operations/common/getResource');
                if (valueProvided instanceof Resource) {
                    this.__data.resource = valueProvided;
                } else {
                    const ResourceCreator = getResource('4_0_0', valueProvided.resourceType);
                    this.__data.resource = new ResourceCreator(valueProvided);
                }
            }
        });

        /**
         * @description Information about the search process that lead to the creation of this entry.
         * @property {BundleSearch|undefined}
        */
        Object.defineProperty(this, 'search', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.search,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.search = undefined;
                    return;
                }
                const BundleSearch = require('../backbone_elements/bundleSearch.js');
                if (valueProvided instanceof BundleSearch){
                    this.__data.search = valueProvided;
                } else {
                    this.__data.search = new BundleSearch(valueProvided);
                }
            }
        });

        /**
         * @description Additional information about how this entry should be processed as part of a
    transaction or batch.  For history, it shows how the entry was processed to
    create the version contained in the entry.
         * @property {BundleRequest|undefined}
        */
        Object.defineProperty(this, 'request', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.request,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.request = undefined;
                    return;
                }
                const BundleRequest = require('../backbone_elements/bundleRequest.js');
                if (valueProvided instanceof BundleRequest){
                    this.__data.request = valueProvided;
                } else {
                    this.__data.request = new BundleRequest(valueProvided);
                }
            }
        });

        /**
         * @description Indicates the results of processing the corresponding 'request' entry in the
    batch or transaction being responded to or what the results of an operation
    where when returning history.
         * @property {BundleResponse|undefined}
        */
        Object.defineProperty(this, 'response', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.response,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.response = undefined;
                    return;
                }
                const BundleResponse = require('../backbone_elements/bundleResponse.js');
                if (valueProvided instanceof BundleResponse){
                    this.__data.response = valueProvided;
                } else {
                    this.__data.response = new BundleResponse(valueProvided);
                }
            }
        });




        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            link,
            fullUrl,
            resource,
            search,
            request,
            response,
        });

    }



    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            link: this.link && this.link.map(v => v.toJSON()),
            fullUrl: this.fullUrl,
            resource: this.resource && this.resource.toJSON(),
            search: this.search && this.search.toJSON(),
            request: this.request && this.request.toJSON(),
            response: this.response && this.response.toJSON(),
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync({fnUpdateReferenceAsync}) {
            if (this.extension) {await async.each(this.extension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.modifierExtension) {await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.link) {await async.each(this.link, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.resource) {await this.resource.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.search) {await this.search.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.request) {await this.request.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.response) {await this.response.updateReferencesAsync({fnUpdateReferenceAsync});}
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal() {
        const {removeNull} = require('../../../../utils/nullRemover');
        const json = {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            link: this.link && this.link.map(v => v.toJSONInternal()),
            fullUrl: this.fullUrl,
            resource: this.resource && this.resource.toJSONInternal(),
            search: this.search && this.search.toJSONInternal(),
            request: this.request && this.request.toJSONInternal(),
            response: this.response && this.response.toJSONInternal(),
        };



        return removeNull(json);
    }
}

module.exports = BundleEntry;
