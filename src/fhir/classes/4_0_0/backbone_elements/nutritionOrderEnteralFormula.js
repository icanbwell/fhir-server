/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');


/**
NutritionOrder.EnteralFormula
    A request to supply a diet, formula feeding (enteral) or oral nutritional
    supplement to a patient/resident.
*/
class NutritionOrderEnteralFormula extends Element {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {CodeableConcept|undefined} [baseFormulaType],
     * @param {String|undefined} [baseFormulaProductName],
     * @param {CodeableConcept|undefined} [additiveType],
     * @param {String|undefined} [additiveProductName],
     * @param {Quantity|undefined} [caloricDensity],
     * @param {CodeableConcept|undefined} [routeofAdministration],
     * @param {NutritionOrderAdministration[]|undefined} [administration],
     * @param {Quantity|undefined} [maxVolumeToDeliver],
     * @param {String|undefined} [administrationInstruction],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            baseFormulaType,
            baseFormulaProductName,
            additiveType,
            additiveProductName,
            caloricDensity,
            routeofAdministration,
            administration,
            maxVolumeToDeliver,
            administrationInstruction,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description The type of enteral or infant formula such as an adult standard formula with
    fiber or a soy-based infant formula.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'baseFormulaType', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.baseFormulaType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.baseFormulaType = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description The product or brand name of the enteral or infant formula product such as
    "ACME Adult Standard Formula".
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'baseFormulaProductName', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.baseFormulaProductName,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.baseFormulaProductName = valueProvided;
            }
        });

        /**
         * @description Indicates the type of modular component such as protein, carbohydrate, fat or
    fiber to be provided in addition to or mixed with the base formula.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'additiveType', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.additiveType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.additiveType = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description The product or brand name of the type of modular component to be added to the
    formula.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'additiveProductName', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.additiveProductName,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.additiveProductName = valueProvided;
            }
        });

        /**
         * @description The amount of energy (calories) that the formula should provide per specified
    volume, typically per mL or fluid oz.  For example, an infant may require a
    formula that provides 24 calories per fluid ounce or an adult may require an
    enteral formula that provides 1.5 calorie/mL.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'caloricDensity', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.caloricDensity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.caloricDensity = new Quantity(valueProvided);
            }
        });

        /**
         * @description The route or physiological path of administration into the patient's
    gastrointestinal  tract for purposes of providing the formula feeding, e.g.
    nasogastric tube.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'routeofAdministration', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.routeofAdministration,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.routeofAdministration = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description Formula administration instructions as structured data.  This repeating
    structure allows for changing the administration rate or volume over time for
    both bolus and continuous feeding.  An example of this would be an instruction
    to increase the rate of continuous feeding every 2 hours.
         * @property {NutritionOrderAdministration[]|undefined}
        */
        Object.defineProperty(this, 'administration', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.administration,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let NutritionOrderAdministration = require('../backbone_elements/nutritionOrderAdministration.js');
                this.__data.administration = Array.isArray(valueProvided) ? valueProvided.map(v => new NutritionOrderAdministration(v)) : [new NutritionOrderAdministration(valueProvided)];
            }
        });

        /**
         * @description The maximum total quantity of formula that may be administered to a subject
    over the period of time, e.g. 1440 mL over 24 hours.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'maxVolumeToDeliver', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.maxVolumeToDeliver,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.maxVolumeToDeliver = new Quantity(valueProvided);
            }
        });

        /**
         * @description Free text formula administration, feeding instructions or additional
    instructions or information.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'administrationInstruction', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.administrationInstruction,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.administrationInstruction = valueProvided;
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            baseFormulaType,
            baseFormulaProductName,
            additiveType,
            additiveProductName,
            caloricDensity,
            routeofAdministration,
            administration,
            maxVolumeToDeliver,
            administrationInstruction,
        });

    }



    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            baseFormulaType: this.baseFormulaType && this.baseFormulaType.toJSON(),
            baseFormulaProductName: this.baseFormulaProductName,
            additiveType: this.additiveType && this.additiveType.toJSON(),
            additiveProductName: this.additiveProductName,
            caloricDensity: this.caloricDensity && this.caloricDensity.toJSON(),
            routeofAdministration: this.routeofAdministration && this.routeofAdministration.toJSON(),
            administration: this.administration && this.administration.map(v => v.toJSON()),
            maxVolumeToDeliver: this.maxVolumeToDeliver && this.maxVolumeToDeliver.toJSON(),
            administrationInstruction: this.administrationInstruction,
        });
    }
}

module.exports = NutritionOrderEnteralFormula;
