/* eslint-disable no-unused-vars */
/* eslint-disable no-trailing-spaces */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');
const Resource = require('../resources/resource');
const async = require('async');


/**
ProdCharacteristic
    The marketing status describes the date when a medicinal product is actually
    put on the market or the date as of which it is no longer available.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class ProdCharacteristic extends Element {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Quantity|undefined} [height],
     * @param {Quantity|undefined} [width],
     * @param {Quantity|undefined} [depth],
     * @param {Quantity|undefined} [weight],
     * @param {Quantity|undefined} [nominalVolume],
     * @param {Quantity|undefined} [externalDiameter],
     * @param {String|undefined} [shape],
     * @param {String[]|undefined} [color],
     * @param {String[]|undefined} [imprint],
     * @param {Attachment[]|undefined} [image],
     * @param {CodeableConcept|undefined} [scoring],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            height,
            width,
            depth,
            weight,
            nominalVolume,
            externalDiameter,
            shape,
            color,
            imprint,
            image,
            scoring
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.extension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.
    
    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.modifierExtension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description Where applicable, the height can be specified using a numerical value and its
    unit of measurement The unit of measurement shall be specified in accordance
    with ISO 11240 and the resulting terminology The symbol and the symbol
    identifier shall be used.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'height', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.height,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.height = undefined;
                    return;
                }
                const Quantity = require('../complex_types/quantity.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.height = FhirResourceCreator.create(valueProvided, Quantity);
            }
        });

        /**
         * @description Where applicable, the width can be specified using a numerical value and its
    unit of measurement The unit of measurement shall be specified in accordance
    with ISO 11240 and the resulting terminology The symbol and the symbol
    identifier shall be used.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'width', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.width,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.width = undefined;
                    return;
                }
                const Quantity = require('../complex_types/quantity.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.width = FhirResourceCreator.create(valueProvided, Quantity);
            }
        });

        /**
         * @description Where applicable, the depth can be specified using a numerical value and its
    unit of measurement The unit of measurement shall be specified in accordance
    with ISO 11240 and the resulting terminology The symbol and the symbol
    identifier shall be used.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'depth', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.depth,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.depth = undefined;
                    return;
                }
                const Quantity = require('../complex_types/quantity.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.depth = FhirResourceCreator.create(valueProvided, Quantity);
            }
        });

        /**
         * @description Where applicable, the weight can be specified using a numerical value and its
    unit of measurement The unit of measurement shall be specified in accordance
    with ISO 11240 and the resulting terminology The symbol and the symbol
    identifier shall be used.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'weight', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.weight,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.weight = undefined;
                    return;
                }
                const Quantity = require('../complex_types/quantity.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.weight = FhirResourceCreator.create(valueProvided, Quantity);
            }
        });

        /**
         * @description Where applicable, the nominal volume can be specified using a numerical value
    and its unit of measurement The unit of measurement shall be specified in
    accordance with ISO 11240 and the resulting terminology The symbol and the
    symbol identifier shall be used.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'nominalVolume', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.nominalVolume,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.nominalVolume = undefined;
                    return;
                }
                const Quantity = require('../complex_types/quantity.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.nominalVolume = FhirResourceCreator.create(valueProvided, Quantity);
            }
        });

        /**
         * @description Where applicable, the external diameter can be specified using a numerical
    value and its unit of measurement The unit of measurement shall be specified
    in accordance with ISO 11240 and the resulting terminology The symbol and the
    symbol identifier shall be used.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'externalDiameter', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.externalDiameter,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.externalDiameter = undefined;
                    return;
                }
                const Quantity = require('../complex_types/quantity.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.externalDiameter = FhirResourceCreator.create(valueProvided, Quantity);
            }
        });

        /**
         * @description Where applicable, the shape can be specified An appropriate controlled
    vocabulary shall be used The term and the term identifier shall be used.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'shape', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.shape,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.shape = undefined;
                    return;
                }
                this.__data.shape = valueProvided;
            }
        });

        /**
         * @description Where applicable, the color can be specified An appropriate controlled
    vocabulary shall be used The term and the term identifier shall be used.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'color', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.color,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.color = undefined;
                    return;
                }
                this.__data.color = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => v) : [valueProvided];
            }
        });

        /**
         * @description Where applicable, the imprint can be specified as text.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'imprint', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.imprint,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.imprint = undefined;
                    return;
                }
                this.__data.imprint = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => v) : [valueProvided];
            }
        });

        /**
         * @description Where applicable, the image can be provided The format of the image attachment
    shall be specified by regional implementations.
         * @property {Attachment[]|undefined}
        */
        Object.defineProperty(this, 'image', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.image,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.image = undefined;
                    return;
                }
                const Attachment = require('../complex_types/attachment.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.image = FhirResourceCreator.createArray(valueProvided, Attachment);
            }
        });

        /**
         * @description Where applicable, the scoring can be specified An appropriate controlled
    vocabulary shall be used The term and the term identifier shall be used.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'scoring', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.scoring,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.scoring = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.scoring = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });




        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            height,
            width,
            depth,
            weight,
            nominalVolume,
            externalDiameter,
            shape,
            color,
            imprint,
            image,
            scoring
        });

    }



    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            height: this.height && this.height.toJSON(),
            width: this.width && this.width.toJSON(),
            depth: this.depth && this.depth.toJSON(),
            weight: this.weight && this.weight.toJSON(),
            nominalVolume: this.nominalVolume && this.nominalVolume.toJSON(),
            externalDiameter: this.externalDiameter && this.externalDiameter.toJSON(),
            shape: this.shape,
            color: this.color,
            imprint: this.imprint,
            image: this.image && this.image.map(v => v.toJSON()),
            scoring: this.scoring && this.scoring.toJSON()
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync({fnUpdateReferenceAsync}) {
            if (this.extension) {await async.each(this.extension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.modifierExtension) {await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.height) {await this.height.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.width) {await this.width.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.depth) {await this.depth.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.weight) {await this.weight.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.nominalVolume) {await this.nominalVolume.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.externalDiameter) {await this.externalDiameter.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.image) {await async.each(this.image, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.scoring) {await this.scoring.updateReferencesAsync({fnUpdateReferenceAsync});}
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal() {
        const {removeNull} = require('../../../../utils/nullRemover');
        const json = {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            height: this.height && this.height.toJSONInternal(),
            width: this.width && this.width.toJSONInternal(),
            depth: this.depth && this.depth.toJSONInternal(),
            weight: this.weight && this.weight.toJSONInternal(),
            nominalVolume: this.nominalVolume && this.nominalVolume.toJSONInternal(),
            externalDiameter: this.externalDiameter && this.externalDiameter.toJSONInternal(),
            shape: this.shape,
            color: this.color,
            imprint: this.imprint,
            image: this.image && this.image.map(v => v.toJSONInternal()),
            scoring: this.scoring && this.scoring.toJSONInternal()
        };



        return removeNull(json);
    }
}

module.exports = ProdCharacteristic;
