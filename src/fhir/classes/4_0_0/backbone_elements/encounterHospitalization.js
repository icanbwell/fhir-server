/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');
const Resource = require('../resources/resource');
const async = require('async');


/**
Encounter.Hospitalization
    An interaction between a patient and healthcare provider(s) for the purpose of
    providing healthcare service(s) or assessing the health status of a patient.
*/
class EncounterHospitalization extends Element {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier|undefined} [preAdmissionIdentifier],
     * @param {Reference|undefined} [origin],
     * @param {CodeableConcept|undefined} [admitSource],
     * @param {CodeableConcept|undefined} [reAdmission],
     * @param {CodeableConcept[]|undefined} [dietPreference],
     * @param {CodeableConcept[]|undefined} [specialCourtesy],
     * @param {CodeableConcept[]|undefined} [specialArrangement],
     * @param {Reference|undefined} [destination],
     * @param {CodeableConcept|undefined} [dischargeDisposition],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            preAdmissionIdentifier,
            origin,
            admitSource,
            reAdmission,
            dietPreference,
            specialCourtesy,
            specialArrangement,
            destination,
            dischargeDisposition,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.extension = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Extension ?
                                v : new Extension(v)
                            );
                } else {
                    if (valueProvided instanceof Extension) {
                        this.__data.extension = valueProvided;
                    } else {
                        this.__data.extension = [new Extension(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.modifierExtension = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Extension ?
                                v : new Extension(v)
                            );
                } else {
                    if (valueProvided instanceof Extension) {
                        this.__data.modifierExtension = valueProvided;
                    } else {
                        this.__data.modifierExtension = [new Extension(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Pre-admission identifier.
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'preAdmissionIdentifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.preAdmissionIdentifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.preAdmissionIdentifier = undefined;
                    return;
                }
                const Identifier = require('../complex_types/identifier.js');
                if (valueProvided instanceof Identifier){
                    this.__data.preAdmissionIdentifier = valueProvided;
                } else {
                    this.__data.preAdmissionIdentifier = new Identifier(valueProvided);
                }
            }
        });

        /**
         * @description The location/organization from which the patient came before admission.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'origin', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.origin,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.origin = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (valueProvided instanceof Reference){
                    this.__data.origin = valueProvided;
                } else {
                    this.__data.origin = new Reference(valueProvided);
                }
            }
        });

        /**
         * @description From where patient was admitted (physician referral, transfer).
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'admitSource', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.admitSource,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.admitSource = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (valueProvided instanceof CodeableConcept){
                    this.__data.admitSource = valueProvided;
                } else {
                    this.__data.admitSource = new CodeableConcept(valueProvided);
                }
            }
        });

        /**
         * @description Whether this hospitalization is a readmission and why if known.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'reAdmission', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.reAdmission,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.reAdmission = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (valueProvided instanceof CodeableConcept){
                    this.__data.reAdmission = valueProvided;
                } else {
                    this.__data.reAdmission = new CodeableConcept(valueProvided);
                }
            }
        });

        /**
         * @description Diet preferences reported by the patient.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'dietPreference', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.dietPreference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.dietPreference = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.dietPreference = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof CodeableConcept ?
                                v : new CodeableConcept(v)
                            );
                } else {
                    if (valueProvided instanceof CodeableConcept) {
                        this.__data.dietPreference = valueProvided;
                    } else {
                        this.__data.dietPreference = [new CodeableConcept(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Special courtesies (VIP, board member).
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'specialCourtesy', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.specialCourtesy,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.specialCourtesy = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.specialCourtesy = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof CodeableConcept ?
                                v : new CodeableConcept(v)
                            );
                } else {
                    if (valueProvided instanceof CodeableConcept) {
                        this.__data.specialCourtesy = valueProvided;
                    } else {
                        this.__data.specialCourtesy = [new CodeableConcept(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Any special requests that have been made for this hospitalization encounter,
    such as the provision of specific equipment or other things.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'specialArrangement', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.specialArrangement,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.specialArrangement = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.specialArrangement = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof CodeableConcept ?
                                v : new CodeableConcept(v)
                            );
                } else {
                    if (valueProvided instanceof CodeableConcept) {
                        this.__data.specialArrangement = valueProvided;
                    } else {
                        this.__data.specialArrangement = [new CodeableConcept(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Location/organization to which the patient is discharged.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'destination', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.destination,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.destination = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (valueProvided instanceof Reference){
                    this.__data.destination = valueProvided;
                } else {
                    this.__data.destination = new Reference(valueProvided);
                }
            }
        });

        /**
         * @description Category or kind of location after discharge.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'dischargeDisposition', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.dischargeDisposition,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.dischargeDisposition = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (valueProvided instanceof CodeableConcept){
                    this.__data.dischargeDisposition = valueProvided;
                } else {
                    this.__data.dischargeDisposition = new CodeableConcept(valueProvided);
                }
            }
        });




        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            preAdmissionIdentifier,
            origin,
            admitSource,
            reAdmission,
            dietPreference,
            specialCourtesy,
            specialArrangement,
            destination,
            dischargeDisposition,
        });

    }



    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            preAdmissionIdentifier: this.preAdmissionIdentifier && this.preAdmissionIdentifier.toJSON(),
            origin: this.origin && this.origin.toJSON(),
            admitSource: this.admitSource && this.admitSource.toJSON(),
            reAdmission: this.reAdmission && this.reAdmission.toJSON(),
            dietPreference: this.dietPreference && this.dietPreference.map(v => v.toJSON()),
            specialCourtesy: this.specialCourtesy && this.specialCourtesy.map(v => v.toJSON()),
            specialArrangement: this.specialArrangement && this.specialArrangement.map(v => v.toJSON()),
            destination: this.destination && this.destination.toJSON(),
            dischargeDisposition: this.dischargeDisposition && this.dischargeDisposition.toJSON(),
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync({fnUpdateReferenceAsync}) {
            if (this.extension) {await async.each(this.extension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.modifierExtension) {await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.preAdmissionIdentifier) {await this.preAdmissionIdentifier.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.origin) {await this.origin.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.admitSource) {await this.admitSource.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.reAdmission) {await this.reAdmission.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.dietPreference) {await async.each(this.dietPreference, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.specialCourtesy) {await async.each(this.specialCourtesy, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.specialArrangement) {await async.each(this.specialArrangement, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.destination) {await this.destination.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.dischargeDisposition) {await this.dischargeDisposition.updateReferencesAsync({fnUpdateReferenceAsync});}
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal() {
        const {removeNull} = require('../../../../utils/nullRemover');
        const json = {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            preAdmissionIdentifier: this.preAdmissionIdentifier && this.preAdmissionIdentifier.toJSONInternal(),
            origin: this.origin && this.origin.toJSONInternal(),
            admitSource: this.admitSource && this.admitSource.toJSONInternal(),
            reAdmission: this.reAdmission && this.reAdmission.toJSONInternal(),
            dietPreference: this.dietPreference && this.dietPreference.map(v => v.toJSONInternal()),
            specialCourtesy: this.specialCourtesy && this.specialCourtesy.map(v => v.toJSONInternal()),
            specialArrangement: this.specialArrangement && this.specialArrangement.map(v => v.toJSONInternal()),
            destination: this.destination && this.destination.toJSONInternal(),
            dischargeDisposition: this.dischargeDisposition && this.dischargeDisposition.toJSONInternal(),
        };



        return removeNull(json);
    }
}

module.exports = EncounterHospitalization;
