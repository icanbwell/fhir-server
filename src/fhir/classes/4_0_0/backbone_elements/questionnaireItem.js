/* eslint-disable no-unused-vars */
/* eslint-disable no-trailing-spaces */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');
const Resource = require('../resources/resource');
const async = require('async');


/**
Questionnaire.Item
    A structured set of questions intended to guide the collection of answers from
    end-users. Questionnaires provide detailed control over order, presentation,
    phraseology and grouping to allow coherent, consistent data collection.
*/
class QuestionnaireItem extends Element {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {String} linkId,
     * @param {uri|undefined} [definition],
     * @param {Coding[]|undefined} [code],
     * @param {String|undefined} [prefix],
     * @param {String|undefined} [text],
     * @param {code} type,
     * @param {QuestionnaireEnableWhen[]|undefined} [enableWhen],
     * @param {code|undefined} [enableBehavior],
     * @param {Boolean|undefined} [required],
     * @param {Boolean|undefined} [repeats],
     * @param {Boolean|undefined} [readOnly],
     * @param {Int|undefined} [maxLength],
     * @param {canonical|undefined} [answerValueSet],
     * @param {QuestionnaireAnswerOption[]|undefined} [answerOption],
     * @param {QuestionnaireInitial[]|undefined} [initial],
     * @param {QuestionnaireItem[]|undefined} [item],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            linkId,
            definition,
            code,
            prefix,
            text,
            type,
            enableWhen,
            enableBehavior,
            required,
            repeats,
            readOnly,
            maxLength,
            answerValueSet,
            answerOption,
            initial,
            item,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.extension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.
    
    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.modifierExtension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description An identifier that is unique within the Questionnaire allowing linkage to the
    equivalent item in a QuestionnaireResponse resource.
         * @property {String}
        */
        Object.defineProperty(this, 'linkId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.linkId,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.linkId = undefined;
                    return;
                }
                this.__data.linkId = valueProvided;
            }
        });

        /**
         * @description This element is a URI that refers to an
    [ElementDefinition](elementdefinition.html) that provides information about
    this item, including information that might otherwise be included in the
    instance of the Questionnaire resource. A detailed description of the
    construction of the URI is shown in Comments, below. If this element is
    present then the following element values MAY be derived from the Element
    Definition if the corresponding elements of this Questionnaire resource
    instance have no value:
    
    * code (ElementDefinition.code)
    * type (ElementDefinition.type)
    * required (ElementDefinition.min)
    * repeats (ElementDefinition.max)
    * maxLength (ElementDefinition.maxLength)
    * answerValueSet (ElementDefinition.binding)
    * options (ElementDefinition.binding).
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'definition', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.definition,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.definition = undefined;
                    return;
                }
                this.__data.definition = valueProvided;
            }
        });

        /**
         * @description A terminology code that corresponds to this group or question (e.g. a code
    from LOINC, which defines many questions and answers).
         * @property {Coding[]|undefined}
        */
        Object.defineProperty(this, 'code', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.code,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.code = undefined;
                    return;
                }
                const Coding = require('../complex_types/coding.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.code = FhirResourceCreator.createArray(valueProvided, Coding);
            }
        });

        /**
         * @description A short label for a particular group, question or set of display text within
    the questionnaire used for reference by the individual completing the
    questionnaire.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'prefix', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.prefix,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.prefix = undefined;
                    return;
                }
                this.__data.prefix = valueProvided;
            }
        });

        /**
         * @description The name of a section, the text of a question or text content for a display
    item.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.text = undefined;
                    return;
                }
                this.__data.text = valueProvided;
            }
        });

        /**
         * @description The type of questionnaire item this is - whether text for display, a grouping
    of other items or a particular type of data to be captured (string, integer,
    coded choice, etc.).
         * @property {code}
        */
        Object.defineProperty(this, 'type', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.type = undefined;
                    return;
                }
                this.__data.type = valueProvided;
            }
        });

        /**
         * @description A constraint indicating that this item should only be enabled (displayed/allow
    answers to be captured) when the specified condition is true.
         * @property {QuestionnaireEnableWhen[]|undefined}
        */
        Object.defineProperty(this, 'enableWhen', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.enableWhen,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.enableWhen = undefined;
                    return;
                }
                const QuestionnaireEnableWhen = require('../backbone_elements/questionnaireEnableWhen.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.enableWhen = FhirResourceCreator.createArray(valueProvided, QuestionnaireEnableWhen);
            }
        });

        /**
         * @description Controls how multiple enableWhen values are interpreted -  whether all or any
    must be true.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'enableBehavior', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.enableBehavior,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.enableBehavior = undefined;
                    return;
                }
                this.__data.enableBehavior = valueProvided;
            }
        });

        /**
         * @description An indication, if true, that the item must be present in a "completed"
    QuestionnaireResponse.  If false, the item may be skipped when answering the
    questionnaire.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'required', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.required,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.required = undefined;
                    return;
                }
                this.__data.required = valueProvided;
            }
        });

        /**
         * @description An indication, if true, that the item may occur multiple times in the
    response, collecting multiple answers for questions or multiple sets of
    answers for groups.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'repeats', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.repeats,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.repeats = undefined;
                    return;
                }
                this.__data.repeats = valueProvided;
            }
        });

        /**
         * @description An indication, when true, that the value cannot be changed by a human
    respondent to the Questionnaire.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'readOnly', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.readOnly,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.readOnly = undefined;
                    return;
                }
                this.__data.readOnly = valueProvided;
            }
        });

        /**
         * @description The maximum number of characters that are permitted in the answer to be
    considered a "valid" QuestionnaireResponse.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'maxLength', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.maxLength,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.maxLength = undefined;
                    return;
                }
                this.__data.maxLength = valueProvided;
            }
        });

        /**
         * @description A reference to a value set containing a list of codes representing permitted
    answers for a "choice" or "open-choice" question.
         * @property {canonical|undefined}
        */
        Object.defineProperty(this, 'answerValueSet', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.answerValueSet,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.answerValueSet = undefined;
                    return;
                }
                this.__data.answerValueSet = valueProvided;
            }
        });

        /**
         * @description One of the permitted answers for a "choice" or "open-choice" question.
         * @property {QuestionnaireAnswerOption[]|undefined}
        */
        Object.defineProperty(this, 'answerOption', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.answerOption,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.answerOption = undefined;
                    return;
                }
                const QuestionnaireAnswerOption = require('../backbone_elements/questionnaireAnswerOption.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.answerOption = FhirResourceCreator.createArray(valueProvided, QuestionnaireAnswerOption);
            }
        });

        /**
         * @description One or more values that should be pre-populated in the answer when initially
    rendering the questionnaire for user input.
         * @property {QuestionnaireInitial[]|undefined}
        */
        Object.defineProperty(this, 'initial', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.initial,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.initial = undefined;
                    return;
                }
                const QuestionnaireInitial = require('../backbone_elements/questionnaireInitial.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.initial = FhirResourceCreator.createArray(valueProvided, QuestionnaireInitial);
            }
        });

        /**
         * @description Text, questions and other groups to be nested beneath a question or group.
         * @property {QuestionnaireItem[]|undefined}
        */
        Object.defineProperty(this, 'item', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.item,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.item = undefined;
                    return;
                }
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.item = FhirResourceCreator.createArray(valueProvided, QuestionnaireItem);
            }
        });




        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            linkId,
            definition,
            code,
            prefix,
            text,
            type,
            enableWhen,
            enableBehavior,
            required,
            repeats,
            readOnly,
            maxLength,
            answerValueSet,
            answerOption,
            initial,
            item,
        });

    }



    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            linkId: this.linkId,
            definition: this.definition,
            code: this.code && this.code.map(v => v.toJSON()),
            prefix: this.prefix,
            text: this.text,
            type: this.type,
            enableWhen: this.enableWhen && this.enableWhen.map(v => v.toJSON()),
            enableBehavior: this.enableBehavior,
            required: this.required,
            repeats: this.repeats,
            readOnly: this.readOnly,
            maxLength: this.maxLength,
            answerValueSet: this.answerValueSet,
            answerOption: this.answerOption && this.answerOption.map(v => v.toJSON()),
            initial: this.initial && this.initial.map(v => v.toJSON()),
            item: this.item && this.item.map(v => v.toJSON()),
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync({fnUpdateReferenceAsync}) {
            if (this.extension) {await async.each(this.extension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.modifierExtension) {await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.code) {await async.each(this.code, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.enableWhen) {await async.each(this.enableWhen, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.answerOption) {await async.each(this.answerOption, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.initial) {await async.each(this.initial, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.item) {await async.each(this.item, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal() {
        const {removeNull} = require('../../../../utils/nullRemover');
        const json = {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            linkId: this.linkId,
            definition: this.definition,
            code: this.code && this.code.map(v => v.toJSONInternal()),
            prefix: this.prefix,
            text: this.text,
            type: this.type,
            enableWhen: this.enableWhen && this.enableWhen.map(v => v.toJSONInternal()),
            enableBehavior: this.enableBehavior,
            required: this.required,
            repeats: this.repeats,
            readOnly: this.readOnly,
            maxLength: this.maxLength,
            answerValueSet: this.answerValueSet,
            answerOption: this.answerOption && this.answerOption.map(v => v.toJSONInternal()),
            initial: this.initial && this.initial.map(v => v.toJSONInternal()),
            item: this.item && this.item.map(v => v.toJSONInternal()),
        };



        return removeNull(json);
    }
}

module.exports = QuestionnaireItem;
