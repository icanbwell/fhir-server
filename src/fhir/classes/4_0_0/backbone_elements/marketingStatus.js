

// This file is auto-generated by generate_classes so do not edit manually

const { removeNull } = require('../../../../utils/nullRemover');

const Element = require('../complex_types/element');
const Resource = require('../resources/resource');
const async = require('async');

/**
MarketingStatus
    The marketing status describes the date when a medicinal product is actually
    put on the market or the date as of which it is no longer available.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class MarketingStatus extends Element {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {CodeableConcept|undefined} [country],
     * @param {CodeableConcept|undefined} [jurisdiction],
     * @param {CodeableConcept} status,
     * @param {Period|undefined} [dateRange],
     * @param {dateTime|undefined} [restoreDate],
    */
    constructor (
        {
            id,
            extension,
            modifierExtension,
            country,
            jurisdiction,
            status,
            dateRange,
            restoreDate,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.extension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.
    
    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.modifierExtension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description The country in which the marketing authorisation has been granted shall be
    specified It should be specified using the ISO 3166 ‑ 1 alpha-2 code elements.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'country', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.country,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.country = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.country = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Where a Medicines Regulatory Agency has granted a marketing authorisation for
    which specific provisions within a jurisdiction apply, the jurisdiction can be
    specified using an appropriate controlled terminology The controlled term and
    the controlled term identifier shall be specified.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'jurisdiction', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.jurisdiction,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.jurisdiction = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.jurisdiction = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description This attribute provides information on the status of the marketing of the
    medicinal product See ISO/TS 20443 for more information and examples.
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.status = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.status = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description The date when the Medicinal Product is placed on the market by the Marketing
    Authorisation Holder (or where applicable, the manufacturer/distributor) in a
    country and/or jurisdiction shall be provided A complete date consisting of
    day, month and year shall be specified using the ISO 8601 date format NOTE
    “Placed on the market” refers to the release of the Medicinal Product into the
    distribution chain.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'dateRange', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.dateRange,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.dateRange = undefined;
                    return;
                }
                const Period = require('../complex_types/period.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.dateRange = FhirResourceCreator.create(valueProvided, Period);
            }
        });

        /**
         * @description The date when the Medicinal Product is placed on the market by the Marketing
    Authorisation Holder (or where applicable, the manufacturer/distributor) in a
    country and/or jurisdiction shall be provided A complete date consisting of
    day, month and year shall be specified using the ISO 8601 date format NOTE
    “Placed on the market” refers to the release of the Medicinal Product into the
    distribution chain.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'restoreDate', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.restoreDate,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.restoreDate = undefined;
                    return;
                }
                this.__data.restoreDate = valueProvided;
            }
        });


        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            country,
            jurisdiction,
            status,
            dateRange,
            restoreDate,
        });
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON () {
        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            country: this.country && this.country.toJSON(),
            jurisdiction: this.jurisdiction && this.jurisdiction.toJSON(),
            status: this.status && this.status.toJSON(),
            dateRange: this.dateRange && this.dateRange.toJSON(),
            restoreDate: this.restoreDate,
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync ({ fnUpdateReferenceAsync }) {
            if (this.extension) { await async.each(this.extension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.modifierExtension) { await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.country) { await this.country.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.jurisdiction) { await this.jurisdiction.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.status) { await this.status.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.dateRange) { await this.dateRange.updateReferencesAsync({ fnUpdateReferenceAsync }); }
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal () {
        const json = {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            country: this.country && this.country.toJSONInternal(),
            jurisdiction: this.jurisdiction && this.jurisdiction.toJSONInternal(),
            status: this.status && this.status.toJSONInternal(),
            dateRange: this.dateRange && this.dateRange.toJSONInternal(),
            restoreDate: this.restoreDate,
        };

        return removeNull(json);
    }
}

module.exports = MarketingStatus;
