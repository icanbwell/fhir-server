/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

/**
CoverageEligibilityResponse.Insurance
    This resource provides eligibility and plan details from the processing of an
    CoverageEligibilityRequest resource.
*/
class CoverageEligibilityResponseInsurance {
    constructor(
        {
            id,
            extension,
            modifierExtension,
            coverage,
            inforce,
            benefitPeriod,
            item,
        }
    ) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description Reference to the insurance card level information contained in the Coverage
    resource. The coverage issuing insurer will use these details to locate the
    patient's actual coverage within the insurer's information system.
         * @property {Reference}
        */
        Object.defineProperty(this, 'coverage', {
            enumerable: true,
            get: () => this.__data.coverage,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.coverage = new Reference(valueProvided);
            }
        });

        /**
         * @description Flag indicating if the coverage provided is inforce currently if no service
    date(s) specified or for the whole duration of the service dates.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'inforce', {
            enumerable: true,
            get: () => this.__data.inforce,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.inforce = valueProvided;
            }
        });

        /**
         * @description The term of the benefits documented in this response.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'benefitPeriod', {
            enumerable: true,
            get: () => this.__data.benefitPeriod,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.benefitPeriod = new Period(valueProvided);
            }
        });

        /**
         * @description Benefits and optionally current balances, and authorization details by
    category or service.
         * @property {CoverageEligibilityResponseItem[]|undefined}
        */
        Object.defineProperty(this, 'item', {
            enumerable: true,
            get: () => this.__data.item,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CoverageEligibilityResponseItem = require('../backbone_elements/coverageEligibilityResponseItem.js');
                this.__data.item = Array.isArray(valueProvided) ? valueProvided.map(v => new CoverageEligibilityResponseItem(v)) : [new CoverageEligibilityResponseItem(valueProvided)];
            }
        });

        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            coverage,
            inforce,
            benefitPeriod,
            item,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'CoverageEligibilityResponseInsurance',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'CoverageEligibilityResponseInsurance';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            coverage: this.coverage && this.coverage.toJSON(),
            inforce: this.inforce,
            benefitPeriod: this.benefitPeriod && this.benefitPeriod.toJSON(),
            item: this.item && this.item.map(v => v.toJSON()),
        };
    }
}

module.exports = CoverageEligibilityResponseInsurance;
