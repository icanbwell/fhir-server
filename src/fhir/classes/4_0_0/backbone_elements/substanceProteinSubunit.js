/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const {Resource} = require('../resources/resource');


/**
SubstanceProtein.Subunit
    A SubstanceProtein is defined as a single unit of a linear amino acid
    sequence, or a combination of subunits that are either covalently linked or
    have a defined invariant stoichiometric relationship. This includes all
    synthetic, recombinant and purified SubstanceProteins of defined sequence,
    whether the use is therapeutic or prophylactic. This set of elements will be
    used to describe albumins, coagulation factors, cytokines, growth factors,
    peptide/SubstanceProtein hormones, enzymes, toxins, toxoids, recombinant
    vaccines, and immunomodulators.
*/
class SubstanceProteinSubunit extends Resource {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Int|undefined} [subunit],
     * @param {String|undefined} [sequence],
     * @param {Int|undefined} [length],
     * @param {Attachment|undefined} [sequenceAttachment],
     * @param {Identifier|undefined} [nTerminalModificationId],
     * @param {String|undefined} [nTerminalModification],
     * @param {Identifier|undefined} [cTerminalModificationId],
     * @param {String|undefined} [cTerminalModification],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            subunit,
            sequence,
            length,
            sequenceAttachment,
            nTerminalModificationId,
            nTerminalModification,
            cTerminalModificationId,
            cTerminalModification,
        }
    ) {
        super({});
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description Index of primary sequences of amino acids linked through peptide bonds in
    order of decreasing length. Sequences of the same length will be ordered by
    molecular weight. Subunits that have identical sequences will be repeated and
    have sequential subscripts.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'subunit', {
            enumerable: true,
            get: () => this.__data.subunit,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.subunit = valueProvided;
            }
        });

        /**
         * @description The sequence information shall be provided enumerating the amino acids from N-
    to C-terminal end using standard single-letter amino acid codes. Uppercase
    shall be used for L-amino acids and lowercase for D-amino acids. Transcribed
    SubstanceProteins will always be described using the translated sequence; for
    synthetic peptide containing amino acids that are not represented with a
    single letter code an X should be used within the sequence. The modified amino
    acids will be distinguished by their position in the sequence.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'sequence', {
            enumerable: true,
            get: () => this.__data.sequence,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.sequence = valueProvided;
            }
        });

        /**
         * @description Length of linear sequences of amino acids contained in the subunit.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'length', {
            enumerable: true,
            get: () => this.__data.length,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.length = valueProvided;
            }
        });

        /**
         * @description The sequence information shall be provided enumerating the amino acids from N-
    to C-terminal end using standard single-letter amino acid codes. Uppercase
    shall be used for L-amino acids and lowercase for D-amino acids. Transcribed
    SubstanceProteins will always be described using the translated sequence; for
    synthetic peptide containing amino acids that are not represented with a
    single letter code an X should be used within the sequence. The modified amino
    acids will be distinguished by their position in the sequence.
         * @property {Attachment|undefined}
        */
        Object.defineProperty(this, 'sequenceAttachment', {
            enumerable: true,
            get: () => this.__data.sequenceAttachment,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Attachment = require('../complex_types/attachment.js');
                this.__data.sequenceAttachment = new Attachment(valueProvided);
            }
        });

        /**
         * @description Unique identifier for molecular fragment modification based on the ISO 11238
    Substance ID.
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'nTerminalModificationId', {
            enumerable: true,
            get: () => this.__data.nTerminalModificationId,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.nTerminalModificationId = new Identifier(valueProvided);
            }
        });

        /**
         * @description The name of the fragment modified at the N-terminal of the SubstanceProtein
    shall be specified.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'nTerminalModification', {
            enumerable: true,
            get: () => this.__data.nTerminalModification,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.nTerminalModification = valueProvided;
            }
        });

        /**
         * @description Unique identifier for molecular fragment modification based on the ISO 11238
    Substance ID.
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'cTerminalModificationId', {
            enumerable: true,
            get: () => this.__data.cTerminalModificationId,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.cTerminalModificationId = new Identifier(valueProvided);
            }
        });

        /**
         * @description The modification at the C-terminal shall be specified.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'cTerminalModification', {
            enumerable: true,
            get: () => this.__data.cTerminalModification,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.cTerminalModification = valueProvided;
            }
        });

        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            subunit,
            sequence,
            length,
            sequenceAttachment,
            nTerminalModificationId,
            nTerminalModification,
            cTerminalModificationId,
            cTerminalModification,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'SubstanceProteinSubunit',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'SubstanceProteinSubunit';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            subunit: this.subunit,
            sequence: this.sequence,
            length: this.length,
            sequenceAttachment: this.sequenceAttachment && this.sequenceAttachment.toJSON(),
            nTerminalModificationId: this.nTerminalModificationId && this.nTerminalModificationId.toJSON(),
            nTerminalModification: this.nTerminalModification,
            cTerminalModificationId: this.cTerminalModificationId && this.cTerminalModificationId.toJSON(),
            cTerminalModification: this.cTerminalModification,
        };
    }
}

module.exports = SubstanceProteinSubunit;
