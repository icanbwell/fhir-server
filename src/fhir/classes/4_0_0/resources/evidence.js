/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');
const async = require('async');


/**
Evidence
    The Evidence resource describes the conditional state (population and any
    exposures being compared within the population) and outcome (if specified)
    that the knowledge (evidence, assertion, recommendation) is about.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class Evidence extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {uri|undefined} [url],
     * @param {Identifier[]|undefined} [identifier],
     * @param {String|undefined} [version],
     * @param {String|undefined} [name],
     * @param {String|undefined} [title],
     * @param {String|undefined} [shortTitle],
     * @param {String|undefined} [subtitle],
     * @param {code} status,
     * @param {dateTime|undefined} [date],
     * @param {String|undefined} [publisher],
     * @param {ContactDetail[]|undefined} [contact],
     * @param {markdown|undefined} [description],
     * @param {Annotation[]|undefined} [note],
     * @param {UsageContext[]|undefined} [useContext],
     * @param {CodeableConcept[]|undefined} [jurisdiction],
     * @param {markdown|undefined} [copyright],
     * @param {date|undefined} [approvalDate],
     * @param {date|undefined} [lastReviewDate],
     * @param {Period|undefined} [effectivePeriod],
     * @param {CodeableConcept[]|undefined} [topic],
     * @param {ContactDetail[]|undefined} [author],
     * @param {ContactDetail[]|undefined} [editor],
     * @param {ContactDetail[]|undefined} [reviewer],
     * @param {ContactDetail[]|undefined} [endorser],
     * @param {RelatedArtifact[]|undefined} [relatedArtifact],
     * @param {Reference} exposureBackground,
     * @param {Reference[]|undefined} [exposureVariant],
     * @param {Reference[]|undefined} [outcome],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            identifier,
            version,
            name,
            title,
            shortTitle,
            subtitle,
            status,
            date,
            publisher,
            contact,
            description,
            note,
            useContext,
            jurisdiction,
            copyright,
            approvalDate,
            lastReviewDate,
            effectivePeriod,
            topic,
            author,
            editor,
            reviewer,
            endorser,
            relatedArtifact,
            exposureBackground,
            exposureVariant,
            outcome,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.meta = undefined;
                    return;
                }
                const Meta = require('../complex_types/meta.js');
                if (valueProvided instanceof Meta){
                    this.__data.meta = valueProvided;
                } else {
                    this.__data.meta = new Meta(valueProvided);
                }
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.implicitRules = undefined;
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.language = undefined;
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.text = undefined;
                    return;
                }
                const Narrative = require('../complex_types/narrative.js');
                if (valueProvided instanceof Narrative){
                    this.__data.text = valueProvided;
                } else {
                    this.__data.text = new Narrative(valueProvided);
                }
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.contained = undefined;
                    return;
                }
                const ResourceContainer = require('../simple_types/resourceContainer.js');
                const {getResource} = require('../../../../operations/common/getResource');
                if (Array.isArray(valueProvided)) {
                    this.__data.contained = valueProvided.filter(v => v).map(v => {
                        if (v instanceof Resource) {
                            return v;
                        }
                        const ResourceCreator = getResource('4_0_0', v.resourceType);
                        return new ResourceCreator(v);
                    });
                } else {
                    if (valueProvided instanceof Resource) {
                        this.__data.contained = [valueProvided];
                    } else {
                        const ResourceCreator = getResource('4_0_0', valueProvided.resourceType);
                        this.__data.contained = [new ResourceCreator(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.extension = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Extension ?
                                v : new Extension(v)
                            );
                } else {
                    if (valueProvided instanceof Extension) {
                        this.__data.extension = valueProvided;
                    } else {
                        this.__data.extension = [new Extension(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.modifierExtension = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Extension ?
                                v : new Extension(v)
                            );
                } else {
                    if (valueProvided instanceof Extension) {
                        this.__data.modifierExtension = valueProvided;
                    } else {
                        this.__data.modifierExtension = [new Extension(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description An absolute URI that is used to identify this evidence when it is referenced
    in a specification, model, design or an instance; also called its canonical
    identifier. This SHOULD be globally unique and SHOULD be a literal address at
    which at which an authoritative instance of this evidence is (or will be)
    published. This URL can be the target of a canonical reference. It SHALL
    remain the same when the evidence is stored on different servers.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'url', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.url,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.url = undefined;
                    return;
                }
                this.__data.url = valueProvided;
            }
        });

        /**
         * @description A formal identifier that is used to identify this evidence when it is
    represented in other formats, or referenced in a specification, model, design
    or an instance.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.identifier = undefined;
                    return;
                }
                const Identifier = require('../complex_types/identifier.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.identifier = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Identifier ?
                                v : new Identifier(v)
                            );
                } else {
                    if (valueProvided instanceof Identifier) {
                        this.__data.identifier = valueProvided;
                    } else {
                        this.__data.identifier = [new Identifier(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description The identifier that is used to identify this version of the evidence when it
    is referenced in a specification, model, design or instance. This is an
    arbitrary value managed by the evidence author and is not expected to be
    globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
    managed version is not available. There is also no expectation that versions
    can be placed in a lexicographical sequence. To provide a version consistent
    with the Decision Support Service specification, use the format
    Major.Minor.Revision (e.g. 1.0.0). For more information on versioning
    knowledge assets, refer to the Decision Support Service specification. Note
    that a version is required for non-experimental active artifacts.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'version', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.version,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.version = undefined;
                    return;
                }
                this.__data.version = valueProvided;
            }
        });

        /**
         * @description A natural language name identifying the evidence. This name should be usable
    as an identifier for the module by machine processing applications such as
    code generation.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'name', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.name,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.name = undefined;
                    return;
                }
                this.__data.name = valueProvided;
            }
        });

        /**
         * @description A short, descriptive, user-friendly title for the evidence.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'title', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.title,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.title = undefined;
                    return;
                }
                this.__data.title = valueProvided;
            }
        });

        /**
         * @description The short title provides an alternate title for use in informal descriptive
    contexts where the full, formal title is not necessary.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'shortTitle', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.shortTitle,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.shortTitle = undefined;
                    return;
                }
                this.__data.shortTitle = valueProvided;
            }
        });

        /**
         * @description An explanatory or alternate title for the Evidence giving additional
    information about its content.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'subtitle', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.subtitle,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.subtitle = undefined;
                    return;
                }
                this.__data.subtitle = valueProvided;
            }
        });

        /**
         * @description The status of this evidence. Enables tracking the life-cycle of the content.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.status = undefined;
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description The date  (and optionally time) when the evidence was published. The date must
    change when the business version changes and it must change if the status code
    changes. In addition, it should change when the substantive content of the
    evidence changes.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'date', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.date,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.date = undefined;
                    return;
                }
                this.__data.date = valueProvided;
            }
        });

        /**
         * @description The name of the organization or individual that published the evidence.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'publisher', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.publisher,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.publisher = undefined;
                    return;
                }
                this.__data.publisher = valueProvided;
            }
        });

        /**
         * @description Contact details to assist a user in finding and communicating with the
    publisher.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'contact', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contact,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.contact = undefined;
                    return;
                }
                const ContactDetail = require('../complex_types/contactDetail.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.contact = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof ContactDetail ?
                                v : new ContactDetail(v)
                            );
                } else {
                    if (valueProvided instanceof ContactDetail) {
                        this.__data.contact = valueProvided;
                    } else {
                        this.__data.contact = [new ContactDetail(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description A free text natural language description of the evidence from a consumer's
    perspective.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'description', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.description = undefined;
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description A human-readable string to clarify or explain concepts about the resource.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.note,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.note = undefined;
                    return;
                }
                const Annotation = require('../complex_types/annotation.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.note = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Annotation ?
                                v : new Annotation(v)
                            );
                } else {
                    if (valueProvided instanceof Annotation) {
                        this.__data.note = valueProvided;
                    } else {
                        this.__data.note = [new Annotation(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description The content was developed with a focus and intent of supporting the contexts
    that are listed. These contexts may be general categories (gender, age, ...)
    or may be references to specific programs (insurance plans, studies, ...) and
    may be used to assist with indexing and searching for appropriate evidence
    instances.
         * @property {UsageContext[]|undefined}
        */
        Object.defineProperty(this, 'useContext', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.useContext,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.useContext = undefined;
                    return;
                }
                const UsageContext = require('../complex_types/usageContext.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.useContext = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof UsageContext ?
                                v : new UsageContext(v)
                            );
                } else {
                    if (valueProvided instanceof UsageContext) {
                        this.__data.useContext = valueProvided;
                    } else {
                        this.__data.useContext = [new UsageContext(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description A legal or geographic region in which the evidence is intended to be used.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'jurisdiction', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.jurisdiction,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.jurisdiction = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.jurisdiction = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof CodeableConcept ?
                                v : new CodeableConcept(v)
                            );
                } else {
                    if (valueProvided instanceof CodeableConcept) {
                        this.__data.jurisdiction = valueProvided;
                    } else {
                        this.__data.jurisdiction = [new CodeableConcept(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description A copyright statement relating to the evidence and/or its contents. Copyright
    statements are generally legal restrictions on the use and publishing of the
    evidence.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'copyright', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.copyright,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.copyright = undefined;
                    return;
                }
                this.__data.copyright = valueProvided;
            }
        });

        /**
         * @description The date on which the resource content was approved by the publisher. Approval
    happens once when the content is officially approved for usage.
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'approvalDate', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.approvalDate,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.approvalDate = undefined;
                    return;
                }
                this.__data.approvalDate = valueProvided;
            }
        });

        /**
         * @description The date on which the resource content was last reviewed. Review happens
    periodically after approval but does not change the original approval date.
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'lastReviewDate', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.lastReviewDate,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.lastReviewDate = undefined;
                    return;
                }
                this.__data.lastReviewDate = valueProvided;
            }
        });

        /**
         * @description The period during which the evidence content was or is planned to be in active
    use.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'effectivePeriod', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.effectivePeriod,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.effectivePeriod = undefined;
                    return;
                }
                const Period = require('../complex_types/period.js');
                if (valueProvided instanceof Period){
                    this.__data.effectivePeriod = valueProvided;
                } else {
                    this.__data.effectivePeriod = new Period(valueProvided);
                }
            }
        });

        /**
         * @description Descriptive topics related to the content of the Evidence. Topics provide a
    high-level categorization grouping types of Evidences that can be useful for
    filtering and searching.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'topic', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.topic,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.topic = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.topic = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof CodeableConcept ?
                                v : new CodeableConcept(v)
                            );
                } else {
                    if (valueProvided instanceof CodeableConcept) {
                        this.__data.topic = valueProvided;
                    } else {
                        this.__data.topic = [new CodeableConcept(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description An individiual or organization primarily involved in the creation and
    maintenance of the content.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'author', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.author,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.author = undefined;
                    return;
                }
                const ContactDetail = require('../complex_types/contactDetail.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.author = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof ContactDetail ?
                                v : new ContactDetail(v)
                            );
                } else {
                    if (valueProvided instanceof ContactDetail) {
                        this.__data.author = valueProvided;
                    } else {
                        this.__data.author = [new ContactDetail(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description An individual or organization primarily responsible for internal coherence of
    the content.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'editor', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.editor,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.editor = undefined;
                    return;
                }
                const ContactDetail = require('../complex_types/contactDetail.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.editor = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof ContactDetail ?
                                v : new ContactDetail(v)
                            );
                } else {
                    if (valueProvided instanceof ContactDetail) {
                        this.__data.editor = valueProvided;
                    } else {
                        this.__data.editor = [new ContactDetail(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description An individual or organization primarily responsible for review of some aspect
    of the content.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'reviewer', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.reviewer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.reviewer = undefined;
                    return;
                }
                const ContactDetail = require('../complex_types/contactDetail.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.reviewer = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof ContactDetail ?
                                v : new ContactDetail(v)
                            );
                } else {
                    if (valueProvided instanceof ContactDetail) {
                        this.__data.reviewer = valueProvided;
                    } else {
                        this.__data.reviewer = [new ContactDetail(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description An individual or organization responsible for officially endorsing the content
    for use in some setting.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'endorser', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.endorser,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.endorser = undefined;
                    return;
                }
                const ContactDetail = require('../complex_types/contactDetail.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.endorser = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof ContactDetail ?
                                v : new ContactDetail(v)
                            );
                } else {
                    if (valueProvided instanceof ContactDetail) {
                        this.__data.endorser = valueProvided;
                    } else {
                        this.__data.endorser = [new ContactDetail(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Related artifacts such as additional documentation, justification, or
    bibliographic references.
         * @property {RelatedArtifact[]|undefined}
        */
        Object.defineProperty(this, 'relatedArtifact', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.relatedArtifact,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.relatedArtifact = undefined;
                    return;
                }
                const RelatedArtifact = require('../complex_types/relatedArtifact.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.relatedArtifact = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof RelatedArtifact ?
                                v : new RelatedArtifact(v)
                            );
                } else {
                    if (valueProvided instanceof RelatedArtifact) {
                        this.__data.relatedArtifact = valueProvided;
                    } else {
                        this.__data.relatedArtifact = [new RelatedArtifact(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description A reference to a EvidenceVariable resource that defines the population for the
    research.
         * @property {Reference}
        */
        Object.defineProperty(this, 'exposureBackground', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.exposureBackground,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.exposureBackground = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (valueProvided instanceof Reference){
                    this.__data.exposureBackground = valueProvided;
                } else {
                    this.__data.exposureBackground = new Reference(valueProvided);
                }
            }
        });

        /**
         * @description A reference to a EvidenceVariable resource that defines the exposure for the
    research.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'exposureVariant', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.exposureVariant,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.exposureVariant = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.exposureVariant = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Reference ?
                                v : new Reference(v)
                            );
                } else {
                    if (valueProvided instanceof Reference) {
                        this.__data.exposureVariant = valueProvided;
                    } else {
                        this.__data.exposureVariant = [new Reference(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description A reference to a EvidenceVariable resomece that defines the outcome for the
    research.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'outcome', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.outcome,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.outcome = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.outcome = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Reference ?
                                v : new Reference(v)
                            );
                } else {
                    if (valueProvided instanceof Reference) {
                        this.__data.outcome = valueProvided;
                    } else {
                        this.__data.outcome = [new Reference(valueProvided)];
                    }
                }
            }
        });


        /**
         * @description _access
         * @property {Object|undefined}
         */
        Object.defineProperty(this, '_access', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._access,
            set: valueProvided => {
                this.__data._access = valueProvided;
            }
        });
        /**
         * @description _sourceAssigningAuthority
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceAssigningAuthority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceAssigningAuthority,
            set: valueProvided => {
                this.__data._sourceAssigningAuthority = valueProvided;
            }
        });
        /**
         * @description _uuid
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_uuid', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._uuid,
            set: valueProvided => {
                this.__data._uuid = valueProvided;
            }
        });
        /**
         * @description _sourceId
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceId,
            set: valueProvided => {
                this.__data._sourceId = valueProvided;
            }
        });


        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            identifier,
            version,
            name,
            title,
            shortTitle,
            subtitle,
            status,
            date,
            publisher,
            contact,
            description,
            note,
            useContext,
            jurisdiction,
            copyright,
            approvalDate,
            lastReviewDate,
            effectivePeriod,
            topic,
            author,
            editor,
            reviewer,
            endorser,
            relatedArtifact,
            exposureBackground,
            exposureVariant,
            outcome,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        });

        /**
         * @description Define a default non-writable resourceType property
         * @property {string|undefined}
         */
        Object.defineProperty(this, 'resourceType', {
            value: 'Evidence',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    /**
     * @description Define a default non-writable resourceType property
     * @property {string|undefined}
     */
    static get resourceType() {
        return 'Evidence';
    }

    /**
     * @description Creates a blank new resource
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {uri|undefined} [url],
     * @param {Identifier[]|undefined} [identifier],
     * @param {String|undefined} [version],
     * @param {String|undefined} [name],
     * @param {String|undefined} [title],
     * @param {String|undefined} [shortTitle],
     * @param {String|undefined} [subtitle],
     * @param {code} status,
     * @param {dateTime|undefined} [date],
     * @param {String|undefined} [publisher],
     * @param {ContactDetail[]|undefined} [contact],
     * @param {markdown|undefined} [description],
     * @param {Annotation[]|undefined} [note],
     * @param {UsageContext[]|undefined} [useContext],
     * @param {CodeableConcept[]|undefined} [jurisdiction],
     * @param {markdown|undefined} [copyright],
     * @param {date|undefined} [approvalDate],
     * @param {date|undefined} [lastReviewDate],
     * @param {Period|undefined} [effectivePeriod],
     * @param {CodeableConcept[]|undefined} [topic],
     * @param {ContactDetail[]|undefined} [author],
     * @param {ContactDetail[]|undefined} [editor],
     * @param {ContactDetail[]|undefined} [reviewer],
     * @param {ContactDetail[]|undefined} [endorser],
     * @param {RelatedArtifact[]|undefined} [relatedArtifact],
     * @param {Reference} exposureBackground,
     * @param {Reference[]|undefined} [exposureVariant],
     * @param {Reference[]|undefined} [outcome],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
     * @returns {Evidence}
    */
    create(
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            identifier,
            version,
            name,
            title,
            shortTitle,
            subtitle,
            status,
            date,
            publisher,
            contact,
            description,
            note,
            useContext,
            jurisdiction,
            copyright,
            approvalDate,
            lastReviewDate,
            effectivePeriod,
            topic,
            author,
            editor,
            reviewer,
            endorser,
            relatedArtifact,
            exposureBackground,
            exposureVariant,
            outcome,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        }
    ) {
        return new Evidence({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            identifier,
            version,
            name,
            title,
            shortTitle,
            subtitle,
            status,
            date,
            publisher,
            contact,
            description,
            note,
            useContext,
            jurisdiction,
            copyright,
            approvalDate,
            lastReviewDate,
            effectivePeriod,
            topic,
            author,
            editor,
            reviewer,
            endorser,
            relatedArtifact,
            exposureBackground,
            exposureVariant,
            outcome,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {Evidence}
    */
    clone() {
        return new Evidence(this.toJSONInternal());
    }


    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            url: this.url,
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            version: this.version,
            name: this.name,
            title: this.title,
            shortTitle: this.shortTitle,
            subtitle: this.subtitle,
            status: this.status,
            date: this.date,
            publisher: this.publisher,
            contact: this.contact && this.contact.map(v => v.toJSON()),
            description: this.description,
            note: this.note && this.note.map(v => v.toJSON()),
            useContext: this.useContext && this.useContext.map(v => v.toJSON()),
            jurisdiction: this.jurisdiction && this.jurisdiction.map(v => v.toJSON()),
            copyright: this.copyright,
            approvalDate: this.approvalDate,
            lastReviewDate: this.lastReviewDate,
            effectivePeriod: this.effectivePeriod && this.effectivePeriod.toJSON(),
            topic: this.topic && this.topic.map(v => v.toJSON()),
            author: this.author && this.author.map(v => v.toJSON()),
            editor: this.editor && this.editor.map(v => v.toJSON()),
            reviewer: this.reviewer && this.reviewer.map(v => v.toJSON()),
            endorser: this.endorser && this.endorser.map(v => v.toJSON()),
            relatedArtifact: this.relatedArtifact && this.relatedArtifact.map(v => v.toJSON()),
            exposureBackground: this.exposureBackground && this.exposureBackground.toJSON(),
            exposureVariant: this.exposureVariant && this.exposureVariant.map(v => v.toJSON()),
            outcome: this.outcome && this.outcome.map(v => v.toJSON()),
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync({fnUpdateReferenceAsync}) {
            if (this.meta) {await this.meta.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.text) {await this.text.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.contained) {await async.each(this.contained, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.extension) {await async.each(this.extension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.modifierExtension) {await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.identifier) {await async.each(this.identifier, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.contact) {await async.each(this.contact, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.note) {await async.each(this.note, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.useContext) {await async.each(this.useContext, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.jurisdiction) {await async.each(this.jurisdiction, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.effectivePeriod) {await this.effectivePeriod.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.topic) {await async.each(this.topic, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.author) {await async.each(this.author, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.editor) {await async.each(this.editor, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.reviewer) {await async.each(this.reviewer, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.endorser) {await async.each(this.endorser, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.relatedArtifact) {await async.each(this.relatedArtifact, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.exposureBackground) {await this.exposureBackground.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.exposureVariant) {await async.each(this.exposureVariant, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.outcome) {await async.each(this.outcome, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal() {
        const {removeNull} = require('../../../../utils/nullRemover');
        const json = {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSONInternal(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSONInternal(),
            contained: this.contained && this.contained.map(v => v.toJSONInternal()),
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            url: this.url,
            identifier: this.identifier && this.identifier.map(v => v.toJSONInternal()),
            version: this.version,
            name: this.name,
            title: this.title,
            shortTitle: this.shortTitle,
            subtitle: this.subtitle,
            status: this.status,
            date: this.date,
            publisher: this.publisher,
            contact: this.contact && this.contact.map(v => v.toJSONInternal()),
            description: this.description,
            note: this.note && this.note.map(v => v.toJSONInternal()),
            useContext: this.useContext && this.useContext.map(v => v.toJSONInternal()),
            jurisdiction: this.jurisdiction && this.jurisdiction.map(v => v.toJSONInternal()),
            copyright: this.copyright,
            approvalDate: this.approvalDate,
            lastReviewDate: this.lastReviewDate,
            effectivePeriod: this.effectivePeriod && this.effectivePeriod.toJSONInternal(),
            topic: this.topic && this.topic.map(v => v.toJSONInternal()),
            author: this.author && this.author.map(v => v.toJSONInternal()),
            editor: this.editor && this.editor.map(v => v.toJSONInternal()),
            reviewer: this.reviewer && this.reviewer.map(v => v.toJSONInternal()),
            endorser: this.endorser && this.endorser.map(v => v.toJSONInternal()),
            relatedArtifact: this.relatedArtifact && this.relatedArtifact.map(v => v.toJSONInternal()),
            exposureBackground: this.exposureBackground && this.exposureBackground.toJSONInternal(),
            exposureVariant: this.exposureVariant && this.exposureVariant.map(v => v.toJSONInternal()),
            outcome: this.outcome && this.outcome.map(v => v.toJSONInternal()),
        };


        if (this._access) {
            json._access = this._access;
        }
        if (this._sourceAssigningAuthority) {
            json._sourceAssigningAuthority = this._sourceAssigningAuthority;
        }
        if (this._uuid) {
            json._uuid = this._uuid;
        }
        if (this._sourceId) {
            json._sourceId = this._sourceId;
        }

        return removeNull(json);
    }
}

module.exports = Evidence;
