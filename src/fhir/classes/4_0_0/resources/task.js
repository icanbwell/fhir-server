/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');
const async = require('async');


/**
Task
    A task to be performed.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class Task extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {canonical|undefined} [instantiatesCanonical],
     * @param {uri|undefined} [instantiatesUri],
     * @param {Reference[]|undefined} [basedOn],
     * @param {Identifier|undefined} [groupIdentifier],
     * @param {Reference[]|undefined} [partOf],
     * @param {code} status,
     * @param {CodeableConcept|undefined} [statusReason],
     * @param {CodeableConcept|undefined} [businessStatus],
     * @param {code} intent,
     * @param {code|undefined} [priority],
     * @param {CodeableConcept|undefined} [code],
     * @param {String|undefined} [description],
     * @param {Reference|undefined} [focus],
     * @param {Reference|undefined} [for_],
     * @param {Reference|undefined} [encounter],
     * @param {Period|undefined} [executionPeriod],
     * @param {dateTime|undefined} [authoredOn],
     * @param {dateTime|undefined} [lastModified],
     * @param {Reference|undefined} [requester],
     * @param {CodeableConcept[]|undefined} [performerType],
     * @param {Reference|undefined} [owner],
     * @param {Reference|undefined} [location],
     * @param {CodeableConcept|undefined} [reasonCode],
     * @param {Reference|undefined} [reasonReference],
     * @param {Reference[]|undefined} [insurance],
     * @param {Annotation[]|undefined} [note],
     * @param {Reference[]|undefined} [relevantHistory],
     * @param {TaskRestriction|undefined} [restriction],
     * @param {TaskInput[]|undefined} [input],
     * @param {TaskOutput[]|undefined} [output],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            instantiatesCanonical,
            instantiatesUri,
            basedOn,
            groupIdentifier,
            partOf,
            status,
            statusReason,
            businessStatus,
            intent,
            priority,
            code,
            description,
            focus,
            'for': for_,
            encounter,
            executionPeriod,
            authoredOn,
            lastModified,
            requester,
            performerType,
            owner,
            location,
            reasonCode,
            reasonReference,
            insurance,
            note,
            relevantHistory,
            restriction,
            input,
            output,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.meta = undefined;
                    return;
                }
                const Meta = require('../complex_types/meta.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.meta = FhirResourceCreator.create(valueProvided, Meta);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.implicitRules = undefined;
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.language = undefined;
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.text = undefined;
                    return;
                }
                const Narrative = require('../complex_types/narrative.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.text = FhirResourceCreator.create(valueProvided, Narrative);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.contained = undefined;
                    return;
                }
                const ResourceContainer = require('../simple_types/resourceContainer.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.contained = FhirResourceCreator.createArray(valueProvided);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.extension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.modifierExtension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description The business identifier for this task.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.identifier = undefined;
                    return;
                }
                const Identifier = require('../complex_types/identifier.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.identifier = FhirResourceCreator.createArray(valueProvided, Identifier);
            }
        });

        /**
         * @description The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other
    definition that is adhered to in whole or in part by this Task.
         * @property {canonical|undefined}
        */
        Object.defineProperty(this, 'instantiatesCanonical', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.instantiatesCanonical,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.instantiatesCanonical = undefined;
                    return;
                }
                this.__data.instantiatesCanonical = valueProvided;
            }
        });

        /**
         * @description The URL pointing to an *externally* maintained  protocol, guideline, orderset
    or other definition that is adhered to in whole or in part by this Task.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'instantiatesUri', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.instantiatesUri,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.instantiatesUri = undefined;
                    return;
                }
                this.__data.instantiatesUri = valueProvided;
            }
        });

        /**
         * @description BasedOn refers to a higher-level authorization that triggered the creation of
    the task.  It references a "request" resource such as a ServiceRequest,
    MedicationRequest, ServiceRequest, CarePlan, etc. which is distinct from the
    "request" resource the task is seeking to fulfill.  This latter resource is
    referenced by FocusOn.  For example, based on a ServiceRequest (= BasedOn), a
    task is created to fulfill a procedureRequest ( = FocusOn ) to collect a
    specimen from a patient.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'basedOn', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.basedOn,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.basedOn = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.basedOn = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description An identifier that links together multiple tasks and other requests that were
    created in the same context.
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'groupIdentifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.groupIdentifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.groupIdentifier = undefined;
                    return;
                }
                const Identifier = require('../complex_types/identifier.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.groupIdentifier = FhirResourceCreator.create(valueProvided, Identifier);
            }
        });

        /**
         * @description Task that this particular task is part of.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'partOf', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.partOf,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.partOf = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.partOf = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description The current status of the task.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.status = undefined;
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description An explanation as to why this task is held, failed, was refused, etc.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'statusReason', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.statusReason,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.statusReason = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.statusReason = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Contains business-specific nuances of the business state.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'businessStatus', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.businessStatus,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.businessStatus = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.businessStatus = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Indicates the "level" of actionability associated with the Task, i.e. i+R[9]Cs
    this a proposed task, a planned task, an actionable task, etc.
         * @property {code}
        */
        Object.defineProperty(this, 'intent', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.intent,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.intent = undefined;
                    return;
                }
                this.__data.intent = valueProvided;
            }
        });

        /**
         * @description Indicates how quickly the Task should be addressed with respect to other
    requests.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'priority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.priority,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.priority = undefined;
                    return;
                }
                this.__data.priority = valueProvided;
            }
        });

        /**
         * @description A name or code (or both) briefly describing what the task involves.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'code', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.code,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.code = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.code = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description A free-text description of what is to be performed.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.description = undefined;
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description The request being actioned or the resource being manipulated by this task.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'focus', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.focus,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.focus = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.focus = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description The entity who benefits from the performance of the service specified in the
    task (e.g., the patient).
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'for', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.for,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.for = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.for = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description The healthcare event  (e.g. a patient and healthcare provider interaction)
    during which this task was created.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'encounter', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.encounter,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.encounter = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.encounter = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description Identifies the time action was first taken against the task (start) and/or the
    time final action was taken against the task prior to marking it as completed
    (end).
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'executionPeriod', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.executionPeriod,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.executionPeriod = undefined;
                    return;
                }
                const Period = require('../complex_types/period.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.executionPeriod = FhirResourceCreator.create(valueProvided, Period);
            }
        });

        /**
         * @description The date and time this task was created.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'authoredOn', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.authoredOn,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.authoredOn = undefined;
                    return;
                }
                this.__data.authoredOn = valueProvided;
            }
        });

        /**
         * @description The date and time of last modification to this task.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'lastModified', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.lastModified,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.lastModified = undefined;
                    return;
                }
                this.__data.lastModified = valueProvided;
            }
        });

        /**
         * @description The creator of the task.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'requester', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.requester,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.requester = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.requester = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description The kind of participant that should perform the task.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'performerType', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.performerType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.performerType = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.performerType = FhirResourceCreator.createArray(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Individual organization or Device currently responsible for task execution.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'owner', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.owner,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.owner = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.owner = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description Principal physical location where the this task is performed.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'location', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.location,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.location = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.location = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description A description or code indicating why this task needs to be performed.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'reasonCode', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.reasonCode,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.reasonCode = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.reasonCode = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description A resource reference indicating why this task needs to be performed.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'reasonReference', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.reasonReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.reasonReference = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.reasonReference = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description Insurance plans, coverage extensions, pre-authorizations and/or pre-
    determinations that may be relevant to the Task.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'insurance', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.insurance,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.insurance = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.insurance = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description Free-text information captured about the task as it progresses.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.note,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.note = undefined;
                    return;
                }
                const Annotation = require('../complex_types/annotation.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.note = FhirResourceCreator.createArray(valueProvided, Annotation);
            }
        });

        /**
         * @description Links to Provenance records for past versions of this Task that identify key
    state transitions or updates that are likely to be relevant to a user looking
    at the current version of the task.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'relevantHistory', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.relevantHistory,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.relevantHistory = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.relevantHistory = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description If the Task.focus is a request resource and the task is seeking fulfillment
    (i.e. is asking for the request to be actioned), this element identifies any
    limitations on what parts of the referenced request should be actioned.
         * @property {TaskRestriction|undefined}
        */
        Object.defineProperty(this, 'restriction', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.restriction,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.restriction = undefined;
                    return;
                }
                const TaskRestriction = require('../backbone_elements/taskRestriction.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.restriction = FhirResourceCreator.create(valueProvided, TaskRestriction);
            }
        });

        /**
         * @description Additional information that may be needed in the execution of the task.
         * @property {TaskInput[]|undefined}
        */
        Object.defineProperty(this, 'input', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.input,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.input = undefined;
                    return;
                }
                const TaskInput = require('../backbone_elements/taskInput.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.input = FhirResourceCreator.createArray(valueProvided, TaskInput);
            }
        });

        /**
         * @description Outputs produced by the Task.
         * @property {TaskOutput[]|undefined}
        */
        Object.defineProperty(this, 'output', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.output,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.output = undefined;
                    return;
                }
                const TaskOutput = require('../backbone_elements/taskOutput.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.output = FhirResourceCreator.createArray(valueProvided, TaskOutput);
            }
        });


        /**
         * @description _access
         * @property {Object|undefined}
         */
        Object.defineProperty(this, '_access', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._access,
            set: valueProvided => {
                this.__data._access = valueProvided;
            }
        });
        /**
         * @description _sourceAssigningAuthority
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceAssigningAuthority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceAssigningAuthority,
            set: valueProvided => {
                this.__data._sourceAssigningAuthority = valueProvided;
            }
        });
        /**
         * @description _uuid
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_uuid', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._uuid,
            set: valueProvided => {
                this.__data._uuid = valueProvided;
            }
        });
        /**
         * @description _sourceId
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceId,
            set: valueProvided => {
                this.__data._sourceId = valueProvided;
            }
        });


        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            instantiatesCanonical,
            instantiatesUri,
            basedOn,
            groupIdentifier,
            partOf,
            status,
            statusReason,
            businessStatus,
            intent,
            priority,
            code,
            description,
            focus,
            'for': for_,
            encounter,
            executionPeriod,
            authoredOn,
            lastModified,
            requester,
            performerType,
            owner,
            location,
            reasonCode,
            reasonReference,
            insurance,
            note,
            relevantHistory,
            restriction,
            input,
            output,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        });

        /**
         * @description Define a default non-writable resourceType property
         * @property {string|undefined}
         */
        Object.defineProperty(this, 'resourceType', {
            value: 'Task',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    /**
     * @description Define a default non-writable resourceType property
     * @property {string|undefined}
     */
    static get resourceType() {
        return 'Task';
    }

    /**
     * @description Creates a blank new resource
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {canonical|undefined} [instantiatesCanonical],
     * @param {uri|undefined} [instantiatesUri],
     * @param {Reference[]|undefined} [basedOn],
     * @param {Identifier|undefined} [groupIdentifier],
     * @param {Reference[]|undefined} [partOf],
     * @param {code} status,
     * @param {CodeableConcept|undefined} [statusReason],
     * @param {CodeableConcept|undefined} [businessStatus],
     * @param {code} intent,
     * @param {code|undefined} [priority],
     * @param {CodeableConcept|undefined} [code],
     * @param {String|undefined} [description],
     * @param {Reference|undefined} [focus],
     * @param {Reference|undefined} [for_],
     * @param {Reference|undefined} [encounter],
     * @param {Period|undefined} [executionPeriod],
     * @param {dateTime|undefined} [authoredOn],
     * @param {dateTime|undefined} [lastModified],
     * @param {Reference|undefined} [requester],
     * @param {CodeableConcept[]|undefined} [performerType],
     * @param {Reference|undefined} [owner],
     * @param {Reference|undefined} [location],
     * @param {CodeableConcept|undefined} [reasonCode],
     * @param {Reference|undefined} [reasonReference],
     * @param {Reference[]|undefined} [insurance],
     * @param {Annotation[]|undefined} [note],
     * @param {Reference[]|undefined} [relevantHistory],
     * @param {TaskRestriction|undefined} [restriction],
     * @param {TaskInput[]|undefined} [input],
     * @param {TaskOutput[]|undefined} [output],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
     * @returns {Task}
    */
    create(
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            instantiatesCanonical,
            instantiatesUri,
            basedOn,
            groupIdentifier,
            partOf,
            status,
            statusReason,
            businessStatus,
            intent,
            priority,
            code,
            description,
            focus,
            'for': for_,
            encounter,
            executionPeriod,
            authoredOn,
            lastModified,
            requester,
            performerType,
            owner,
            location,
            reasonCode,
            reasonReference,
            insurance,
            note,
            relevantHistory,
            restriction,
            input,
            output,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        }
    ) {
        return new Task({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            instantiatesCanonical,
            instantiatesUri,
            basedOn,
            groupIdentifier,
            partOf,
            status,
            statusReason,
            businessStatus,
            intent,
            priority,
            code,
            description,
            focus,
            'for': for_,
            encounter,
            executionPeriod,
            authoredOn,
            lastModified,
            requester,
            performerType,
            owner,
            location,
            reasonCode,
            reasonReference,
            insurance,
            note,
            relevantHistory,
            restriction,
            input,
            output,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {Task}
    */
    clone() {
        return new Task(this.toJSONInternal());
    }


    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            instantiatesCanonical: this.instantiatesCanonical,
            instantiatesUri: this.instantiatesUri,
            basedOn: this.basedOn && this.basedOn.map(v => v.toJSON()),
            groupIdentifier: this.groupIdentifier && this.groupIdentifier.toJSON(),
            partOf: this.partOf && this.partOf.map(v => v.toJSON()),
            status: this.status,
            statusReason: this.statusReason && this.statusReason.toJSON(),
            businessStatus: this.businessStatus && this.businessStatus.toJSON(),
            intent: this.intent,
            priority: this.priority,
            code: this.code && this.code.toJSON(),
            description: this.description,
            focus: this.focus && this.focus.toJSON(),
            for: this.for && this.for.toJSON(),
            encounter: this.encounter && this.encounter.toJSON(),
            executionPeriod: this.executionPeriod && this.executionPeriod.toJSON(),
            authoredOn: this.authoredOn,
            lastModified: this.lastModified,
            requester: this.requester && this.requester.toJSON(),
            performerType: this.performerType && this.performerType.map(v => v.toJSON()),
            owner: this.owner && this.owner.toJSON(),
            location: this.location && this.location.toJSON(),
            reasonCode: this.reasonCode && this.reasonCode.toJSON(),
            reasonReference: this.reasonReference && this.reasonReference.toJSON(),
            insurance: this.insurance && this.insurance.map(v => v.toJSON()),
            note: this.note && this.note.map(v => v.toJSON()),
            relevantHistory: this.relevantHistory && this.relevantHistory.map(v => v.toJSON()),
            restriction: this.restriction && this.restriction.toJSON(),
            input: this.input && this.input.map(v => v.toJSON()),
            output: this.output && this.output.map(v => v.toJSON()),
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync({fnUpdateReferenceAsync}) {
            if (this.meta) {await this.meta.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.text) {await this.text.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.contained) {await async.each(this.contained, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.extension) {await async.each(this.extension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.modifierExtension) {await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.identifier) {await async.each(this.identifier, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.basedOn) {await async.each(this.basedOn, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.groupIdentifier) {await this.groupIdentifier.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.partOf) {await async.each(this.partOf, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.statusReason) {await this.statusReason.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.businessStatus) {await this.businessStatus.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.code) {await this.code.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.focus) {await this.focus.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.for) {await this.for.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.encounter) {await this.encounter.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.executionPeriod) {await this.executionPeriod.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.requester) {await this.requester.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.performerType) {await async.each(this.performerType, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.owner) {await this.owner.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.location) {await this.location.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.reasonCode) {await this.reasonCode.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.reasonReference) {await this.reasonReference.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.insurance) {await async.each(this.insurance, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.note) {await async.each(this.note, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.relevantHistory) {await async.each(this.relevantHistory, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.restriction) {await this.restriction.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.input) {await async.each(this.input, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.output) {await async.each(this.output, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal() {
        const {removeNull} = require('../../../../utils/nullRemover');
        const json = {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSONInternal(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSONInternal(),
            contained: this.contained && this.contained.map(v => v.toJSONInternal()),
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            identifier: this.identifier && this.identifier.map(v => v.toJSONInternal()),
            instantiatesCanonical: this.instantiatesCanonical,
            instantiatesUri: this.instantiatesUri,
            basedOn: this.basedOn && this.basedOn.map(v => v.toJSONInternal()),
            groupIdentifier: this.groupIdentifier && this.groupIdentifier.toJSONInternal(),
            partOf: this.partOf && this.partOf.map(v => v.toJSONInternal()),
            status: this.status,
            statusReason: this.statusReason && this.statusReason.toJSONInternal(),
            businessStatus: this.businessStatus && this.businessStatus.toJSONInternal(),
            intent: this.intent,
            priority: this.priority,
            code: this.code && this.code.toJSONInternal(),
            description: this.description,
            focus: this.focus && this.focus.toJSONInternal(),
            for: this.for && this.for.toJSONInternal(),
            encounter: this.encounter && this.encounter.toJSONInternal(),
            executionPeriod: this.executionPeriod && this.executionPeriod.toJSONInternal(),
            authoredOn: this.authoredOn,
            lastModified: this.lastModified,
            requester: this.requester && this.requester.toJSONInternal(),
            performerType: this.performerType && this.performerType.map(v => v.toJSONInternal()),
            owner: this.owner && this.owner.toJSONInternal(),
            location: this.location && this.location.toJSONInternal(),
            reasonCode: this.reasonCode && this.reasonCode.toJSONInternal(),
            reasonReference: this.reasonReference && this.reasonReference.toJSONInternal(),
            insurance: this.insurance && this.insurance.map(v => v.toJSONInternal()),
            note: this.note && this.note.map(v => v.toJSONInternal()),
            relevantHistory: this.relevantHistory && this.relevantHistory.map(v => v.toJSONInternal()),
            restriction: this.restriction && this.restriction.toJSONInternal(),
            input: this.input && this.input.map(v => v.toJSONInternal()),
            output: this.output && this.output.map(v => v.toJSONInternal()),
        };


        if (this._access) {
            json._access = this._access;
        }
        if (this._sourceAssigningAuthority) {
            json._sourceAssigningAuthority = this._sourceAssigningAuthority;
        }
        if (this._uuid) {
            json._uuid = this._uuid;
        }
        if (this._sourceId) {
            json._sourceId = this._sourceId;
        }

        return removeNull(json);
    }
}

module.exports = Task;
