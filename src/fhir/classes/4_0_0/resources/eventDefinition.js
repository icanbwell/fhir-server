/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

/**
EventDefinition
    The EventDefinition resource provides a reusable description of when a
    particular event can occur.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class EventDefinition {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {uri|undefined} [url],
     * @param {Identifier[]|undefined} [identifier],
     * @param {String|undefined} [version],
     * @param {String|undefined} [name],
     * @param {String|undefined} [title],
     * @param {String|undefined} [subtitle],
     * @param {code} status,
     * @param {Boolean|undefined} [experimental],
     * @param {CodeableConcept|undefined} [subjectCodeableConcept],
     * @param {Reference|undefined} [subjectReference],
     * @param {dateTime|undefined} [date],
     * @param {String|undefined} [publisher],
     * @param {ContactDetail[]|undefined} [contact],
     * @param {markdown|undefined} [description],
     * @param {UsageContext[]|undefined} [useContext],
     * @param {CodeableConcept[]|undefined} [jurisdiction],
     * @param {markdown|undefined} [purpose],
     * @param {String|undefined} [usage],
     * @param {markdown|undefined} [copyright],
     * @param {date|undefined} [approvalDate],
     * @param {date|undefined} [lastReviewDate],
     * @param {Period|undefined} [effectivePeriod],
     * @param {CodeableConcept[]|undefined} [topic],
     * @param {ContactDetail[]|undefined} [author],
     * @param {ContactDetail[]|undefined} [editor],
     * @param {ContactDetail[]|undefined} [reviewer],
     * @param {ContactDetail[]|undefined} [endorser],
     * @param {RelatedArtifact[]|undefined} [relatedArtifact],
     * @param {TriggerDefinition[]} trigger,
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            identifier,
            version,
            name,
            title,
            subtitle,
            status,
            experimental,
            subjectCodeableConcept,
            subjectReference,
            date,
            publisher,
            contact,
            description,
            useContext,
            jurisdiction,
            purpose,
            usage,
            copyright,
            approvalDate,
            lastReviewDate,
            effectivePeriod,
            topic,
            author,
            editor,
            reviewer,
            endorser,
            relatedArtifact,
            trigger,
        }
    ) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.contained = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description An absolute URI that is used to identify this event definition when it is
    referenced in a specification, model, design or an instance; also called its
    canonical identifier. This SHOULD be globally unique and SHOULD be a literal
    address at which at which an authoritative instance of this event definition
    is (or will be) published. This URL can be the target of a canonical
    reference. It SHALL remain the same when the event definition is stored on
    different servers.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'url', {
            enumerable: true,
            get: () => this.__data.url,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.url = valueProvided;
            }
        });

        /**
         * @description A formal identifier that is used to identify this event definition when it is
    represented in other formats, or referenced in a specification, model, design
    or an instance.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(valueProvided) ? valueProvided.map(v => new Identifier(v)) : [new Identifier(valueProvided)];
            }
        });

        /**
         * @description The identifier that is used to identify this version of the event definition
    when it is referenced in a specification, model, design or instance. This is
    an arbitrary value managed by the event definition author and is not expected
    to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if
    a managed version is not available. There is also no expectation that versions
    can be placed in a lexicographical sequence.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'version', {
            enumerable: true,
            get: () => this.__data.version,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.version = valueProvided;
            }
        });

        /**
         * @description A natural language name identifying the event definition. This name should be
    usable as an identifier for the module by machine processing applications such
    as code generation.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'name', {
            enumerable: true,
            get: () => this.__data.name,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.name = valueProvided;
            }
        });

        /**
         * @description A short, descriptive, user-friendly title for the event definition.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'title', {
            enumerable: true,
            get: () => this.__data.title,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.title = valueProvided;
            }
        });

        /**
         * @description An explanatory or alternate title for the event definition giving additional
    information about its content.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'subtitle', {
            enumerable: true,
            get: () => this.__data.subtitle,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.subtitle = valueProvided;
            }
        });

        /**
         * @description The status of this event definition. Enables tracking the life-cycle of the
    content.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description A Boolean value to indicate that this event definition is authored for testing
    purposes (or education/evaluation/marketing) and is not intended to be used
    for genuine usage.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'experimental', {
            enumerable: true,
            get: () => this.__data.experimental,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.experimental = valueProvided;
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'subjectCodeableConcept', {
            enumerable: true,
            get: () => this.__data.subjectCodeableConcept,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.subjectCodeableConcept = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'subjectReference', {
            enumerable: true,
            get: () => this.__data.subjectReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.subjectReference = new Reference(valueProvided);
            }
        });

        /**
         * @description The date  (and optionally time) when the event definition was published. The
    date must change when the business version changes and it must change if the
    status code changes. In addition, it should change when the substantive
    content of the event definition changes.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'date', {
            enumerable: true,
            get: () => this.__data.date,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.date = valueProvided;
            }
        });

        /**
         * @description The name of the organization or individual that published the event
    definition.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'publisher', {
            enumerable: true,
            get: () => this.__data.publisher,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.publisher = valueProvided;
            }
        });

        /**
         * @description Contact details to assist a user in finding and communicating with the
    publisher.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'contact', {
            enumerable: true,
            get: () => this.__data.contact,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.contact = Array.isArray(valueProvided) ? valueProvided.map(v => new ContactDetail(v)) : [new ContactDetail(valueProvided)];
            }
        });

        /**
         * @description A free text natural language description of the event definition from a
    consumer's perspective.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description The content was developed with a focus and intent of supporting the contexts
    that are listed. These contexts may be general categories (gender, age, ...)
    or may be references to specific programs (insurance plans, studies, ...) and
    may be used to assist with indexing and searching for appropriate event
    definition instances.
         * @property {UsageContext[]|undefined}
        */
        Object.defineProperty(this, 'useContext', {
            enumerable: true,
            get: () => this.__data.useContext,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let UsageContext = require('../complex_types/usageContext.js');
                this.__data.useContext = Array.isArray(valueProvided) ? valueProvided.map(v => new UsageContext(v)) : [new UsageContext(valueProvided)];
            }
        });

        /**
         * @description A legal or geographic region in which the event definition is intended to be
    used.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'jurisdiction', {
            enumerable: true,
            get: () => this.__data.jurisdiction,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.jurisdiction = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Explanation of why this event definition is needed and why it has been
    designed as it has.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'purpose', {
            enumerable: true,
            get: () => this.__data.purpose,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.purpose = valueProvided;
            }
        });

        /**
         * @description A detailed description of how the event definition is used from a clinical
    perspective.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'usage', {
            enumerable: true,
            get: () => this.__data.usage,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.usage = valueProvided;
            }
        });

        /**
         * @description A copyright statement relating to the event definition and/or its contents.
    Copyright statements are generally legal restrictions on the use and
    publishing of the event definition.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'copyright', {
            enumerable: true,
            get: () => this.__data.copyright,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.copyright = valueProvided;
            }
        });

        /**
         * @description The date on which the resource content was approved by the publisher. Approval
    happens once when the content is officially approved for usage.
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'approvalDate', {
            enumerable: true,
            get: () => this.__data.approvalDate,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.approvalDate = valueProvided;
            }
        });

        /**
         * @description The date on which the resource content was last reviewed. Review happens
    periodically after approval but does not change the original approval date.
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'lastReviewDate', {
            enumerable: true,
            get: () => this.__data.lastReviewDate,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.lastReviewDate = valueProvided;
            }
        });

        /**
         * @description The period during which the event definition content was or is planned to be
    in active use.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'effectivePeriod', {
            enumerable: true,
            get: () => this.__data.effectivePeriod,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.effectivePeriod = new Period(valueProvided);
            }
        });

        /**
         * @description Descriptive topics related to the module. Topics provide a high-level
    categorization of the module that can be useful for filtering and searching.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'topic', {
            enumerable: true,
            get: () => this.__data.topic,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.topic = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description An individiual or organization primarily involved in the creation and
    maintenance of the content.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'author', {
            enumerable: true,
            get: () => this.__data.author,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.author = Array.isArray(valueProvided) ? valueProvided.map(v => new ContactDetail(v)) : [new ContactDetail(valueProvided)];
            }
        });

        /**
         * @description An individual or organization primarily responsible for internal coherence of
    the content.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'editor', {
            enumerable: true,
            get: () => this.__data.editor,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.editor = Array.isArray(valueProvided) ? valueProvided.map(v => new ContactDetail(v)) : [new ContactDetail(valueProvided)];
            }
        });

        /**
         * @description An individual or organization primarily responsible for review of some aspect
    of the content.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'reviewer', {
            enumerable: true,
            get: () => this.__data.reviewer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.reviewer = Array.isArray(valueProvided) ? valueProvided.map(v => new ContactDetail(v)) : [new ContactDetail(valueProvided)];
            }
        });

        /**
         * @description An individual or organization responsible for officially endorsing the content
    for use in some setting.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'endorser', {
            enumerable: true,
            get: () => this.__data.endorser,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.endorser = Array.isArray(valueProvided) ? valueProvided.map(v => new ContactDetail(v)) : [new ContactDetail(valueProvided)];
            }
        });

        /**
         * @description Related resources such as additional documentation, justification, or
    bibliographic references.
         * @property {RelatedArtifact[]|undefined}
        */
        Object.defineProperty(this, 'relatedArtifact', {
            enumerable: true,
            get: () => this.__data.relatedArtifact,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let RelatedArtifact = require('../complex_types/relatedArtifact.js');
                this.__data.relatedArtifact = Array.isArray(valueProvided) ? valueProvided.map(v => new RelatedArtifact(v)) : [new RelatedArtifact(valueProvided)];
            }
        });

        /**
         * @description The trigger element defines when the event occurs. If more than one trigger
    condition is specified, the event fires whenever any one of the trigger
    conditions is met.
         * @property {TriggerDefinition[]}
        */
        Object.defineProperty(this, 'trigger', {
            enumerable: true,
            get: () => this.__data.trigger,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let TriggerDefinition = require('../complex_types/triggerDefinition.js');
                this.__data.trigger = Array.isArray(valueProvided) ? valueProvided.map(v => new TriggerDefinition(v)) : [new TriggerDefinition(valueProvided)];
            }
        });

        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            identifier,
            version,
            name,
            title,
            subtitle,
            status,
            experimental,
            subjectCodeableConcept,
            subjectReference,
            date,
            publisher,
            contact,
            description,
            useContext,
            jurisdiction,
            purpose,
            usage,
            copyright,
            approvalDate,
            lastReviewDate,
            effectivePeriod,
            topic,
            author,
            editor,
            reviewer,
            endorser,
            relatedArtifact,
            trigger,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'EventDefinition',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'EventDefinition';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            url: this.url,
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            version: this.version,
            name: this.name,
            title: this.title,
            subtitle: this.subtitle,
            status: this.status,
            experimental: this.experimental,
            subjectCodeableConcept: this.subjectCodeableConcept && this.subjectCodeableConcept.toJSON(),
            subjectReference: this.subjectReference && this.subjectReference.toJSON(),
            date: this.date,
            publisher: this.publisher,
            contact: this.contact && this.contact.map(v => v.toJSON()),
            description: this.description,
            useContext: this.useContext && this.useContext.map(v => v.toJSON()),
            jurisdiction: this.jurisdiction && this.jurisdiction.map(v => v.toJSON()),
            purpose: this.purpose,
            usage: this.usage,
            copyright: this.copyright,
            approvalDate: this.approvalDate,
            lastReviewDate: this.lastReviewDate,
            effectivePeriod: this.effectivePeriod && this.effectivePeriod.toJSON(),
            topic: this.topic && this.topic.map(v => v.toJSON()),
            author: this.author && this.author.map(v => v.toJSON()),
            editor: this.editor && this.editor.map(v => v.toJSON()),
            reviewer: this.reviewer && this.reviewer.map(v => v.toJSON()),
            endorser: this.endorser && this.endorser.map(v => v.toJSON()),
            relatedArtifact: this.relatedArtifact && this.relatedArtifact.map(v => v.toJSON()),
            trigger: this.trigger && this.trigger.map(v => v.toJSON()),
        };
    }
}

module.exports = EventDefinition;
