/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');


/**
MedicationDispense
    Indicates that a medication product is to be or has been dispensed for a named
    person/patient.  This includes a description of the medication product
    (supply) provided and the instructions for administering the medication.  The
    medication dispense is the result of a pharmacy system responding to a
    medication order.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class MedicationDispense extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {Reference[]|undefined} [partOf],
     * @param {code} status,
     * @param {CodeableConcept|undefined} [statusReasonCodeableConcept],
     * @param {Reference|undefined} [statusReasonReference],
     * @param {CodeableConcept|undefined} [category],
     * @param {CodeableConcept|undefined} [medicationCodeableConcept],
     * @param {Reference|undefined} [medicationReference],
     * @param {Reference|undefined} [subject],
     * @param {Reference|undefined} [context],
     * @param {Reference[]|undefined} [supportingInformation],
     * @param {MedicationDispensePerformer[]|undefined} [performer],
     * @param {Reference|undefined} [location],
     * @param {Reference[]|undefined} [authorizingPrescription],
     * @param {CodeableConcept|undefined} [type],
     * @param {Quantity|undefined} [quantity],
     * @param {Quantity|undefined} [daysSupply],
     * @param {dateTime|undefined} [whenPrepared],
     * @param {dateTime|undefined} [whenHandedOver],
     * @param {Reference|undefined} [destination],
     * @param {Reference[]|undefined} [receiver],
     * @param {Annotation[]|undefined} [note],
     * @param {Dosage[]|undefined} [dosageInstruction],
     * @param {MedicationDispenseSubstitution|undefined} [substitution],
     * @param {Reference[]|undefined} [detectedIssue],
     * @param {Reference[]|undefined} [eventHistory],
     * @param {Object|undefined} [_access]
     * @param {Object|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            partOf,
            status,
            statusReasonCodeableConcept,
            statusReasonReference,
            category,
            medicationCodeableConcept,
            medicationReference,
            subject,
            context,
            supportingInformation,
            performer,
            location,
            authorizingPrescription,
            type,
            quantity,
            daysSupply,
            whenPrepared,
            whenHandedOver,
            destination,
            receiver,
            note,
            dosageInstruction,
            substitution,
            detectedIssue,
            eventHistory,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.meta = undefined;
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.implicitRules = undefined;
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.language = undefined;
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.text = undefined;
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.contained = undefined;
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                const {getResource} = require('../../../../operations/common/getResource');
                if (Array.isArray(valueProvided)) {
                    this.__data.contained = valueProvided.filter(v => v).map(v => {
                        const ResourceCreator = getResource('4_0_0', v.resourceType);
                        return new ResourceCreator(v);
                    });
                } else {
                const ResourceCreator = getResource('4_0_0', valueProvided.resourceType);
                this.__data.contained = [new ResourceCreator(valueProvided)];
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description Identifiers associated with this Medication Dispense that are defined by
    business processes and/or used to refer to it when a direct URL reference to
    the resource itself is not appropriate. They are business identifiers assigned
    to this resource by the performer or other systems and remain constant as the
    resource is updated and propagates from server to server.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.identifier = undefined;
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Identifier(v)) : [new Identifier(valueProvided)];
            }
        });

        /**
         * @description The procedure that trigger the dispense.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'partOf', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.partOf,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.partOf = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.partOf = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description A code specifying the state of the set of dispense events.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.status = undefined;
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'statusReasonCodeableConcept', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.statusReasonCodeableConcept,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.statusReasonCodeableConcept = undefined;
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.statusReasonCodeableConcept = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'statusReasonReference', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.statusReasonReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.statusReasonReference = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.statusReasonReference = new Reference(valueProvided);
            }
        });

        /**
         * @description Indicates the type of medication dispense (for example, where the medication
    is expected to be consumed or administered (i.e. inpatient or outpatient)).
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'category', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.category,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.category = undefined;
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.category = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'medicationCodeableConcept', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.medicationCodeableConcept,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.medicationCodeableConcept = undefined;
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.medicationCodeableConcept = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'medicationReference', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.medicationReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.medicationReference = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.medicationReference = new Reference(valueProvided);
            }
        });

        /**
         * @description A link to a resource representing the person or the group to whom the
    medication will be given.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'subject', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.subject,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.subject = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.subject = new Reference(valueProvided);
            }
        });

        /**
         * @description The encounter or episode of care that establishes the context for this event.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'context', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.context,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.context = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.context = new Reference(valueProvided);
            }
        });

        /**
         * @description Additional information that supports the medication being dispensed.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'supportingInformation', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.supportingInformation,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.supportingInformation = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.supportingInformation = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description Indicates who or what performed the event.
         * @property {MedicationDispensePerformer[]|undefined}
        */
        Object.defineProperty(this, 'performer', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.performer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.performer = undefined;
                    return;
                }
                let MedicationDispensePerformer = require('../backbone_elements/medicationDispensePerformer.js');
                this.__data.performer = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new MedicationDispensePerformer(v)) : [new MedicationDispensePerformer(valueProvided)];
            }
        });

        /**
         * @description The principal physical location where the dispense was performed.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'location', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.location,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.location = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.location = new Reference(valueProvided);
            }
        });

        /**
         * @description Indicates the medication order that is being dispensed against.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'authorizingPrescription', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.authorizingPrescription,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.authorizingPrescription = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.authorizingPrescription = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description Indicates the type of dispensing event that is performed. For example, Trial
    Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'type', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.type = undefined;
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.type = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description The amount of medication that has been dispensed. Includes unit of measure.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'quantity', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.quantity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.quantity = undefined;
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.quantity = new Quantity(valueProvided);
            }
        });

        /**
         * @description The amount of medication expressed as a timing amount.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'daysSupply', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.daysSupply,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.daysSupply = undefined;
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.daysSupply = new Quantity(valueProvided);
            }
        });

        /**
         * @description The time when the dispensed product was packaged and reviewed.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'whenPrepared', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.whenPrepared,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.whenPrepared = undefined;
                    return;
                }
                this.__data.whenPrepared = valueProvided;
            }
        });

        /**
         * @description The time the dispensed product was provided to the patient or their
    representative.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'whenHandedOver', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.whenHandedOver,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.whenHandedOver = undefined;
                    return;
                }
                this.__data.whenHandedOver = valueProvided;
            }
        });

        /**
         * @description Identification of the facility/location where the medication was shipped to,
    as part of the dispense event.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'destination', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.destination,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.destination = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.destination = new Reference(valueProvided);
            }
        });

        /**
         * @description Identifies the person who picked up the medication.  This will usually be a
    patient or their caregiver, but some cases exist where it can be a healthcare
    professional.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'receiver', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.receiver,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.receiver = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.receiver = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description Extra information about the dispense that could not be conveyed in the other
    attributes.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.note,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.note = undefined;
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.note = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Annotation(v)) : [new Annotation(valueProvided)];
            }
        });

        /**
         * @description Indicates how the medication is to be used by the patient.
         * @property {Dosage[]|undefined}
        */
        Object.defineProperty(this, 'dosageInstruction', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.dosageInstruction,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.dosageInstruction = undefined;
                    return;
                }
                let Dosage = require('../backbone_elements/dosage.js');
                this.__data.dosageInstruction = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Dosage(v)) : [new Dosage(valueProvided)];
            }
        });

        /**
         * @description Indicates whether or not substitution was made as part of the dispense.  In
    some cases, substitution will be expected but does not happen, in other cases
    substitution is not expected but does happen.  This block explains what
    substitution did or did not happen and why.  If nothing is specified,
    substitution was not done.
         * @property {MedicationDispenseSubstitution|undefined}
        */
        Object.defineProperty(this, 'substitution', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.substitution,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.substitution = undefined;
                    return;
                }
                let MedicationDispenseSubstitution = require('../backbone_elements/medicationDispenseSubstitution.js');
                this.__data.substitution = new MedicationDispenseSubstitution(valueProvided);
            }
        });

        /**
         * @description Indicates an actual or potential clinical issue with or between one or more
    active or proposed clinical actions for a patient; e.g. drug-drug interaction,
    duplicate therapy, dosage alert etc.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'detectedIssue', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.detectedIssue,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.detectedIssue = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.detectedIssue = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description A summary of the events of interest that have occurred, such as when the
    dispense was verified.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'eventHistory', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.eventHistory,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.eventHistory = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.eventHistory = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });


        /**
         * @description _access
         * @property {Object|undefined}
         */
        Object.defineProperty(this, '_access', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._access,
            set: valueProvided => {
                this.__data._access = valueProvided;
            }
        });
        /**
         * @description _sourceAssigningAuthority
         * @property {Object|undefined}
         */
        Object.defineProperty(this, '_sourceAssigningAuthority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceAssigningAuthority,
            set: valueProvided => {
                this.__data._sourceAssigningAuthority = valueProvided;
            }
        });
        /**
         * @description _uuid
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_uuid', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._uuid,
            set: valueProvided => {
                this.__data._uuid = valueProvided;
            }
        });
        /**
         * @description _sourceId
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceId,
            set: valueProvided => {
                this.__data._sourceId = valueProvided;
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            partOf,
            status,
            statusReasonCodeableConcept,
            statusReasonReference,
            category,
            medicationCodeableConcept,
            medicationReference,
            subject,
            context,
            supportingInformation,
            performer,
            location,
            authorizingPrescription,
            type,
            quantity,
            daysSupply,
            whenPrepared,
            whenHandedOver,
            destination,
            receiver,
            note,
            dosageInstruction,
            substitution,
            detectedIssue,
            eventHistory,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'MedicationDispense',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    static get resourceType() {
        return 'MedicationDispense';
    }

    /**
     * @description Creates a blank new resource
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {Reference[]|undefined} [partOf],
     * @param {code} status,
     * @param {CodeableConcept|undefined} [statusReasonCodeableConcept],
     * @param {Reference|undefined} [statusReasonReference],
     * @param {CodeableConcept|undefined} [category],
     * @param {CodeableConcept|undefined} [medicationCodeableConcept],
     * @param {Reference|undefined} [medicationReference],
     * @param {Reference|undefined} [subject],
     * @param {Reference|undefined} [context],
     * @param {Reference[]|undefined} [supportingInformation],
     * @param {MedicationDispensePerformer[]|undefined} [performer],
     * @param {Reference|undefined} [location],
     * @param {Reference[]|undefined} [authorizingPrescription],
     * @param {CodeableConcept|undefined} [type],
     * @param {Quantity|undefined} [quantity],
     * @param {Quantity|undefined} [daysSupply],
     * @param {dateTime|undefined} [whenPrepared],
     * @param {dateTime|undefined} [whenHandedOver],
     * @param {Reference|undefined} [destination],
     * @param {Reference[]|undefined} [receiver],
     * @param {Annotation[]|undefined} [note],
     * @param {Dosage[]|undefined} [dosageInstruction],
     * @param {MedicationDispenseSubstitution|undefined} [substitution],
     * @param {Reference[]|undefined} [detectedIssue],
     * @param {Reference[]|undefined} [eventHistory],
     * @param {Object|undefined} [_access]
     * @param {Object|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
     * @returns {MedicationDispense}
    */
    create(
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            partOf,
            status,
            statusReasonCodeableConcept,
            statusReasonReference,
            category,
            medicationCodeableConcept,
            medicationReference,
            subject,
            context,
            supportingInformation,
            performer,
            location,
            authorizingPrescription,
            type,
            quantity,
            daysSupply,
            whenPrepared,
            whenHandedOver,
            destination,
            receiver,
            note,
            dosageInstruction,
            substitution,
            detectedIssue,
            eventHistory,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        }
    ) {
        return new MedicationDispense({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            partOf,
            status,
            statusReasonCodeableConcept,
            statusReasonReference,
            category,
            medicationCodeableConcept,
            medicationReference,
            subject,
            context,
            supportingInformation,
            performer,
            location,
            authorizingPrescription,
            type,
            quantity,
            daysSupply,
            whenPrepared,
            whenHandedOver,
            destination,
            receiver,
            note,
            dosageInstruction,
            substitution,
            detectedIssue,
            eventHistory,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {MedicationDispense}
    */
    clone() {
        return new MedicationDispense(this.toJSONInternal());
    }


    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            partOf: this.partOf && this.partOf.map(v => v.toJSON()),
            status: this.status,
            statusReasonCodeableConcept: this.statusReasonCodeableConcept && this.statusReasonCodeableConcept.toJSON(),
            statusReasonReference: this.statusReasonReference && this.statusReasonReference.toJSON(),
            category: this.category && this.category.toJSON(),
            medicationCodeableConcept: this.medicationCodeableConcept && this.medicationCodeableConcept.toJSON(),
            medicationReference: this.medicationReference && this.medicationReference.toJSON(),
            subject: this.subject && this.subject.toJSON(),
            context: this.context && this.context.toJSON(),
            supportingInformation: this.supportingInformation && this.supportingInformation.map(v => v.toJSON()),
            performer: this.performer && this.performer.map(v => v.toJSON()),
            location: this.location && this.location.toJSON(),
            authorizingPrescription: this.authorizingPrescription && this.authorizingPrescription.map(v => v.toJSON()),
            type: this.type && this.type.toJSON(),
            quantity: this.quantity && this.quantity.toJSON(),
            daysSupply: this.daysSupply && this.daysSupply.toJSON(),
            whenPrepared: this.whenPrepared,
            whenHandedOver: this.whenHandedOver,
            destination: this.destination && this.destination.toJSON(),
            receiver: this.receiver && this.receiver.map(v => v.toJSON()),
            note: this.note && this.note.map(v => v.toJSON()),
            dosageInstruction: this.dosageInstruction && this.dosageInstruction.map(v => v.toJSON()),
            substitution: this.substitution && this.substitution.toJSON(),
            detectedIssue: this.detectedIssue && this.detectedIssue.map(v => v.toJSON()),
            eventHistory: this.eventHistory && this.eventHistory.map(v => v.toJSON()),
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Reference} fnUpdateReference
     * @return {void}
     */
    updateReferences({fnUpdateReference}) {
            if (this.meta) {this.meta.updateReferences({fnUpdateReference});}
            if (this.text) {this.text.updateReferences({fnUpdateReference});}
            if (this.contained) {this.contained.forEach(v => v.updateReferences({fnUpdateReference}));}
            if (this.extension) {this.extension.forEach(v => v.updateReferences({fnUpdateReference}));}
            if (this.modifierExtension) {this.modifierExtension.forEach(v => v.updateReferences({fnUpdateReference}));}
            if (this.identifier) {this.identifier.forEach(v => v.updateReferences({fnUpdateReference}));}
            if (this.partOf) {this.partOf.forEach(v => v.updateReferences({fnUpdateReference}));}
            if (this.statusReasonCodeableConcept) {this.statusReasonCodeableConcept.updateReferences({fnUpdateReference});}
            if (this.statusReasonReference) {this.statusReasonReference.updateReferences({fnUpdateReference});}
            if (this.category) {this.category.updateReferences({fnUpdateReference});}
            if (this.medicationCodeableConcept) {this.medicationCodeableConcept.updateReferences({fnUpdateReference});}
            if (this.medicationReference) {this.medicationReference.updateReferences({fnUpdateReference});}
            if (this.subject) {this.subject.updateReferences({fnUpdateReference});}
            if (this.context) {this.context.updateReferences({fnUpdateReference});}
            if (this.supportingInformation) {this.supportingInformation.forEach(v => v.updateReferences({fnUpdateReference}));}
            if (this.performer) {this.performer.forEach(v => v.updateReferences({fnUpdateReference}));}
            if (this.location) {this.location.updateReferences({fnUpdateReference});}
            if (this.authorizingPrescription) {this.authorizingPrescription.forEach(v => v.updateReferences({fnUpdateReference}));}
            if (this.type) {this.type.updateReferences({fnUpdateReference});}
            if (this.quantity) {this.quantity.updateReferences({fnUpdateReference});}
            if (this.daysSupply) {this.daysSupply.updateReferences({fnUpdateReference});}
            if (this.destination) {this.destination.updateReferences({fnUpdateReference});}
            if (this.receiver) {this.receiver.forEach(v => v.updateReferences({fnUpdateReference}));}
            if (this.note) {this.note.forEach(v => v.updateReferences({fnUpdateReference}));}
            if (this.dosageInstruction) {this.dosageInstruction.forEach(v => v.updateReferences({fnUpdateReference}));}
            if (this.substitution) {this.substitution.updateReferences({fnUpdateReference});}
            if (this.detectedIssue) {this.detectedIssue.forEach(v => v.updateReferences({fnUpdateReference}));}
            if (this.eventHistory) {this.eventHistory.forEach(v => v.updateReferences({fnUpdateReference}));}
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal() {
        const {removeNull} = require('../../../../utils/nullRemover');
        const json = this.toJSON();

        if (this._access) {
            json._access = this._access;
        }
        if (this._sourceAssigningAuthority) {
            json._sourceAssigningAuthority = this._sourceAssigningAuthority;
        }
        if (this._uuid) {
            json._uuid = this._uuid;
        }
        if (this._sourceId) {
            json._sourceId = this._sourceId;
        }

        return removeNull(json);
    }
}

module.exports = MedicationDispense;
