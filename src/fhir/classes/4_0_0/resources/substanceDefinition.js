

// This file is auto-generated by generate_classes so do not edit manually

const { removeNull } = require('../../../../utils/nullRemover');

const Resource = require('../resources/resource');
const async = require('async');

/**
SubstanceDefinition
    The detailed description of a substance, typically at a level beyond what is
    used for prescribing.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class SubstanceDefinition extends Resource {
    /**
     * @param {String|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {String|undefined} [version],
     * @param {CodeableConcept|undefined} [status],
     * @param {CodeableConcept[]|undefined} [classification],
     * @param {CodeableConcept|undefined} [domain],
     * @param {CodeableConcept[]|undefined} [grade],
     * @param {markdown|undefined} [description],
     * @param {Reference[]|undefined} [informationSource],
     * @param {Annotation[]|undefined} [note],
     * @param {Reference[]|undefined} [manufacturer],
     * @param {Reference[]|undefined} [supplier],
     * @param {SubstanceDefinitionMoiety[]|undefined} [moiety],
     * @param {SubstanceDefinitionProperty[]|undefined} [property],
     * @param {SubstanceDefinitionMolecularWeight[]|undefined} [molecularWeight],
     * @param {SubstanceDefinitionStructure|undefined} [structure],
     * @param {SubstanceDefinitionCode[]|undefined} [code],
     * @param {SubstanceDefinitionName[]|undefined} [name],
     * @param {SubstanceDefinitionRelationship[]|undefined} [relationship],
     * @param {SubstanceDefinitionSourceMaterial|undefined} [sourceMaterial],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
    */
    constructor (
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            version,
            status,
            classification,
            domain,
            grade,
            description,
            informationSource,
            note,
            manufacturer,
            supplier,
            moiety,
            property,
            molecularWeight,
            structure,
            code,
            name,
            relationship,
            sourceMaterial,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.meta = undefined;
                    return;
                }
                const Meta = require('../complex_types/meta.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.meta = FhirResourceCreator.create(valueProvided, Meta);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.implicitRules = undefined;
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.language = undefined;
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.text = undefined;
                    return;
                }
                const Narrative = require('../complex_types/narrative.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.text = FhirResourceCreator.create(valueProvided, Narrative);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.contained = undefined;
                    return;
                }
                const ResourceContainer = require('../simple_types/resourceContainer.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.contained = FhirResourceCreator.createArray(valueProvided);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.extension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.modifierExtension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description Identifier by which this substance is known.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.identifier = undefined;
                    return;
                }
                const Identifier = require('../complex_types/identifier.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.identifier = FhirResourceCreator.createArray(valueProvided, Identifier);
            }
        });

        /**
         * @description A business level version identifier of the substance.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'version', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.version,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.version = undefined;
                    return;
                }
                this.__data.version = valueProvided;
            }
        });

        /**
         * @description Status of substance within the catalogue e.g. active, retired.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.status = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.status = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description A high level categorization, e.g. polymer or nucleic acid, or food, chemical,
    biological, or a lower level such as the general types of polymer (linear or
    branch chain) or type of impurity (process related or contaminant).
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'classification', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.classification,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.classification = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.classification = FhirResourceCreator.createArray(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description If the substance applies to human or veterinary use.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'domain', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.domain,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.domain = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.domain = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description The quality standard, established benchmark, to which substance complies (e.g.
    USP/NF, Ph. Eur, JP, BP, Company Standard).
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'grade', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.grade,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.grade = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.grade = FhirResourceCreator.createArray(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Textual description of the substance.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'description', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.description = undefined;
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description Supporting literature.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'informationSource', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.informationSource,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.informationSource = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.informationSource = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description Textual comment about the substance's catalogue or registry record.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.note,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.note = undefined;
                    return;
                }
                const Annotation = require('../complex_types/annotation.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.note = FhirResourceCreator.createArray(valueProvided, Annotation);
            }
        });

        /**
         * @description The entity that creates, makes, produces or fabricates the substance. This is
    a set of potential manufacturers but is not necessarily comprehensive.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'manufacturer', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.manufacturer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.manufacturer = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.manufacturer = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description An entity that is the source for the substance. It may be different from the
    manufacturer. Supplier is synonymous to a distributor.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'supplier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.supplier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.supplier = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.supplier = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description Moiety, for structural modifications.
         * @property {SubstanceDefinitionMoiety[]|undefined}
        */
        Object.defineProperty(this, 'moiety', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.moiety,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.moiety = undefined;
                    return;
                }
                const SubstanceDefinitionMoiety = require('../backbone_elements/substanceDefinitionMoiety.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.moiety = FhirResourceCreator.createArray(valueProvided, SubstanceDefinitionMoiety);
            }
        });

        /**
         * @description General specifications for this substance.
         * @property {SubstanceDefinitionProperty[]|undefined}
        */
        Object.defineProperty(this, 'property', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.property,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.property = undefined;
                    return;
                }
                const SubstanceDefinitionProperty = require('../backbone_elements/substanceDefinitionProperty.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.property = FhirResourceCreator.createArray(valueProvided, SubstanceDefinitionProperty);
            }
        });

        /**
         * @description The molecular weight or weight range (for proteins, polymers or nucleic
    acids).
         * @property {SubstanceDefinitionMolecularWeight[]|undefined}
        */
        Object.defineProperty(this, 'molecularWeight', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.molecularWeight,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.molecularWeight = undefined;
                    return;
                }
                const SubstanceDefinitionMolecularWeight = require('../backbone_elements/substanceDefinitionMolecularWeight.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.molecularWeight = FhirResourceCreator.createArray(valueProvided, SubstanceDefinitionMolecularWeight);
            }
        });

        /**
         * @description Structural information.
         * @property {SubstanceDefinitionStructure|undefined}
        */
        Object.defineProperty(this, 'structure', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.structure,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.structure = undefined;
                    return;
                }
                const SubstanceDefinitionStructure = require('../backbone_elements/substanceDefinitionStructure.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.structure = FhirResourceCreator.create(valueProvided, SubstanceDefinitionStructure);
            }
        });

        /**
         * @description Codes associated with the substance.
         * @property {SubstanceDefinitionCode[]|undefined}
        */
        Object.defineProperty(this, 'code', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.code,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.code = undefined;
                    return;
                }
                const SubstanceDefinitionCode = require('../backbone_elements/substanceDefinitionCode.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.code = FhirResourceCreator.createArray(valueProvided, SubstanceDefinitionCode);
            }
        });

        /**
         * @description Names applicable to this substance.
         * @property {SubstanceDefinitionName[]|undefined}
        */
        Object.defineProperty(this, 'name', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.name,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.name = undefined;
                    return;
                }
                const SubstanceDefinitionName = require('../backbone_elements/substanceDefinitionName.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.name = FhirResourceCreator.createArray(valueProvided, SubstanceDefinitionName);
            }
        });

        /**
         * @description A link between this substance and another, with details of the relationship.
         * @property {SubstanceDefinitionRelationship[]|undefined}
        */
        Object.defineProperty(this, 'relationship', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.relationship,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.relationship = undefined;
                    return;
                }
                const SubstanceDefinitionRelationship = require('../backbone_elements/substanceDefinitionRelationship.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.relationship = FhirResourceCreator.createArray(valueProvided, SubstanceDefinitionRelationship);
            }
        });

        /**
         * @description Material or taxonomic/anatomical source for the substance.
         * @property {SubstanceDefinitionSourceMaterial|undefined}
        */
        Object.defineProperty(this, 'sourceMaterial', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.sourceMaterial,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.sourceMaterial = undefined;
                    return;
                }
                const SubstanceDefinitionSourceMaterial = require('../backbone_elements/substanceDefinitionSourceMaterial.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.sourceMaterial = FhirResourceCreator.create(valueProvided, SubstanceDefinitionSourceMaterial);
            }
        });

        /**
         * @description _access
         * @property {Object|undefined}
         */
        Object.defineProperty(this, '_access', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._access,
            set: valueProvided => {
                this.__data._access = valueProvided;
            }
        });
        /**
         * @description _sourceAssigningAuthority
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceAssigningAuthority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceAssigningAuthority,
            set: valueProvided => {
                this.__data._sourceAssigningAuthority = valueProvided;
            }
        });
        /**
         * @description _uuid
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_uuid', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._uuid,
            set: valueProvided => {
                this.__data._uuid = valueProvided;
            }
        });
        /**
         * @description _sourceId
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceId,
            set: valueProvided => {
                this.__data._sourceId = valueProvided;
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            version,
            status,
            classification,
            domain,
            grade,
            description,
            informationSource,
            note,
            manufacturer,
            supplier,
            moiety,
            property,
            molecularWeight,
            structure,
            code,
            name,
            relationship,
            sourceMaterial,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        });

        /**
         * @description Define a default non-writable resourceType property
         * @property {string|undefined}
         */
        Object.defineProperty(this, 'resourceType', {
            value: 'SubstanceDefinition',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    /**
     * @description Define a default non-writable resourceType property
     * @property {string|undefined}
     */
    static get resourceType () {
        return 'SubstanceDefinition';
    }

    /**
     * @description Creates a blank new resource
     * @param {String|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {String|undefined} [version],
     * @param {CodeableConcept|undefined} [status],
     * @param {CodeableConcept[]|undefined} [classification],
     * @param {CodeableConcept|undefined} [domain],
     * @param {CodeableConcept[]|undefined} [grade],
     * @param {markdown|undefined} [description],
     * @param {Reference[]|undefined} [informationSource],
     * @param {Annotation[]|undefined} [note],
     * @param {Reference[]|undefined} [manufacturer],
     * @param {Reference[]|undefined} [supplier],
     * @param {SubstanceDefinitionMoiety[]|undefined} [moiety],
     * @param {SubstanceDefinitionProperty[]|undefined} [property],
     * @param {SubstanceDefinitionMolecularWeight[]|undefined} [molecularWeight],
     * @param {SubstanceDefinitionStructure|undefined} [structure],
     * @param {SubstanceDefinitionCode[]|undefined} [code],
     * @param {SubstanceDefinitionName[]|undefined} [name],
     * @param {SubstanceDefinitionRelationship[]|undefined} [relationship],
     * @param {SubstanceDefinitionSourceMaterial|undefined} [sourceMaterial],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
     * @returns {SubstanceDefinition}
    */
    create (
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            version,
            status,
            classification,
            domain,
            grade,
            description,
            informationSource,
            note,
            manufacturer,
            supplier,
            moiety,
            property,
            molecularWeight,
            structure,
            code,
            name,
            relationship,
            sourceMaterial,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        }
    ) {
        return new SubstanceDefinition({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            version,
            status,
            classification,
            domain,
            grade,
            description,
            informationSource,
            note,
            manufacturer,
            supplier,
            moiety,
            property,
            molecularWeight,
            structure,
            code,
            name,
            relationship,
            sourceMaterial,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {SubstanceDefinition}
    */
    clone () {
        return new SubstanceDefinition(this.toJSONInternal());
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON () {
        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            version: this.version,
            status: this.status && this.status.toJSON(),
            classification: this.classification && this.classification.map(v => v.toJSON()),
            domain: this.domain && this.domain.toJSON(),
            grade: this.grade && this.grade.map(v => v.toJSON()),
            description: this.description,
            informationSource: this.informationSource && this.informationSource.map(v => v.toJSON()),
            note: this.note && this.note.map(v => v.toJSON()),
            manufacturer: this.manufacturer && this.manufacturer.map(v => v.toJSON()),
            supplier: this.supplier && this.supplier.map(v => v.toJSON()),
            moiety: this.moiety && this.moiety.map(v => v.toJSON()),
            property: this.property && this.property.map(v => v.toJSON()),
            molecularWeight: this.molecularWeight && this.molecularWeight.map(v => v.toJSON()),
            structure: this.structure && this.structure.toJSON(),
            code: this.code && this.code.map(v => v.toJSON()),
            name: this.name && this.name.map(v => v.toJSON()),
            relationship: this.relationship && this.relationship.map(v => v.toJSON()),
            sourceMaterial: this.sourceMaterial && this.sourceMaterial.toJSON()
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync ({ fnUpdateReferenceAsync }) {
            if (this.meta) { await this.meta.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.text) { await this.text.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.contained) { await async.each(this.contained, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.extension) { await async.each(this.extension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.modifierExtension) { await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.identifier) { await async.each(this.identifier, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.status) { await this.status.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.classification) { await async.each(this.classification, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.domain) { await this.domain.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.grade) { await async.each(this.grade, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.informationSource) { await async.each(this.informationSource, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.note) { await async.each(this.note, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.manufacturer) { await async.each(this.manufacturer, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.supplier) { await async.each(this.supplier, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.moiety) { await async.each(this.moiety, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.property) { await async.each(this.property, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.molecularWeight) { await async.each(this.molecularWeight, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.structure) { await this.structure.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.code) { await async.each(this.code, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.name) { await async.each(this.name, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.relationship) { await async.each(this.relationship, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.sourceMaterial) { await this.sourceMaterial.updateReferencesAsync({ fnUpdateReferenceAsync }); }
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal () {
        const json = {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSONInternal(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSONInternal(),
            contained: this.contained && this.contained.map(v => v.toJSONInternal()),
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            identifier: this.identifier && this.identifier.map(v => v.toJSONInternal()),
            version: this.version,
            status: this.status && this.status.toJSONInternal(),
            classification: this.classification && this.classification.map(v => v.toJSONInternal()),
            domain: this.domain && this.domain.toJSONInternal(),
            grade: this.grade && this.grade.map(v => v.toJSONInternal()),
            description: this.description,
            informationSource: this.informationSource && this.informationSource.map(v => v.toJSONInternal()),
            note: this.note && this.note.map(v => v.toJSONInternal()),
            manufacturer: this.manufacturer && this.manufacturer.map(v => v.toJSONInternal()),
            supplier: this.supplier && this.supplier.map(v => v.toJSONInternal()),
            moiety: this.moiety && this.moiety.map(v => v.toJSONInternal()),
            property: this.property && this.property.map(v => v.toJSONInternal()),
            molecularWeight: this.molecularWeight && this.molecularWeight.map(v => v.toJSONInternal()),
            structure: this.structure && this.structure.toJSONInternal(),
            code: this.code && this.code.map(v => v.toJSONInternal()),
            name: this.name && this.name.map(v => v.toJSONInternal()),
            relationship: this.relationship && this.relationship.map(v => v.toJSONInternal()),
            sourceMaterial: this.sourceMaterial && this.sourceMaterial.toJSONInternal()
        };
        if (this._access) {
            json._access = this._access;
        }
        if (this._sourceAssigningAuthority) {
            json._sourceAssigningAuthority = this._sourceAssigningAuthority;
        }
        if (this._uuid) {
            json._uuid = this._uuid;
        }
        if (this._sourceId) {
            json._sourceId = this._sourceId;
        }

        return removeNull(json);
    }
}

module.exports = SubstanceDefinition;
