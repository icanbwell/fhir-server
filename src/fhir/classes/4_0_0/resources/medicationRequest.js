/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');


/**
MedicationRequest
    An order or request for both supply of the medication and the instructions for
    administration of the medication to a patient. The resource is called
    "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder"
    to generalize the use across inpatient and outpatient settings, including care
    plans, etc., and to harmonize with workflow patterns.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class MedicationRequest extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {code} status,
     * @param {CodeableConcept|undefined} [statusReason],
     * @param {code} intent,
     * @param {CodeableConcept[]|undefined} [category],
     * @param {code|undefined} [priority],
     * @param {Boolean|undefined} [doNotPerform],
     * @param {Boolean|undefined} [reportedBoolean],
     * @param {Reference|undefined} [reportedReference],
     * @param {CodeableConcept|undefined} [medicationCodeableConcept],
     * @param {Reference|undefined} [medicationReference],
     * @param {Reference} subject,
     * @param {Reference|undefined} [encounter],
     * @param {Reference[]|undefined} [supportingInformation],
     * @param {dateTime|undefined} [authoredOn],
     * @param {Reference|undefined} [requester],
     * @param {Reference|undefined} [performer],
     * @param {CodeableConcept|undefined} [performerType],
     * @param {Reference|undefined} [recorder],
     * @param {CodeableConcept[]|undefined} [reasonCode],
     * @param {Reference[]|undefined} [reasonReference],
     * @param {canonical[]|undefined} [instantiatesCanonical],
     * @param {uri[]|undefined} [instantiatesUri],
     * @param {Reference[]|undefined} [basedOn],
     * @param {Identifier|undefined} [groupIdentifier],
     * @param {CodeableConcept|undefined} [courseOfTherapyType],
     * @param {Reference[]|undefined} [insurance],
     * @param {Annotation[]|undefined} [note],
     * @param {Dosage[]|undefined} [dosageInstruction],
     * @param {MedicationRequestDispenseRequest|undefined} [dispenseRequest],
     * @param {MedicationRequestSubstitution|undefined} [substitution],
     * @param {Reference|undefined} [priorPrescription],
     * @param {Reference[]|undefined} [detectedIssue],
     * @param {Reference[]|undefined} [eventHistory],
     * @param {Object|undefined} [_access]
     * @param {Object|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            statusReason,
            intent,
            category,
            priority,
            doNotPerform,
            reportedBoolean,
            reportedReference,
            medicationCodeableConcept,
            medicationReference,
            subject,
            encounter,
            supportingInformation,
            authoredOn,
            requester,
            performer,
            performerType,
            recorder,
            reasonCode,
            reasonReference,
            instantiatesCanonical,
            instantiatesUri,
            basedOn,
            groupIdentifier,
            courseOfTherapyType,
            insurance,
            note,
            dosageInstruction,
            dispenseRequest,
            substitution,
            priorPrescription,
            detectedIssue,
            eventHistory,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.meta = undefined;
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.implicitRules = undefined;
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.language = undefined;
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.text = undefined;
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.contained = undefined;
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                const {getResource} = require('../../../../operations/common/getResource');
                if (Array.isArray(valueProvided)) {
                    this.__data.contained = valueProvided.filter(v => v).map(v => {
                        const ResourceCreator = getResource('4_0_0', v.resourceType);
                        return new ResourceCreator(v);
                    });
                } else {
                const ResourceCreator = getResource('4_0_0', valueProvided.resourceType);
                this.__data.contained = [new ResourceCreator(valueProvided)];
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description Identifiers associated with this medication request that are defined by
    business processes and/or used to refer to it when a direct URL reference to
    the resource itself is not appropriate. They are business identifiers assigned
    to this resource by the performer or other systems and remain constant as the
    resource is updated and propagates from server to server.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.identifier = undefined;
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Identifier(v)) : [new Identifier(valueProvided)];
            }
        });

        /**
         * @description A code specifying the current state of the order.  Generally, this will be
    active or completed state.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.status = undefined;
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description Captures the reason for the current state of the MedicationRequest.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'statusReason', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.statusReason,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.statusReason = undefined;
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.statusReason = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description Whether the request is a proposal, plan, or an original order.
         * @property {code}
        */
        Object.defineProperty(this, 'intent', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.intent,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.intent = undefined;
                    return;
                }
                this.__data.intent = valueProvided;
            }
        });

        /**
         * @description Indicates the type of medication request (for example, where the medication is
    expected to be consumed or administered (i.e. inpatient or outpatient)).
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'category', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.category,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.category = undefined;
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.category = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Indicates how quickly the Medication Request should be addressed with respect
    to other requests.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'priority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.priority,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.priority = undefined;
                    return;
                }
                this.__data.priority = valueProvided;
            }
        });

        /**
         * @description If true indicates that the provider is asking for the medication request not
    to occur.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'doNotPerform', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.doNotPerform,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.doNotPerform = undefined;
                    return;
                }
                this.__data.doNotPerform = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'reportedBoolean', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.reportedBoolean,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.reportedBoolean = undefined;
                    return;
                }
                this.__data.reportedBoolean = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'reportedReference', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.reportedReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.reportedReference = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.reportedReference = new Reference(valueProvided);
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'medicationCodeableConcept', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.medicationCodeableConcept,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.medicationCodeableConcept = undefined;
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.medicationCodeableConcept = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'medicationReference', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.medicationReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.medicationReference = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.medicationReference = new Reference(valueProvided);
            }
        });

        /**
         * @description A link to a resource representing the person or set of individuals to whom the
    medication will be given.
         * @property {Reference}
        */
        Object.defineProperty(this, 'subject', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.subject,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.subject = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.subject = new Reference(valueProvided);
            }
        });

        /**
         * @description The Encounter during which this [x] was created or to which the creation of
    this record is tightly associated.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'encounter', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.encounter,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.encounter = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.encounter = new Reference(valueProvided);
            }
        });

        /**
         * @description Include additional information (for example, patient height and weight) that
    supports the ordering of the medication.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'supportingInformation', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.supportingInformation,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.supportingInformation = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.supportingInformation = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description The date (and perhaps time) when the prescription was initially written or
    authored on.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'authoredOn', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.authoredOn,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.authoredOn = undefined;
                    return;
                }
                this.__data.authoredOn = valueProvided;
            }
        });

        /**
         * @description The individual, organization, or device that initiated the request and has
    responsibility for its activation.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'requester', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.requester,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.requester = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.requester = new Reference(valueProvided);
            }
        });

        /**
         * @description The specified desired performer of the medication treatment (e.g. the
    performer of the medication administration).
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'performer', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.performer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.performer = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.performer = new Reference(valueProvided);
            }
        });

        /**
         * @description Indicates the type of performer of the administration of the medication.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'performerType', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.performerType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.performerType = undefined;
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.performerType = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description The person who entered the order on behalf of another individual for example
    in the case of a verbal or a telephone order.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'recorder', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.recorder,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.recorder = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.recorder = new Reference(valueProvided);
            }
        });

        /**
         * @description The reason or the indication for ordering or not ordering the medication.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'reasonCode', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.reasonCode,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.reasonCode = undefined;
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.reasonCode = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Condition or observation that supports why the medication was ordered.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'reasonReference', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.reasonReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.reasonReference = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.reasonReference = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description The URL pointing to a protocol, guideline, orderset, or other definition that
    is adhered to in whole or in part by this MedicationRequest.
         * @property {canonical[]|undefined}
        */
        Object.defineProperty(this, 'instantiatesCanonical', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.instantiatesCanonical,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.instantiatesCanonical = undefined;
                    return;
                }
                this.__data.instantiatesCanonical = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => v) : [valueProvided];
            }
        });

        /**
         * @description The URL pointing to an externally maintained protocol, guideline, orderset or
    other definition that is adhered to in whole or in part by this
    MedicationRequest.
         * @property {uri[]|undefined}
        */
        Object.defineProperty(this, 'instantiatesUri', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.instantiatesUri,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.instantiatesUri = undefined;
                    return;
                }
                this.__data.instantiatesUri = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => v) : [valueProvided];
            }
        });

        /**
         * @description A plan or request that is fulfilled in whole or in part by this medication
    request.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'basedOn', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.basedOn,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.basedOn = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.basedOn = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description A shared identifier common to all requests that were authorized more or less
    simultaneously by a single author, representing the identifier of the
    requisition or prescription.
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'groupIdentifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.groupIdentifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.groupIdentifier = undefined;
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.groupIdentifier = new Identifier(valueProvided);
            }
        });

        /**
         * @description The description of the overall patte3rn of the administration of the
    medication to the patient.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'courseOfTherapyType', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.courseOfTherapyType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.courseOfTherapyType = undefined;
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.courseOfTherapyType = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description Insurance plans, coverage extensions, pre-authorizations and/or pre-
    determinations that may be required for delivering the requested service.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'insurance', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.insurance,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.insurance = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.insurance = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description Extra information about the prescription that could not be conveyed by the
    other attributes.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.note,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.note = undefined;
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.note = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Annotation(v)) : [new Annotation(valueProvided)];
            }
        });

        /**
         * @description Indicates how the medication is to be used by the patient.
         * @property {Dosage[]|undefined}
        */
        Object.defineProperty(this, 'dosageInstruction', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.dosageInstruction,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.dosageInstruction = undefined;
                    return;
                }
                let Dosage = require('../backbone_elements/dosage.js');
                this.__data.dosageInstruction = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Dosage(v)) : [new Dosage(valueProvided)];
            }
        });

        /**
         * @description Indicates the specific details for the dispense or medication supply part of a
    medication request (also known as a Medication Prescription or Medication
    Order).  Note that this information is not always sent with the order.  There
    may be in some settings (e.g. hospitals) institutional or system support for
    completing the dispense details in the pharmacy department.
         * @property {MedicationRequestDispenseRequest|undefined}
        */
        Object.defineProperty(this, 'dispenseRequest', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.dispenseRequest,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.dispenseRequest = undefined;
                    return;
                }
                let MedicationRequestDispenseRequest = require('../backbone_elements/medicationRequestDispenseRequest.js');
                this.__data.dispenseRequest = new MedicationRequestDispenseRequest(valueProvided);
            }
        });

        /**
         * @description Indicates whether or not substitution can or should be part of the dispense.
    In some cases, substitution must happen, in other cases substitution must not
    happen. This block explains the prescriber's intent. If nothing is specified
    substitution may be done.
         * @property {MedicationRequestSubstitution|undefined}
        */
        Object.defineProperty(this, 'substitution', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.substitution,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.substitution = undefined;
                    return;
                }
                let MedicationRequestSubstitution = require('../backbone_elements/medicationRequestSubstitution.js');
                this.__data.substitution = new MedicationRequestSubstitution(valueProvided);
            }
        });

        /**
         * @description A link to a resource representing an earlier order related order or
    prescription.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'priorPrescription', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.priorPrescription,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.priorPrescription = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.priorPrescription = new Reference(valueProvided);
            }
        });

        /**
         * @description Indicates an actual or potential clinical issue with or between one or more
    active or proposed clinical actions for a patient; e.g. Drug-drug interaction,
    duplicate therapy, dosage alert etc.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'detectedIssue', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.detectedIssue,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.detectedIssue = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.detectedIssue = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description Links to Provenance records for past versions of this resource or fulfilling
    request or event resources that identify key state transitions or updates that
    are likely to be relevant to a user looking at the current version of the
    resource.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'eventHistory', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.eventHistory,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.eventHistory = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.eventHistory = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });


        /**
         * @description _access
         * @property {Object|undefined}
         */
        Object.defineProperty(this, '_access', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._access,
            set: valueProvided => {
                this.__data._access = valueProvided;
            }
        });
        /**
         * @description _sourceAssigningAuthority
         * @property {Object|undefined}
         */
        Object.defineProperty(this, '_sourceAssigningAuthority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceAssigningAuthority,
            set: valueProvided => {
                this.__data._sourceAssigningAuthority = valueProvided;
            }
        });
        /**
         * @description _uuid
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_uuid', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._uuid,
            set: valueProvided => {
                this.__data._uuid = valueProvided;
            }
        });
        /**
         * @description _sourceId
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceId,
            set: valueProvided => {
                this.__data._sourceId = valueProvided;
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            statusReason,
            intent,
            category,
            priority,
            doNotPerform,
            reportedBoolean,
            reportedReference,
            medicationCodeableConcept,
            medicationReference,
            subject,
            encounter,
            supportingInformation,
            authoredOn,
            requester,
            performer,
            performerType,
            recorder,
            reasonCode,
            reasonReference,
            instantiatesCanonical,
            instantiatesUri,
            basedOn,
            groupIdentifier,
            courseOfTherapyType,
            insurance,
            note,
            dosageInstruction,
            dispenseRequest,
            substitution,
            priorPrescription,
            detectedIssue,
            eventHistory,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'MedicationRequest',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    static get resourceType() {
        return 'MedicationRequest';
    }

    /**
     * @description Creates a blank new resource
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {code} status,
     * @param {CodeableConcept|undefined} [statusReason],
     * @param {code} intent,
     * @param {CodeableConcept[]|undefined} [category],
     * @param {code|undefined} [priority],
     * @param {Boolean|undefined} [doNotPerform],
     * @param {Boolean|undefined} [reportedBoolean],
     * @param {Reference|undefined} [reportedReference],
     * @param {CodeableConcept|undefined} [medicationCodeableConcept],
     * @param {Reference|undefined} [medicationReference],
     * @param {Reference} subject,
     * @param {Reference|undefined} [encounter],
     * @param {Reference[]|undefined} [supportingInformation],
     * @param {dateTime|undefined} [authoredOn],
     * @param {Reference|undefined} [requester],
     * @param {Reference|undefined} [performer],
     * @param {CodeableConcept|undefined} [performerType],
     * @param {Reference|undefined} [recorder],
     * @param {CodeableConcept[]|undefined} [reasonCode],
     * @param {Reference[]|undefined} [reasonReference],
     * @param {canonical[]|undefined} [instantiatesCanonical],
     * @param {uri[]|undefined} [instantiatesUri],
     * @param {Reference[]|undefined} [basedOn],
     * @param {Identifier|undefined} [groupIdentifier],
     * @param {CodeableConcept|undefined} [courseOfTherapyType],
     * @param {Reference[]|undefined} [insurance],
     * @param {Annotation[]|undefined} [note],
     * @param {Dosage[]|undefined} [dosageInstruction],
     * @param {MedicationRequestDispenseRequest|undefined} [dispenseRequest],
     * @param {MedicationRequestSubstitution|undefined} [substitution],
     * @param {Reference|undefined} [priorPrescription],
     * @param {Reference[]|undefined} [detectedIssue],
     * @param {Reference[]|undefined} [eventHistory],
     * @param {Object|undefined} [_access]
     * @param {Object|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
     * @returns {MedicationRequest}
    */
    create(
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            statusReason,
            intent,
            category,
            priority,
            doNotPerform,
            reportedBoolean,
            reportedReference,
            medicationCodeableConcept,
            medicationReference,
            subject,
            encounter,
            supportingInformation,
            authoredOn,
            requester,
            performer,
            performerType,
            recorder,
            reasonCode,
            reasonReference,
            instantiatesCanonical,
            instantiatesUri,
            basedOn,
            groupIdentifier,
            courseOfTherapyType,
            insurance,
            note,
            dosageInstruction,
            dispenseRequest,
            substitution,
            priorPrescription,
            detectedIssue,
            eventHistory,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        }
    ) {
        return new MedicationRequest({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            statusReason,
            intent,
            category,
            priority,
            doNotPerform,
            reportedBoolean,
            reportedReference,
            medicationCodeableConcept,
            medicationReference,
            subject,
            encounter,
            supportingInformation,
            authoredOn,
            requester,
            performer,
            performerType,
            recorder,
            reasonCode,
            reasonReference,
            instantiatesCanonical,
            instantiatesUri,
            basedOn,
            groupIdentifier,
            courseOfTherapyType,
            insurance,
            note,
            dosageInstruction,
            dispenseRequest,
            substitution,
            priorPrescription,
            detectedIssue,
            eventHistory,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {MedicationRequest}
    */
    clone() {
        return new MedicationRequest(this.toJSONInternal());
    }


    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            status: this.status,
            statusReason: this.statusReason && this.statusReason.toJSON(),
            intent: this.intent,
            category: this.category && this.category.map(v => v.toJSON()),
            priority: this.priority,
            doNotPerform: this.doNotPerform,
            reportedBoolean: this.reportedBoolean,
            reportedReference: this.reportedReference && this.reportedReference.toJSON(),
            medicationCodeableConcept: this.medicationCodeableConcept && this.medicationCodeableConcept.toJSON(),
            medicationReference: this.medicationReference && this.medicationReference.toJSON(),
            subject: this.subject && this.subject.toJSON(),
            encounter: this.encounter && this.encounter.toJSON(),
            supportingInformation: this.supportingInformation && this.supportingInformation.map(v => v.toJSON()),
            authoredOn: this.authoredOn,
            requester: this.requester && this.requester.toJSON(),
            performer: this.performer && this.performer.toJSON(),
            performerType: this.performerType && this.performerType.toJSON(),
            recorder: this.recorder && this.recorder.toJSON(),
            reasonCode: this.reasonCode && this.reasonCode.map(v => v.toJSON()),
            reasonReference: this.reasonReference && this.reasonReference.map(v => v.toJSON()),
            instantiatesCanonical: this.instantiatesCanonical,
            instantiatesUri: this.instantiatesUri,
            basedOn: this.basedOn && this.basedOn.map(v => v.toJSON()),
            groupIdentifier: this.groupIdentifier && this.groupIdentifier.toJSON(),
            courseOfTherapyType: this.courseOfTherapyType && this.courseOfTherapyType.toJSON(),
            insurance: this.insurance && this.insurance.map(v => v.toJSON()),
            note: this.note && this.note.map(v => v.toJSON()),
            dosageInstruction: this.dosageInstruction && this.dosageInstruction.map(v => v.toJSON()),
            dispenseRequest: this.dispenseRequest && this.dispenseRequest.toJSON(),
            substitution: this.substitution && this.substitution.toJSON(),
            priorPrescription: this.priorPrescription && this.priorPrescription.toJSON(),
            detectedIssue: this.detectedIssue && this.detectedIssue.map(v => v.toJSON()),
            eventHistory: this.eventHistory && this.eventHistory.map(v => v.toJSON()),
        });
    }

    /**
     * Returns JSON representation of entity
     * @return {void}
     */
    updateReferences(fnUpdateReference) {
            if (this.meta) {this.meta.updateReferences(fnUpdateReference);}
            if (this.text) {this.text.updateReferences(fnUpdateReference);}
            if (this.contained) {this.contained.forEach(v => v.updateReferences(fnUpdateReference));}
            if (this.extension) {this.extension.forEach(v => v.updateReferences(fnUpdateReference));}
            if (this.modifierExtension) {this.modifierExtension.forEach(v => v.updateReferences(fnUpdateReference));}
            if (this.identifier) {this.identifier.forEach(v => v.updateReferences(fnUpdateReference));}
            if (this.statusReason) {this.statusReason.updateReferences(fnUpdateReference);}
            if (this.category) {this.category.forEach(v => v.updateReferences(fnUpdateReference));}
            if (this.reportedReference) {this.reportedReference.updateReferences(fnUpdateReference);}
            if (this.medicationCodeableConcept) {this.medicationCodeableConcept.updateReferences(fnUpdateReference);}
            if (this.medicationReference) {this.medicationReference.updateReferences(fnUpdateReference);}
            if (this.subject) {this.subject.updateReferences(fnUpdateReference);}
            if (this.encounter) {this.encounter.updateReferences(fnUpdateReference);}
            if (this.supportingInformation) {this.supportingInformation.forEach(v => v.updateReferences(fnUpdateReference));}
            if (this.requester) {this.requester.updateReferences(fnUpdateReference);}
            if (this.performer) {this.performer.updateReferences(fnUpdateReference);}
            if (this.performerType) {this.performerType.updateReferences(fnUpdateReference);}
            if (this.recorder) {this.recorder.updateReferences(fnUpdateReference);}
            if (this.reasonCode) {this.reasonCode.forEach(v => v.updateReferences(fnUpdateReference));}
            if (this.reasonReference) {this.reasonReference.forEach(v => v.updateReferences(fnUpdateReference));}
            if (this.basedOn) {this.basedOn.forEach(v => v.updateReferences(fnUpdateReference));}
            if (this.groupIdentifier) {this.groupIdentifier.updateReferences(fnUpdateReference);}
            if (this.courseOfTherapyType) {this.courseOfTherapyType.updateReferences(fnUpdateReference);}
            if (this.insurance) {this.insurance.forEach(v => v.updateReferences(fnUpdateReference));}
            if (this.note) {this.note.forEach(v => v.updateReferences(fnUpdateReference));}
            if (this.dosageInstruction) {this.dosageInstruction.forEach(v => v.updateReferences(fnUpdateReference));}
            if (this.dispenseRequest) {this.dispenseRequest.updateReferences(fnUpdateReference);}
            if (this.substitution) {this.substitution.updateReferences(fnUpdateReference);}
            if (this.priorPrescription) {this.priorPrescription.updateReferences(fnUpdateReference);}
            if (this.detectedIssue) {this.detectedIssue.forEach(v => v.updateReferences(fnUpdateReference));}
            if (this.eventHistory) {this.eventHistory.forEach(v => v.updateReferences(fnUpdateReference));}
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal() {
        const {removeNull} = require('../../../../utils/nullRemover');
        const json = this.toJSON();

        if (this._access) {
            json._access = this._access;
        }
        if (this._sourceAssigningAuthority) {
            json._sourceAssigningAuthority = this._sourceAssigningAuthority;
        }
        if (this._uuid) {
            json._uuid = this._uuid;
        }
        if (this._sourceId) {
            json._sourceId = this._sourceId;
        }

        return removeNull(json);
    }
}

module.exports = MedicationRequest;
