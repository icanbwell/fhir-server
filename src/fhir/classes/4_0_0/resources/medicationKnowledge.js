/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');
const async = require('async');


/**
MedicationKnowledge
    Information about a medication that is used to support knowledge.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class MedicationKnowledge extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {CodeableConcept|undefined} [code],
     * @param {code|undefined} [status],
     * @param {Reference|undefined} [manufacturer],
     * @param {CodeableConcept|undefined} [doseForm],
     * @param {Quantity|undefined} [amount],
     * @param {String[]|undefined} [synonym],
     * @param {MedicationKnowledgeRelatedMedicationKnowledge[]|undefined} [relatedMedicationKnowledge],
     * @param {Reference[]|undefined} [associatedMedication],
     * @param {CodeableConcept[]|undefined} [productType],
     * @param {MedicationKnowledgeMonograph[]|undefined} [monograph],
     * @param {MedicationKnowledgeIngredient[]|undefined} [ingredient],
     * @param {markdown|undefined} [preparationInstruction],
     * @param {CodeableConcept[]|undefined} [intendedRoute],
     * @param {MedicationKnowledgeCost[]|undefined} [cost],
     * @param {MedicationKnowledgeMonitoringProgram[]|undefined} [monitoringProgram],
     * @param {MedicationKnowledgeAdministrationGuidelines[]|undefined} [administrationGuidelines],
     * @param {MedicationKnowledgeMedicineClassification[]|undefined} [medicineClassification],
     * @param {MedicationKnowledgePackaging|undefined} [packaging],
     * @param {MedicationKnowledgeDrugCharacteristic[]|undefined} [drugCharacteristic],
     * @param {Reference[]|undefined} [contraindication],
     * @param {MedicationKnowledgeRegulatory[]|undefined} [regulatory],
     * @param {MedicationKnowledgeKinetics[]|undefined} [kinetics],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            code,
            status,
            manufacturer,
            doseForm,
            amount,
            synonym,
            relatedMedicationKnowledge,
            associatedMedication,
            productType,
            monograph,
            ingredient,
            preparationInstruction,
            intendedRoute,
            cost,
            monitoringProgram,
            administrationGuidelines,
            medicineClassification,
            packaging,
            drugCharacteristic,
            contraindication,
            regulatory,
            kinetics,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.meta = undefined;
                    return;
                }
                const Meta = require('../complex_types/meta.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.meta = FhirResourceCreator.create(valueProvided, Meta);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.implicitRules = undefined;
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.language = undefined;
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.text = undefined;
                    return;
                }
                const Narrative = require('../complex_types/narrative.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.text = FhirResourceCreator.create(valueProvided, Narrative);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.contained = undefined;
                    return;
                }
                const ResourceContainer = require('../simple_types/resourceContainer.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.contained = FhirResourceCreator.createArray(valueProvided);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.extension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.modifierExtension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description A code that specifies this medication, or a textual description if no code is
    available. Usage note: This could be a standard medication code such as a code
    from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local
    formulary code, optionally with translations to other code systems.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'code', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.code,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.code = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.code = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description A code to indicate if the medication is in active use.  The status refers to
    the validity about the information of the medication and not to its medicinal
    properties.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.status = undefined;
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description Describes the details of the manufacturer of the medication product.  This is
    not intended to represent the distributor of a medication product.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'manufacturer', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.manufacturer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.manufacturer = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.manufacturer = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description Describes the form of the item.  Powder; tablets; capsule.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'doseForm', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.doseForm,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.doseForm = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.doseForm = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Specific amount of the drug in the packaged product.  For example, when
    specifying a product that has the same strength (For example, Insulin glargine
    100 unit per mL solution for injection), this attribute provides additional
    clarification of the package amount (For example, 3 mL, 10mL, etc.).
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'amount', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.amount,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.amount = undefined;
                    return;
                }
                const Quantity = require('../complex_types/quantity.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.amount = FhirResourceCreator.create(valueProvided, Quantity);
            }
        });

        /**
         * @description Additional names for a medication, for example, the name(s) given to a
    medication in different countries.  For example, acetaminophen and paracetamol
    or salbutamol and albuterol.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'synonym', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.synonym,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.synonym = undefined;
                    return;
                }
                this.__data.synonym = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => v) : [valueProvided];
            }
        });

        /**
         * @description Associated or related knowledge about a medication.
         * @property {MedicationKnowledgeRelatedMedicationKnowledge[]|undefined}
        */
        Object.defineProperty(this, 'relatedMedicationKnowledge', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.relatedMedicationKnowledge,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.relatedMedicationKnowledge = undefined;
                    return;
                }
                const MedicationKnowledgeRelatedMedicationKnowledge = require('../backbone_elements/medicationKnowledgeRelatedMedicationKnowledge.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.relatedMedicationKnowledge = FhirResourceCreator.createArray(valueProvided, MedicationKnowledgeRelatedMedicationKnowledge);
            }
        });

        /**
         * @description Associated or related medications.  For example, if the medication is a
    branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g.
    Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin), this
    would link to a branded product (e.g. Crestor).
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'associatedMedication', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.associatedMedication,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.associatedMedication = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.associatedMedication = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description Category of the medication or product (e.g. branded product, therapeutic
    moeity, generic product, innovator product, etc.).
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'productType', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.productType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.productType = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.productType = FhirResourceCreator.createArray(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Associated documentation about the medication.
         * @property {MedicationKnowledgeMonograph[]|undefined}
        */
        Object.defineProperty(this, 'monograph', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.monograph,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.monograph = undefined;
                    return;
                }
                const MedicationKnowledgeMonograph = require('../backbone_elements/medicationKnowledgeMonograph.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.monograph = FhirResourceCreator.createArray(valueProvided, MedicationKnowledgeMonograph);
            }
        });

        /**
         * @description Identifies a particular constituent of interest in the product.
         * @property {MedicationKnowledgeIngredient[]|undefined}
        */
        Object.defineProperty(this, 'ingredient', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.ingredient,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.ingredient = undefined;
                    return;
                }
                const MedicationKnowledgeIngredient = require('../backbone_elements/medicationKnowledgeIngredient.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.ingredient = FhirResourceCreator.createArray(valueProvided, MedicationKnowledgeIngredient);
            }
        });

        /**
         * @description The instructions for preparing the medication.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'preparationInstruction', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.preparationInstruction,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.preparationInstruction = undefined;
                    return;
                }
                this.__data.preparationInstruction = valueProvided;
            }
        });

        /**
         * @description The intended or approved route of administration.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'intendedRoute', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.intendedRoute,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.intendedRoute = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.intendedRoute = FhirResourceCreator.createArray(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description The price of the medication.
         * @property {MedicationKnowledgeCost[]|undefined}
        */
        Object.defineProperty(this, 'cost', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.cost,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.cost = undefined;
                    return;
                }
                const MedicationKnowledgeCost = require('../backbone_elements/medicationKnowledgeCost.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.cost = FhirResourceCreator.createArray(valueProvided, MedicationKnowledgeCost);
            }
        });

        /**
         * @description The program under which the medication is reviewed.
         * @property {MedicationKnowledgeMonitoringProgram[]|undefined}
        */
        Object.defineProperty(this, 'monitoringProgram', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.monitoringProgram,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.monitoringProgram = undefined;
                    return;
                }
                const MedicationKnowledgeMonitoringProgram = require('../backbone_elements/medicationKnowledgeMonitoringProgram.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.monitoringProgram = FhirResourceCreator.createArray(valueProvided, MedicationKnowledgeMonitoringProgram);
            }
        });

        /**
         * @description Guidelines for the administration of the medication.
         * @property {MedicationKnowledgeAdministrationGuidelines[]|undefined}
        */
        Object.defineProperty(this, 'administrationGuidelines', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.administrationGuidelines,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.administrationGuidelines = undefined;
                    return;
                }
                const MedicationKnowledgeAdministrationGuidelines = require('../backbone_elements/medicationKnowledgeAdministrationGuidelines.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.administrationGuidelines = FhirResourceCreator.createArray(valueProvided, MedicationKnowledgeAdministrationGuidelines);
            }
        });

        /**
         * @description Categorization of the medication within a formulary or classification system.
         * @property {MedicationKnowledgeMedicineClassification[]|undefined}
        */
        Object.defineProperty(this, 'medicineClassification', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.medicineClassification,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.medicineClassification = undefined;
                    return;
                }
                const MedicationKnowledgeMedicineClassification = require('../backbone_elements/medicationKnowledgeMedicineClassification.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.medicineClassification = FhirResourceCreator.createArray(valueProvided, MedicationKnowledgeMedicineClassification);
            }
        });

        /**
         * @description Information that only applies to packages (not products).
         * @property {MedicationKnowledgePackaging|undefined}
        */
        Object.defineProperty(this, 'packaging', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.packaging,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.packaging = undefined;
                    return;
                }
                const MedicationKnowledgePackaging = require('../backbone_elements/medicationKnowledgePackaging.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.packaging = FhirResourceCreator.create(valueProvided, MedicationKnowledgePackaging);
            }
        });

        /**
         * @description Specifies descriptive properties of the medicine, such as color, shape,
    imprints, etc.
         * @property {MedicationKnowledgeDrugCharacteristic[]|undefined}
        */
        Object.defineProperty(this, 'drugCharacteristic', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.drugCharacteristic,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.drugCharacteristic = undefined;
                    return;
                }
                const MedicationKnowledgeDrugCharacteristic = require('../backbone_elements/medicationKnowledgeDrugCharacteristic.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.drugCharacteristic = FhirResourceCreator.createArray(valueProvided, MedicationKnowledgeDrugCharacteristic);
            }
        });

        /**
         * @description Potential clinical issue with or between medication(s) (for example, drug-drug
    interaction, drug-disease contraindication, drug-allergy interaction, etc.).
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'contraindication', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contraindication,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.contraindication = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.contraindication = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description Regulatory information about a medication.
         * @property {MedicationKnowledgeRegulatory[]|undefined}
        */
        Object.defineProperty(this, 'regulatory', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.regulatory,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.regulatory = undefined;
                    return;
                }
                const MedicationKnowledgeRegulatory = require('../backbone_elements/medicationKnowledgeRegulatory.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.regulatory = FhirResourceCreator.createArray(valueProvided, MedicationKnowledgeRegulatory);
            }
        });

        /**
         * @description The time course of drug absorption, distribution, metabolism and excretion of
    a medication from the body.
         * @property {MedicationKnowledgeKinetics[]|undefined}
        */
        Object.defineProperty(this, 'kinetics', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.kinetics,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.kinetics = undefined;
                    return;
                }
                const MedicationKnowledgeKinetics = require('../backbone_elements/medicationKnowledgeKinetics.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.kinetics = FhirResourceCreator.createArray(valueProvided, MedicationKnowledgeKinetics);
            }
        });


        /**
         * @description _access
         * @property {Object|undefined}
         */
        Object.defineProperty(this, '_access', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._access,
            set: valueProvided => {
                this.__data._access = valueProvided;
            }
        });
        /**
         * @description _sourceAssigningAuthority
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceAssigningAuthority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceAssigningAuthority,
            set: valueProvided => {
                this.__data._sourceAssigningAuthority = valueProvided;
            }
        });
        /**
         * @description _uuid
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_uuid', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._uuid,
            set: valueProvided => {
                this.__data._uuid = valueProvided;
            }
        });
        /**
         * @description _sourceId
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceId,
            set: valueProvided => {
                this.__data._sourceId = valueProvided;
            }
        });


        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            code,
            status,
            manufacturer,
            doseForm,
            amount,
            synonym,
            relatedMedicationKnowledge,
            associatedMedication,
            productType,
            monograph,
            ingredient,
            preparationInstruction,
            intendedRoute,
            cost,
            monitoringProgram,
            administrationGuidelines,
            medicineClassification,
            packaging,
            drugCharacteristic,
            contraindication,
            regulatory,
            kinetics,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        });

        /**
         * @description Define a default non-writable resourceType property
         * @property {string|undefined}
         */
        Object.defineProperty(this, 'resourceType', {
            value: 'MedicationKnowledge',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    /**
     * @description Define a default non-writable resourceType property
     * @property {string|undefined}
     */
    static get resourceType() {
        return 'MedicationKnowledge';
    }

    /**
     * @description Creates a blank new resource
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {CodeableConcept|undefined} [code],
     * @param {code|undefined} [status],
     * @param {Reference|undefined} [manufacturer],
     * @param {CodeableConcept|undefined} [doseForm],
     * @param {Quantity|undefined} [amount],
     * @param {String[]|undefined} [synonym],
     * @param {MedicationKnowledgeRelatedMedicationKnowledge[]|undefined} [relatedMedicationKnowledge],
     * @param {Reference[]|undefined} [associatedMedication],
     * @param {CodeableConcept[]|undefined} [productType],
     * @param {MedicationKnowledgeMonograph[]|undefined} [monograph],
     * @param {MedicationKnowledgeIngredient[]|undefined} [ingredient],
     * @param {markdown|undefined} [preparationInstruction],
     * @param {CodeableConcept[]|undefined} [intendedRoute],
     * @param {MedicationKnowledgeCost[]|undefined} [cost],
     * @param {MedicationKnowledgeMonitoringProgram[]|undefined} [monitoringProgram],
     * @param {MedicationKnowledgeAdministrationGuidelines[]|undefined} [administrationGuidelines],
     * @param {MedicationKnowledgeMedicineClassification[]|undefined} [medicineClassification],
     * @param {MedicationKnowledgePackaging|undefined} [packaging],
     * @param {MedicationKnowledgeDrugCharacteristic[]|undefined} [drugCharacteristic],
     * @param {Reference[]|undefined} [contraindication],
     * @param {MedicationKnowledgeRegulatory[]|undefined} [regulatory],
     * @param {MedicationKnowledgeKinetics[]|undefined} [kinetics],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
     * @returns {MedicationKnowledge}
    */
    create(
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            code,
            status,
            manufacturer,
            doseForm,
            amount,
            synonym,
            relatedMedicationKnowledge,
            associatedMedication,
            productType,
            monograph,
            ingredient,
            preparationInstruction,
            intendedRoute,
            cost,
            monitoringProgram,
            administrationGuidelines,
            medicineClassification,
            packaging,
            drugCharacteristic,
            contraindication,
            regulatory,
            kinetics,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        }
    ) {
        return new MedicationKnowledge({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            code,
            status,
            manufacturer,
            doseForm,
            amount,
            synonym,
            relatedMedicationKnowledge,
            associatedMedication,
            productType,
            monograph,
            ingredient,
            preparationInstruction,
            intendedRoute,
            cost,
            monitoringProgram,
            administrationGuidelines,
            medicineClassification,
            packaging,
            drugCharacteristic,
            contraindication,
            regulatory,
            kinetics,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {MedicationKnowledge}
    */
    clone() {
        return new MedicationKnowledge(this.toJSONInternal());
    }


    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            code: this.code && this.code.toJSON(),
            status: this.status,
            manufacturer: this.manufacturer && this.manufacturer.toJSON(),
            doseForm: this.doseForm && this.doseForm.toJSON(),
            amount: this.amount && this.amount.toJSON(),
            synonym: this.synonym,
            relatedMedicationKnowledge: this.relatedMedicationKnowledge && this.relatedMedicationKnowledge.map(v => v.toJSON()),
            associatedMedication: this.associatedMedication && this.associatedMedication.map(v => v.toJSON()),
            productType: this.productType && this.productType.map(v => v.toJSON()),
            monograph: this.monograph && this.monograph.map(v => v.toJSON()),
            ingredient: this.ingredient && this.ingredient.map(v => v.toJSON()),
            preparationInstruction: this.preparationInstruction,
            intendedRoute: this.intendedRoute && this.intendedRoute.map(v => v.toJSON()),
            cost: this.cost && this.cost.map(v => v.toJSON()),
            monitoringProgram: this.monitoringProgram && this.monitoringProgram.map(v => v.toJSON()),
            administrationGuidelines: this.administrationGuidelines && this.administrationGuidelines.map(v => v.toJSON()),
            medicineClassification: this.medicineClassification && this.medicineClassification.map(v => v.toJSON()),
            packaging: this.packaging && this.packaging.toJSON(),
            drugCharacteristic: this.drugCharacteristic && this.drugCharacteristic.map(v => v.toJSON()),
            contraindication: this.contraindication && this.contraindication.map(v => v.toJSON()),
            regulatory: this.regulatory && this.regulatory.map(v => v.toJSON()),
            kinetics: this.kinetics && this.kinetics.map(v => v.toJSON()),
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync({fnUpdateReferenceAsync}) {
            if (this.meta) {await this.meta.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.text) {await this.text.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.contained) {await async.each(this.contained, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.extension) {await async.each(this.extension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.modifierExtension) {await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.code) {await this.code.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.manufacturer) {await this.manufacturer.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.doseForm) {await this.doseForm.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.amount) {await this.amount.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.relatedMedicationKnowledge) {await async.each(this.relatedMedicationKnowledge, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.associatedMedication) {await async.each(this.associatedMedication, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.productType) {await async.each(this.productType, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.monograph) {await async.each(this.monograph, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.ingredient) {await async.each(this.ingredient, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.intendedRoute) {await async.each(this.intendedRoute, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.cost) {await async.each(this.cost, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.monitoringProgram) {await async.each(this.monitoringProgram, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.administrationGuidelines) {await async.each(this.administrationGuidelines, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.medicineClassification) {await async.each(this.medicineClassification, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.packaging) {await this.packaging.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.drugCharacteristic) {await async.each(this.drugCharacteristic, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.contraindication) {await async.each(this.contraindication, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.regulatory) {await async.each(this.regulatory, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.kinetics) {await async.each(this.kinetics, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal() {
        const {removeNull} = require('../../../../utils/nullRemover');
        const json = {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSONInternal(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSONInternal(),
            contained: this.contained && this.contained.map(v => v.toJSONInternal()),
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            code: this.code && this.code.toJSONInternal(),
            status: this.status,
            manufacturer: this.manufacturer && this.manufacturer.toJSONInternal(),
            doseForm: this.doseForm && this.doseForm.toJSONInternal(),
            amount: this.amount && this.amount.toJSONInternal(),
            synonym: this.synonym,
            relatedMedicationKnowledge: this.relatedMedicationKnowledge && this.relatedMedicationKnowledge.map(v => v.toJSONInternal()),
            associatedMedication: this.associatedMedication && this.associatedMedication.map(v => v.toJSONInternal()),
            productType: this.productType && this.productType.map(v => v.toJSONInternal()),
            monograph: this.monograph && this.monograph.map(v => v.toJSONInternal()),
            ingredient: this.ingredient && this.ingredient.map(v => v.toJSONInternal()),
            preparationInstruction: this.preparationInstruction,
            intendedRoute: this.intendedRoute && this.intendedRoute.map(v => v.toJSONInternal()),
            cost: this.cost && this.cost.map(v => v.toJSONInternal()),
            monitoringProgram: this.monitoringProgram && this.monitoringProgram.map(v => v.toJSONInternal()),
            administrationGuidelines: this.administrationGuidelines && this.administrationGuidelines.map(v => v.toJSONInternal()),
            medicineClassification: this.medicineClassification && this.medicineClassification.map(v => v.toJSONInternal()),
            packaging: this.packaging && this.packaging.toJSONInternal(),
            drugCharacteristic: this.drugCharacteristic && this.drugCharacteristic.map(v => v.toJSONInternal()),
            contraindication: this.contraindication && this.contraindication.map(v => v.toJSONInternal()),
            regulatory: this.regulatory && this.regulatory.map(v => v.toJSONInternal()),
            kinetics: this.kinetics && this.kinetics.map(v => v.toJSONInternal()),
        };


        if (this._access) {
            json._access = this._access;
        }
        if (this._sourceAssigningAuthority) {
            json._sourceAssigningAuthority = this._sourceAssigningAuthority;
        }
        if (this._uuid) {
            json._uuid = this._uuid;
        }
        if (this._sourceId) {
            json._sourceId = this._sourceId;
        }

        return removeNull(json);
    }
}

module.exports = MedicationKnowledge;
