/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

/**
DeviceRequest
    Represents a request for a patient to employ a medical device. The device may
    be an implantable device, or an external assistive device, such as a walker.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class DeviceRequest {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {canonical[]|undefined} [instantiatesCanonical],
     * @param {uri[]|undefined} [instantiatesUri],
     * @param {Reference[]|undefined} [basedOn],
     * @param {Reference[]|undefined} [priorRequest],
     * @param {Identifier|undefined} [groupIdentifier],
     * @param {code|undefined} [status],
     * @param {code} intent,
     * @param {code|undefined} [priority],
     * @param {Reference|undefined} [codeReference],
     * @param {CodeableConcept|undefined} [codeCodeableConcept],
     * @param {DeviceRequestParameter[]|undefined} [parameter],
     * @param {Reference} subject,
     * @param {Reference|undefined} [encounter],
     * @param {dateTime|undefined} [occurrenceDateTime],
     * @param {Period|undefined} [occurrencePeriod],
     * @param {Timing|undefined} [occurrenceTiming],
     * @param {dateTime|undefined} [authoredOn],
     * @param {Reference|undefined} [requester],
     * @param {CodeableConcept|undefined} [performerType],
     * @param {Reference|undefined} [performer],
     * @param {CodeableConcept[]|undefined} [reasonCode],
     * @param {Reference[]|undefined} [reasonReference],
     * @param {Reference[]|undefined} [insurance],
     * @param {Reference[]|undefined} [supportingInfo],
     * @param {Annotation[]|undefined} [note],
     * @param {Reference[]|undefined} [relevantHistory],
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            instantiatesCanonical,
            instantiatesUri,
            basedOn,
            priorRequest,
            groupIdentifier,
            status,
            intent,
            priority,
            codeReference,
            codeCodeableConcept,
            parameter,
            subject,
            encounter,
            occurrenceDateTime,
            occurrencePeriod,
            occurrenceTiming,
            authoredOn,
            requester,
            performerType,
            performer,
            reasonCode,
            reasonReference,
            insurance,
            supportingInfo,
            note,
            relevantHistory,
        }
    ) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.contained = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description Identifiers assigned to this order by the orderer or by the receiver.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(valueProvided) ? valueProvided.map(v => new Identifier(v)) : [new Identifier(valueProvided)];
            }
        });

        /**
         * @description The URL pointing to a FHIR-defined protocol, guideline, orderset or other
    definition that is adhered to in whole or in part by this DeviceRequest.
         * @property {canonical[]|undefined}
        */
        Object.defineProperty(this, 'instantiatesCanonical', {
            enumerable: true,
            get: () => this.__data.instantiatesCanonical,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.instantiatesCanonical = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description The URL pointing to an externally maintained protocol, guideline, orderset or
    other definition that is adhered to in whole or in part by this DeviceRequest.
         * @property {uri[]|undefined}
        */
        Object.defineProperty(this, 'instantiatesUri', {
            enumerable: true,
            get: () => this.__data.instantiatesUri,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.instantiatesUri = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description Plan/proposal/order fulfilled by this request.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'basedOn', {
            enumerable: true,
            get: () => this.__data.basedOn,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.basedOn = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description The request takes the place of the referenced completed or terminated
    request(s).
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'priorRequest', {
            enumerable: true,
            get: () => this.__data.priorRequest,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.priorRequest = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description Composite request this is part of.
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'groupIdentifier', {
            enumerable: true,
            get: () => this.__data.groupIdentifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.groupIdentifier = new Identifier(valueProvided);
            }
        });

        /**
         * @description The status of the request.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description Whether the request is a proposal, plan, an original order or a reflex order.
         * @property {code}
        */
        Object.defineProperty(this, 'intent', {
            enumerable: true,
            get: () => this.__data.intent,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.intent = valueProvided;
            }
        });

        /**
         * @description Indicates how quickly the {{title}} should be addressed with respect to other
    requests.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'priority', {
            enumerable: true,
            get: () => this.__data.priority,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.priority = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'codeReference', {
            enumerable: true,
            get: () => this.__data.codeReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.codeReference = new Reference(valueProvided);
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'codeCodeableConcept', {
            enumerable: true,
            get: () => this.__data.codeCodeableConcept,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.codeCodeableConcept = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description Specific parameters for the ordered item.  For example, the prism value for
    lenses.
         * @property {DeviceRequestParameter[]|undefined}
        */
        Object.defineProperty(this, 'parameter', {
            enumerable: true,
            get: () => this.__data.parameter,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let DeviceRequestParameter = require('../backbone_elements/deviceRequestParameter.js');
                this.__data.parameter = Array.isArray(valueProvided) ? valueProvided.map(v => new DeviceRequestParameter(v)) : [new DeviceRequestParameter(valueProvided)];
            }
        });

        /**
         * @description The patient who will use the device.
         * @property {Reference}
        */
        Object.defineProperty(this, 'subject', {
            enumerable: true,
            get: () => this.__data.subject,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.subject = new Reference(valueProvided);
            }
        });

        /**
         * @description An encounter that provides additional context in which this request is made.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'encounter', {
            enumerable: true,
            get: () => this.__data.encounter,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.encounter = new Reference(valueProvided);
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'occurrenceDateTime', {
            enumerable: true,
            get: () => this.__data.occurrenceDateTime,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.occurrenceDateTime = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'occurrencePeriod', {
            enumerable: true,
            get: () => this.__data.occurrencePeriod,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.occurrencePeriod = new Period(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Timing|undefined}
        */
        Object.defineProperty(this, 'occurrenceTiming', {
            enumerable: true,
            get: () => this.__data.occurrenceTiming,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Timing = require('../backbone_elements/timing.js');
                this.__data.occurrenceTiming = new Timing(valueProvided);
            }
        });

        /**
         * @description When the request transitioned to being actionable.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'authoredOn', {
            enumerable: true,
            get: () => this.__data.authoredOn,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.authoredOn = valueProvided;
            }
        });

        /**
         * @description The individual who initiated the request and has responsibility for its
    activation.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'requester', {
            enumerable: true,
            get: () => this.__data.requester,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.requester = new Reference(valueProvided);
            }
        });

        /**
         * @description Desired type of performer for doing the diagnostic testing.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'performerType', {
            enumerable: true,
            get: () => this.__data.performerType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.performerType = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description The desired performer for doing the diagnostic testing.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'performer', {
            enumerable: true,
            get: () => this.__data.performer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.performer = new Reference(valueProvided);
            }
        });

        /**
         * @description Reason or justification for the use of this device.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'reasonCode', {
            enumerable: true,
            get: () => this.__data.reasonCode,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.reasonCode = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Reason or justification for the use of this device.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'reasonReference', {
            enumerable: true,
            get: () => this.__data.reasonReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.reasonReference = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description Insurance plans, coverage extensions, pre-authorizations and/or pre-
    determinations that may be required for delivering the requested service.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'insurance', {
            enumerable: true,
            get: () => this.__data.insurance,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.insurance = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description Additional clinical information about the patient that may influence the
    request fulfilment.  For example, this may include where on the subject's body
    the device will be used (i.e. the target site).
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'supportingInfo', {
            enumerable: true,
            get: () => this.__data.supportingInfo,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.supportingInfo = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description Details about this request that were not represented at all or sufficiently in
    one of the attributes provided in a class. These may include for example a
    comment, an instruction, or a note associated with the statement.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            enumerable: true,
            get: () => this.__data.note,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.note = Array.isArray(valueProvided) ? valueProvided.map(v => new Annotation(v)) : [new Annotation(valueProvided)];
            }
        });

        /**
         * @description Key events in the history of the request.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'relevantHistory', {
            enumerable: true,
            get: () => this.__data.relevantHistory,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.relevantHistory = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            instantiatesCanonical,
            instantiatesUri,
            basedOn,
            priorRequest,
            groupIdentifier,
            status,
            intent,
            priority,
            codeReference,
            codeCodeableConcept,
            parameter,
            subject,
            encounter,
            occurrenceDateTime,
            occurrencePeriod,
            occurrenceTiming,
            authoredOn,
            requester,
            performerType,
            performer,
            reasonCode,
            reasonReference,
            insurance,
            supportingInfo,
            note,
            relevantHistory,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'DeviceRequest',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'DeviceRequest';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            instantiatesCanonical: this.instantiatesCanonical,
            instantiatesUri: this.instantiatesUri,
            basedOn: this.basedOn && this.basedOn.map(v => v.toJSON()),
            priorRequest: this.priorRequest && this.priorRequest.map(v => v.toJSON()),
            groupIdentifier: this.groupIdentifier && this.groupIdentifier.toJSON(),
            status: this.status,
            intent: this.intent,
            priority: this.priority,
            codeReference: this.codeReference && this.codeReference.toJSON(),
            codeCodeableConcept: this.codeCodeableConcept && this.codeCodeableConcept.toJSON(),
            parameter: this.parameter && this.parameter.map(v => v.toJSON()),
            subject: this.subject && this.subject.toJSON(),
            encounter: this.encounter && this.encounter.toJSON(),
            occurrenceDateTime: this.occurrenceDateTime,
            occurrencePeriod: this.occurrencePeriod && this.occurrencePeriod.toJSON(),
            occurrenceTiming: this.occurrenceTiming && this.occurrenceTiming.toJSON(),
            authoredOn: this.authoredOn,
            requester: this.requester && this.requester.toJSON(),
            performerType: this.performerType && this.performerType.toJSON(),
            performer: this.performer && this.performer.toJSON(),
            reasonCode: this.reasonCode && this.reasonCode.map(v => v.toJSON()),
            reasonReference: this.reasonReference && this.reasonReference.map(v => v.toJSON()),
            insurance: this.insurance && this.insurance.map(v => v.toJSON()),
            supportingInfo: this.supportingInfo && this.supportingInfo.map(v => v.toJSON()),
            note: this.note && this.note.map(v => v.toJSON()),
            relevantHistory: this.relevantHistory && this.relevantHistory.map(v => v.toJSON()),
        };
    }
}

module.exports = DeviceRequest;
