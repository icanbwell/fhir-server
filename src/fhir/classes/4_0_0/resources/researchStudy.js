/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');
const async = require('async');


/**
ResearchStudy
    A process where a researcher or organization plans and then executes a series
    of steps intended to increase the field of healthcare-related knowledge.  This
    includes studies of safety, efficacy, comparative effectiveness and other
    information about medications, devices, therapies and other interventional and
    investigative techniques.  A ResearchStudy involves the gathering of
    information about human or animal subjects.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class ResearchStudy extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {String|undefined} [title],
     * @param {Reference[]|undefined} [protocol],
     * @param {Reference[]|undefined} [partOf],
     * @param {code} status,
     * @param {CodeableConcept|undefined} [primaryPurposeType],
     * @param {CodeableConcept|undefined} [phase],
     * @param {CodeableConcept[]|undefined} [category],
     * @param {CodeableConcept[]|undefined} [focus],
     * @param {CodeableConcept[]|undefined} [condition],
     * @param {ContactDetail[]|undefined} [contact],
     * @param {RelatedArtifact[]|undefined} [relatedArtifact],
     * @param {CodeableConcept[]|undefined} [keyword],
     * @param {CodeableConcept[]|undefined} [location],
     * @param {markdown|undefined} [description],
     * @param {Reference[]|undefined} [enrollment],
     * @param {Period|undefined} [period],
     * @param {Reference|undefined} [sponsor],
     * @param {Reference|undefined} [principalInvestigator],
     * @param {Reference[]|undefined} [site],
     * @param {CodeableConcept|undefined} [reasonStopped],
     * @param {Annotation[]|undefined} [note],
     * @param {ResearchStudyArm[]|undefined} [arm],
     * @param {ResearchStudyObjective[]|undefined} [objective],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            title,
            protocol,
            partOf,
            status,
            primaryPurposeType,
            phase,
            category,
            focus,
            condition,
            contact,
            relatedArtifact,
            keyword,
            location,
            description,
            enrollment,
            period,
            sponsor,
            principalInvestigator,
            site,
            reasonStopped,
            note,
            arm,
            objective,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.meta = undefined;
                    return;
                }
                const Meta = require('../complex_types/meta.js');
                if (valueProvided instanceof Meta){
                    this.__data.meta = valueProvided;
                } else {
                    this.__data.meta = new Meta(valueProvided);
                }
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.implicitRules = undefined;
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.language = undefined;
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.text = undefined;
                    return;
                }
                const Narrative = require('../complex_types/narrative.js');
                if (valueProvided instanceof Narrative){
                    this.__data.text = valueProvided;
                } else {
                    this.__data.text = new Narrative(valueProvided);
                }
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.contained = undefined;
                    return;
                }
                const ResourceContainer = require('../simple_types/resourceContainer.js');
                const {getResource} = require('../../../../operations/common/getResource');
                if (Array.isArray(valueProvided)) {
                    this.__data.contained = valueProvided.filter(v => v).map(v => {
                        if (v instanceof Resource) {
                            return v;
                        }
                        const ResourceCreator = getResource('4_0_0', v.resourceType);
                        return new ResourceCreator(v);
                    });
                } else {
                    if (valueProvided instanceof Resource) {
                        this.__data.contained = [valueProvided];
                    } else {
                        const ResourceCreator = getResource('4_0_0', valueProvided.resourceType);
                        this.__data.contained = [new ResourceCreator(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.extension = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Extension ?
                                v : new Extension(v)
                            );
                } else {
                    if (valueProvided instanceof Extension) {
                        this.__data.extension = valueProvided;
                    } else {
                        this.__data.extension = [new Extension(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.modifierExtension = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Extension ?
                                v : new Extension(v)
                            );
                } else {
                    if (valueProvided instanceof Extension) {
                        this.__data.modifierExtension = valueProvided;
                    } else {
                        this.__data.modifierExtension = [new Extension(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Identifiers assigned to this research study by the sponsor or other systems.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.identifier = undefined;
                    return;
                }
                const Identifier = require('../complex_types/identifier.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.identifier = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Identifier ?
                                v : new Identifier(v)
                            );
                } else {
                    if (valueProvided instanceof Identifier) {
                        this.__data.identifier = valueProvided;
                    } else {
                        this.__data.identifier = [new Identifier(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description A short, descriptive user-friendly label for the study.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'title', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.title,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.title = undefined;
                    return;
                }
                this.__data.title = valueProvided;
            }
        });

        /**
         * @description The set of steps expected to be performed as part of the execution of the
    study.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'protocol', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.protocol,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.protocol = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.protocol = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Reference ?
                                v : new Reference(v)
                            );
                } else {
                    if (valueProvided instanceof Reference) {
                        this.__data.protocol = valueProvided;
                    } else {
                        this.__data.protocol = [new Reference(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description A larger research study of which this particular study is a component or step.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'partOf', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.partOf,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.partOf = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.partOf = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Reference ?
                                v : new Reference(v)
                            );
                } else {
                    if (valueProvided instanceof Reference) {
                        this.__data.partOf = valueProvided;
                    } else {
                        this.__data.partOf = [new Reference(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description The current state of the study.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.status = undefined;
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description The type of study based upon the intent of the study's activities. A
    classification of the intent of the study.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'primaryPurposeType', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.primaryPurposeType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.primaryPurposeType = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (valueProvided instanceof CodeableConcept){
                    this.__data.primaryPurposeType = valueProvided;
                } else {
                    this.__data.primaryPurposeType = new CodeableConcept(valueProvided);
                }
            }
        });

        /**
         * @description The stage in the progression of a therapy from initial experimental use in
    humans in clinical trials to post-market evaluation.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'phase', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.phase,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.phase = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (valueProvided instanceof CodeableConcept){
                    this.__data.phase = valueProvided;
                } else {
                    this.__data.phase = new CodeableConcept(valueProvided);
                }
            }
        });

        /**
         * @description Codes categorizing the type of study such as investigational vs.
    observational, type of blinding, type of randomization, safety vs. efficacy,
    etc.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'category', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.category,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.category = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.category = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof CodeableConcept ?
                                v : new CodeableConcept(v)
                            );
                } else {
                    if (valueProvided instanceof CodeableConcept) {
                        this.__data.category = valueProvided;
                    } else {
                        this.__data.category = [new CodeableConcept(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description The medication(s), food(s), therapy(ies), device(s) or other concerns or
    interventions that the study is seeking to gain more information about.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'focus', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.focus,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.focus = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.focus = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof CodeableConcept ?
                                v : new CodeableConcept(v)
                            );
                } else {
                    if (valueProvided instanceof CodeableConcept) {
                        this.__data.focus = valueProvided;
                    } else {
                        this.__data.focus = [new CodeableConcept(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description The condition that is the focus of the study.  For example, In a study to
    examine risk factors for Lupus, might have as an inclusion criterion "healthy
    volunteer", but the target condition code would be a Lupus SNOMED code.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'condition', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.condition,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.condition = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.condition = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof CodeableConcept ?
                                v : new CodeableConcept(v)
                            );
                } else {
                    if (valueProvided instanceof CodeableConcept) {
                        this.__data.condition = valueProvided;
                    } else {
                        this.__data.condition = [new CodeableConcept(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Contact details to assist a user in learning more about or engaging with the
    study.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'contact', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contact,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.contact = undefined;
                    return;
                }
                const ContactDetail = require('../complex_types/contactDetail.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.contact = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof ContactDetail ?
                                v : new ContactDetail(v)
                            );
                } else {
                    if (valueProvided instanceof ContactDetail) {
                        this.__data.contact = valueProvided;
                    } else {
                        this.__data.contact = [new ContactDetail(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Citations, references and other related documents.
         * @property {RelatedArtifact[]|undefined}
        */
        Object.defineProperty(this, 'relatedArtifact', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.relatedArtifact,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.relatedArtifact = undefined;
                    return;
                }
                const RelatedArtifact = require('../complex_types/relatedArtifact.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.relatedArtifact = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof RelatedArtifact ?
                                v : new RelatedArtifact(v)
                            );
                } else {
                    if (valueProvided instanceof RelatedArtifact) {
                        this.__data.relatedArtifact = valueProvided;
                    } else {
                        this.__data.relatedArtifact = [new RelatedArtifact(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Key terms to aid in searching for or filtering the study.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'keyword', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.keyword,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.keyword = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.keyword = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof CodeableConcept ?
                                v : new CodeableConcept(v)
                            );
                } else {
                    if (valueProvided instanceof CodeableConcept) {
                        this.__data.keyword = valueProvided;
                    } else {
                        this.__data.keyword = [new CodeableConcept(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Indicates a country, state or other region where the study is taking place.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'location', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.location,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.location = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.location = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof CodeableConcept ?
                                v : new CodeableConcept(v)
                            );
                } else {
                    if (valueProvided instanceof CodeableConcept) {
                        this.__data.location = valueProvided;
                    } else {
                        this.__data.location = [new CodeableConcept(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description A full description of how the study is being conducted.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'description', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.description = undefined;
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description Reference to a Group that defines the criteria for and quantity of subjects
    participating in the study.  E.g. " 200 female Europeans between the ages of
    20 and 45 with early onset diabetes".
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'enrollment', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.enrollment,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.enrollment = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.enrollment = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Reference ?
                                v : new Reference(v)
                            );
                } else {
                    if (valueProvided instanceof Reference) {
                        this.__data.enrollment = valueProvided;
                    } else {
                        this.__data.enrollment = [new Reference(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Identifies the start date and the expected (or actual, depending on status)
    end date for the study.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'period', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.period,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.period = undefined;
                    return;
                }
                const Period = require('../complex_types/period.js');
                if (valueProvided instanceof Period){
                    this.__data.period = valueProvided;
                } else {
                    this.__data.period = new Period(valueProvided);
                }
            }
        });

        /**
         * @description An organization that initiates the investigation and is legally responsible
    for the study.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'sponsor', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.sponsor,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.sponsor = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (valueProvided instanceof Reference){
                    this.__data.sponsor = valueProvided;
                } else {
                    this.__data.sponsor = new Reference(valueProvided);
                }
            }
        });

        /**
         * @description A researcher in a study who oversees multiple aspects of the study, such as
    concept development, protocol writing, protocol submission for IRB approval,
    participant recruitment, informed consent, data collection, analysis,
    interpretation and presentation.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'principalInvestigator', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.principalInvestigator,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.principalInvestigator = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (valueProvided instanceof Reference){
                    this.__data.principalInvestigator = valueProvided;
                } else {
                    this.__data.principalInvestigator = new Reference(valueProvided);
                }
            }
        });

        /**
         * @description A facility in which study activities are conducted.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'site', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.site,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.site = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.site = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Reference ?
                                v : new Reference(v)
                            );
                } else {
                    if (valueProvided instanceof Reference) {
                        this.__data.site = valueProvided;
                    } else {
                        this.__data.site = [new Reference(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description A description and/or code explaining the premature termination of the study.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'reasonStopped', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.reasonStopped,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.reasonStopped = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (valueProvided instanceof CodeableConcept){
                    this.__data.reasonStopped = valueProvided;
                } else {
                    this.__data.reasonStopped = new CodeableConcept(valueProvided);
                }
            }
        });

        /**
         * @description Comments made about the study by the performer, subject or other participants.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.note,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.note = undefined;
                    return;
                }
                const Annotation = require('../complex_types/annotation.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.note = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Annotation ?
                                v : new Annotation(v)
                            );
                } else {
                    if (valueProvided instanceof Annotation) {
                        this.__data.note = valueProvided;
                    } else {
                        this.__data.note = [new Annotation(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Describes an expected sequence of events for one of the participants of a
    study.  E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out,
    follow-up.
         * @property {ResearchStudyArm[]|undefined}
        */
        Object.defineProperty(this, 'arm', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.arm,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.arm = undefined;
                    return;
                }
                const ResearchStudyArm = require('../backbone_elements/researchStudyArm.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.arm = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof ResearchStudyArm ?
                                v : new ResearchStudyArm(v)
                            );
                } else {
                    if (valueProvided instanceof ResearchStudyArm) {
                        this.__data.arm = valueProvided;
                    } else {
                        this.__data.arm = [new ResearchStudyArm(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description A goal that the study is aiming to achieve in terms of a scientific question
    to be answered by the analysis of data collected during the study.
         * @property {ResearchStudyObjective[]|undefined}
        */
        Object.defineProperty(this, 'objective', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.objective,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.objective = undefined;
                    return;
                }
                const ResearchStudyObjective = require('../backbone_elements/researchStudyObjective.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.objective = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof ResearchStudyObjective ?
                                v : new ResearchStudyObjective(v)
                            );
                } else {
                    if (valueProvided instanceof ResearchStudyObjective) {
                        this.__data.objective = valueProvided;
                    } else {
                        this.__data.objective = [new ResearchStudyObjective(valueProvided)];
                    }
                }
            }
        });


        /**
         * @description _access
         * @property {Object|undefined}
         */
        Object.defineProperty(this, '_access', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._access,
            set: valueProvided => {
                this.__data._access = valueProvided;
            }
        });
        /**
         * @description _sourceAssigningAuthority
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceAssigningAuthority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceAssigningAuthority,
            set: valueProvided => {
                this.__data._sourceAssigningAuthority = valueProvided;
            }
        });
        /**
         * @description _uuid
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_uuid', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._uuid,
            set: valueProvided => {
                this.__data._uuid = valueProvided;
            }
        });
        /**
         * @description _sourceId
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceId,
            set: valueProvided => {
                this.__data._sourceId = valueProvided;
            }
        });


        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            title,
            protocol,
            partOf,
            status,
            primaryPurposeType,
            phase,
            category,
            focus,
            condition,
            contact,
            relatedArtifact,
            keyword,
            location,
            description,
            enrollment,
            period,
            sponsor,
            principalInvestigator,
            site,
            reasonStopped,
            note,
            arm,
            objective,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        });

        /**
         * @description Define a default non-writable resourceType property
         * @property {string|undefined}
         */
        Object.defineProperty(this, 'resourceType', {
            value: 'ResearchStudy',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    /**
     * @description Define a default non-writable resourceType property
     * @property {string|undefined}
     */
    static get resourceType() {
        return 'ResearchStudy';
    }

    /**
     * @description Creates a blank new resource
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {String|undefined} [title],
     * @param {Reference[]|undefined} [protocol],
     * @param {Reference[]|undefined} [partOf],
     * @param {code} status,
     * @param {CodeableConcept|undefined} [primaryPurposeType],
     * @param {CodeableConcept|undefined} [phase],
     * @param {CodeableConcept[]|undefined} [category],
     * @param {CodeableConcept[]|undefined} [focus],
     * @param {CodeableConcept[]|undefined} [condition],
     * @param {ContactDetail[]|undefined} [contact],
     * @param {RelatedArtifact[]|undefined} [relatedArtifact],
     * @param {CodeableConcept[]|undefined} [keyword],
     * @param {CodeableConcept[]|undefined} [location],
     * @param {markdown|undefined} [description],
     * @param {Reference[]|undefined} [enrollment],
     * @param {Period|undefined} [period],
     * @param {Reference|undefined} [sponsor],
     * @param {Reference|undefined} [principalInvestigator],
     * @param {Reference[]|undefined} [site],
     * @param {CodeableConcept|undefined} [reasonStopped],
     * @param {Annotation[]|undefined} [note],
     * @param {ResearchStudyArm[]|undefined} [arm],
     * @param {ResearchStudyObjective[]|undefined} [objective],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
     * @returns {ResearchStudy}
    */
    create(
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            title,
            protocol,
            partOf,
            status,
            primaryPurposeType,
            phase,
            category,
            focus,
            condition,
            contact,
            relatedArtifact,
            keyword,
            location,
            description,
            enrollment,
            period,
            sponsor,
            principalInvestigator,
            site,
            reasonStopped,
            note,
            arm,
            objective,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        }
    ) {
        return new ResearchStudy({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            title,
            protocol,
            partOf,
            status,
            primaryPurposeType,
            phase,
            category,
            focus,
            condition,
            contact,
            relatedArtifact,
            keyword,
            location,
            description,
            enrollment,
            period,
            sponsor,
            principalInvestigator,
            site,
            reasonStopped,
            note,
            arm,
            objective,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {ResearchStudy}
    */
    clone() {
        return new ResearchStudy(this.toJSONInternal());
    }


    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            title: this.title,
            protocol: this.protocol && this.protocol.map(v => v.toJSON()),
            partOf: this.partOf && this.partOf.map(v => v.toJSON()),
            status: this.status,
            primaryPurposeType: this.primaryPurposeType && this.primaryPurposeType.toJSON(),
            phase: this.phase && this.phase.toJSON(),
            category: this.category && this.category.map(v => v.toJSON()),
            focus: this.focus && this.focus.map(v => v.toJSON()),
            condition: this.condition && this.condition.map(v => v.toJSON()),
            contact: this.contact && this.contact.map(v => v.toJSON()),
            relatedArtifact: this.relatedArtifact && this.relatedArtifact.map(v => v.toJSON()),
            keyword: this.keyword && this.keyword.map(v => v.toJSON()),
            location: this.location && this.location.map(v => v.toJSON()),
            description: this.description,
            enrollment: this.enrollment && this.enrollment.map(v => v.toJSON()),
            period: this.period && this.period.toJSON(),
            sponsor: this.sponsor && this.sponsor.toJSON(),
            principalInvestigator: this.principalInvestigator && this.principalInvestigator.toJSON(),
            site: this.site && this.site.map(v => v.toJSON()),
            reasonStopped: this.reasonStopped && this.reasonStopped.toJSON(),
            note: this.note && this.note.map(v => v.toJSON()),
            arm: this.arm && this.arm.map(v => v.toJSON()),
            objective: this.objective && this.objective.map(v => v.toJSON()),
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync({fnUpdateReferenceAsync}) {
            if (this.meta) {await this.meta.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.text) {await this.text.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.contained) {await async.each(this.contained, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.extension) {await async.each(this.extension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.modifierExtension) {await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.identifier) {await async.each(this.identifier, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.protocol) {await async.each(this.protocol, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.partOf) {await async.each(this.partOf, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.primaryPurposeType) {await this.primaryPurposeType.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.phase) {await this.phase.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.category) {await async.each(this.category, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.focus) {await async.each(this.focus, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.condition) {await async.each(this.condition, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.contact) {await async.each(this.contact, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.relatedArtifact) {await async.each(this.relatedArtifact, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.keyword) {await async.each(this.keyword, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.location) {await async.each(this.location, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.enrollment) {await async.each(this.enrollment, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.period) {await this.period.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.sponsor) {await this.sponsor.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.principalInvestigator) {await this.principalInvestigator.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.site) {await async.each(this.site, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.reasonStopped) {await this.reasonStopped.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.note) {await async.each(this.note, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.arm) {await async.each(this.arm, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.objective) {await async.each(this.objective, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal() {
        const {removeNull} = require('../../../../utils/nullRemover');
        const json = {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSONInternal(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSONInternal(),
            contained: this.contained && this.contained.map(v => v.toJSONInternal()),
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            identifier: this.identifier && this.identifier.map(v => v.toJSONInternal()),
            title: this.title,
            protocol: this.protocol && this.protocol.map(v => v.toJSONInternal()),
            partOf: this.partOf && this.partOf.map(v => v.toJSONInternal()),
            status: this.status,
            primaryPurposeType: this.primaryPurposeType && this.primaryPurposeType.toJSONInternal(),
            phase: this.phase && this.phase.toJSONInternal(),
            category: this.category && this.category.map(v => v.toJSONInternal()),
            focus: this.focus && this.focus.map(v => v.toJSONInternal()),
            condition: this.condition && this.condition.map(v => v.toJSONInternal()),
            contact: this.contact && this.contact.map(v => v.toJSONInternal()),
            relatedArtifact: this.relatedArtifact && this.relatedArtifact.map(v => v.toJSONInternal()),
            keyword: this.keyword && this.keyword.map(v => v.toJSONInternal()),
            location: this.location && this.location.map(v => v.toJSONInternal()),
            description: this.description,
            enrollment: this.enrollment && this.enrollment.map(v => v.toJSONInternal()),
            period: this.period && this.period.toJSONInternal(),
            sponsor: this.sponsor && this.sponsor.toJSONInternal(),
            principalInvestigator: this.principalInvestigator && this.principalInvestigator.toJSONInternal(),
            site: this.site && this.site.map(v => v.toJSONInternal()),
            reasonStopped: this.reasonStopped && this.reasonStopped.toJSONInternal(),
            note: this.note && this.note.map(v => v.toJSONInternal()),
            arm: this.arm && this.arm.map(v => v.toJSONInternal()),
            objective: this.objective && this.objective.map(v => v.toJSONInternal()),
        };


        if (this._access) {
            json._access = this._access;
        }
        if (this._sourceAssigningAuthority) {
            json._sourceAssigningAuthority = this._sourceAssigningAuthority;
        }
        if (this._uuid) {
            json._uuid = this._uuid;
        }
        if (this._sourceId) {
            json._sourceId = this._sourceId;
        }

        return removeNull(json);
    }
}

module.exports = ResearchStudy;
