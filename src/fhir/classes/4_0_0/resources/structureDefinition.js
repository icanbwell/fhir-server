/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

/**
StructureDefinition
    A definition of a FHIR structure. This resource is used to describe the
    underlying resources, data types defined in FHIR, and also for describing
    extensions and constraints on resources and data types.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class StructureDefinition {
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            identifier,
            version,
            name,
            title,
            status,
            experimental,
            date,
            publisher,
            contact,
            description,
            useContext,
            jurisdiction,
            purpose,
            copyright,
            keyword,
            fhirVersion,
            mapping,
            kind,
            abstract,
            context,
            contextInvariant,
            type,
            baseDefinition,
            derivation,
            snapshot,
            differential,
        }
    ) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.contained = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description An absolute URI that is used to identify this structure definition when it is
    referenced in a specification, model, design or an instance; also called its
    canonical identifier. This SHOULD be globally unique and SHOULD be a literal
    address at which at which an authoritative instance of this structure
    definition is (or will be) published. This URL can be the target of a
    canonical reference. It SHALL remain the same when the structure definition is
    stored on different servers.
         * @property {uri}
        */
        Object.defineProperty(this, 'url', {
            enumerable: true,
            get: () => this.__data.url,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.url = valueProvided;
            }
        });

        /**
         * @description A formal identifier that is used to identify this structure definition when it
    is represented in other formats, or referenced in a specification, model,
    design or an instance.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(valueProvided) ? valueProvided.map(v => new Identifier(v)) : [new Identifier(valueProvided)];
            }
        });

        /**
         * @description The identifier that is used to identify this version of the structure
    definition when it is referenced in a specification, model, design or
    instance. This is an arbitrary value managed by the structure definition
    author and is not expected to be globally unique. For example, it might be a
    timestamp (e.g. yyyymmdd) if a managed version is not available. There is also
    no expectation that versions can be placed in a lexicographical sequence.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'version', {
            enumerable: true,
            get: () => this.__data.version,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.version = valueProvided;
            }
        });

        /**
         * @description A natural language name identifying the structure definition. This name should
    be usable as an identifier for the module by machine processing applications
    such as code generation.
         * @property {String}
        */
        Object.defineProperty(this, 'name', {
            enumerable: true,
            get: () => this.__data.name,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.name = valueProvided;
            }
        });

        /**
         * @description A short, descriptive, user-friendly title for the structure definition.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'title', {
            enumerable: true,
            get: () => this.__data.title,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.title = valueProvided;
            }
        });

        /**
         * @description The status of this structure definition. Enables tracking the life-cycle of
    the content.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description A Boolean value to indicate that this structure definition is authored for
    testing purposes (or education/evaluation/marketing) and is not intended to be
    used for genuine usage.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'experimental', {
            enumerable: true,
            get: () => this.__data.experimental,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.experimental = valueProvided;
            }
        });

        /**
         * @description The date  (and optionally time) when the structure definition was published.
    The date must change when the business version changes and it must change if
    the status code changes. In addition, it should change when the substantive
    content of the structure definition changes.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'date', {
            enumerable: true,
            get: () => this.__data.date,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.date = valueProvided;
            }
        });

        /**
         * @description The name of the organization or individual that published the structure
    definition.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'publisher', {
            enumerable: true,
            get: () => this.__data.publisher,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.publisher = valueProvided;
            }
        });

        /**
         * @description Contact details to assist a user in finding and communicating with the
    publisher.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'contact', {
            enumerable: true,
            get: () => this.__data.contact,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.contact = Array.isArray(valueProvided) ? valueProvided.map(v => new ContactDetail(v)) : [new ContactDetail(valueProvided)];
            }
        });

        /**
         * @description A free text natural language description of the structure definition from a
    consumer's perspective.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description The content was developed with a focus and intent of supporting the contexts
    that are listed. These contexts may be general categories (gender, age, ...)
    or may be references to specific programs (insurance plans, studies, ...) and
    may be used to assist with indexing and searching for appropriate structure
    definition instances.
         * @property {UsageContext[]|undefined}
        */
        Object.defineProperty(this, 'useContext', {
            enumerable: true,
            get: () => this.__data.useContext,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let UsageContext = require('../complex_types/usageContext.js');
                this.__data.useContext = Array.isArray(valueProvided) ? valueProvided.map(v => new UsageContext(v)) : [new UsageContext(valueProvided)];
            }
        });

        /**
         * @description A legal or geographic region in which the structure definition is intended to
    be used.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'jurisdiction', {
            enumerable: true,
            get: () => this.__data.jurisdiction,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.jurisdiction = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Explanation of why this structure definition is needed and why it has been
    designed as it has.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'purpose', {
            enumerable: true,
            get: () => this.__data.purpose,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.purpose = valueProvided;
            }
        });

        /**
         * @description A copyright statement relating to the structure definition and/or its
    contents. Copyright statements are generally legal restrictions on the use and
    publishing of the structure definition.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'copyright', {
            enumerable: true,
            get: () => this.__data.copyright,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.copyright = valueProvided;
            }
        });

        /**
         * @description A set of key words or terms from external terminologies that may be used to
    assist with indexing and searching of templates nby describing the use of this
    structure definition, or the content it describes.
         * @property {Coding[]|undefined}
        */
        Object.defineProperty(this, 'keyword', {
            enumerable: true,
            get: () => this.__data.keyword,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.keyword = Array.isArray(valueProvided) ? valueProvided.map(v => new Coding(v)) : [new Coding(valueProvided)];
            }
        });

        /**
         * @description The version of the FHIR specification on which this StructureDefinition is
    based - this is the formal version of the specification, without the revision
    number, e.g. [publication].[major].[minor], which is 4.0.1. for this version.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'fhirVersion', {
            enumerable: true,
            get: () => this.__data.fhirVersion,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.fhirVersion = valueProvided;
            }
        });

        /**
         * @description An external specification that the content is mapped to.
         * @property {StructureDefinitionMapping[]|undefined}
        */
        Object.defineProperty(this, 'mapping', {
            enumerable: true,
            get: () => this.__data.mapping,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let StructureDefinitionMapping = require('../backbone_elements/structureDefinitionMapping.js');
                this.__data.mapping = Array.isArray(valueProvided) ? valueProvided.map(v => new StructureDefinitionMapping(v)) : [new StructureDefinitionMapping(valueProvided)];
            }
        });

        /**
         * @description Defines the kind of structure that this definition is describing.
         * @property {code}
        */
        Object.defineProperty(this, 'kind', {
            enumerable: true,
            get: () => this.__data.kind,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.kind = valueProvided;
            }
        });

        /**
         * @description Whether structure this definition describes is abstract or not  - that is,
    whether the structure is not intended to be instantiated. For Resources and
    Data types, abstract types will never be exchanged  between systems.
         * @property {Boolean}
        */
        Object.defineProperty(this, 'abstract', {
            enumerable: true,
            get: () => this.__data.abstract,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.abstract = valueProvided;
            }
        });

        /**
         * @description Identifies the types of resource or data type elements to which the extension
    can be applied.
         * @property {StructureDefinitionContext[]|undefined}
        */
        Object.defineProperty(this, 'context', {
            enumerable: true,
            get: () => this.__data.context,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let StructureDefinitionContext = require('../backbone_elements/structureDefinitionContext.js');
                this.__data.context = Array.isArray(valueProvided) ? valueProvided.map(v => new StructureDefinitionContext(v)) : [new StructureDefinitionContext(valueProvided)];
            }
        });

        /**
         * @description A set of rules as FHIRPath Invariants about when the extension can be used
    (e.g. co-occurrence variants for the extension). All the rules must be true.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'contextInvariant', {
            enumerable: true,
            get: () => this.__data.contextInvariant,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.contextInvariant = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description The type this structure describes. If the derivation kind is 'specialization'
    then this is the master definition for a type, and there is always one of
    these (a data type, an extension, a resource, including abstract ones).
    Otherwise the structure definition is a constraint on the stated type (and in
    this case, the type cannot be an abstract type).  References are URLs that are
    relative to http://hl7.org/fhir/StructureDefinition e.g. "string" is a
    reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are
    only allowed in logical models.
         * @property {uri}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.type = valueProvided;
            }
        });

        /**
         * @description An absolute URI that is the base structure from which this type is derived,
    either by specialization or constraint.
         * @property {canonical|undefined}
        */
        Object.defineProperty(this, 'baseDefinition', {
            enumerable: true,
            get: () => this.__data.baseDefinition,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.baseDefinition = valueProvided;
            }
        });

        /**
         * @description How the type relates to the baseDefinition.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'derivation', {
            enumerable: true,
            get: () => this.__data.derivation,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.derivation = valueProvided;
            }
        });

        /**
         * @description A snapshot view is expressed in a standalone form that can be used and
    interpreted without considering the base StructureDefinition.
         * @property {StructureDefinitionSnapshot|undefined}
        */
        Object.defineProperty(this, 'snapshot', {
            enumerable: true,
            get: () => this.__data.snapshot,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let StructureDefinitionSnapshot = require('../backbone_elements/structureDefinitionSnapshot.js');
                this.__data.snapshot = new StructureDefinitionSnapshot(valueProvided);
            }
        });

        /**
         * @description A differential view is expressed relative to the base StructureDefinition - a
    statement of differences that it applies.
         * @property {StructureDefinitionDifferential|undefined}
        */
        Object.defineProperty(this, 'differential', {
            enumerable: true,
            get: () => this.__data.differential,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let StructureDefinitionDifferential = require('../backbone_elements/structureDefinitionDifferential.js');
                this.__data.differential = new StructureDefinitionDifferential(valueProvided);
            }
        });

        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            identifier,
            version,
            name,
            title,
            status,
            experimental,
            date,
            publisher,
            contact,
            description,
            useContext,
            jurisdiction,
            purpose,
            copyright,
            keyword,
            fhirVersion,
            mapping,
            kind,
            abstract,
            context,
            contextInvariant,
            type,
            baseDefinition,
            derivation,
            snapshot,
            differential,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'StructureDefinition',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'StructureDefinition';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            url: this.url,
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            version: this.version,
            name: this.name,
            title: this.title,
            status: this.status,
            experimental: this.experimental,
            date: this.date,
            publisher: this.publisher,
            contact: this.contact && this.contact.map(v => v.toJSON()),
            description: this.description,
            useContext: this.useContext && this.useContext.map(v => v.toJSON()),
            jurisdiction: this.jurisdiction && this.jurisdiction.map(v => v.toJSON()),
            purpose: this.purpose,
            copyright: this.copyright,
            keyword: this.keyword && this.keyword.map(v => v.toJSON()),
            fhirVersion: this.fhirVersion,
            mapping: this.mapping && this.mapping.map(v => v.toJSON()),
            kind: this.kind,
            abstract: this.abstract,
            context: this.context && this.context.map(v => v.toJSON()),
            contextInvariant: this.contextInvariant,
            type: this.type,
            baseDefinition: this.baseDefinition,
            derivation: this.derivation,
            snapshot: this.snapshot && this.snapshot.toJSON(),
            differential: this.differential && this.differential.toJSON(),
        };
    }
}

module.exports = StructureDefinition;
