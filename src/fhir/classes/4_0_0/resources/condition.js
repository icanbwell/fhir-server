// This file is auto-generated by generate_classes so do not edit manually

/**
Condition
    A clinical condition, problem, diagnosis, or other event, situation, issue, or
    clinical concept that has risen to a level of concern.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class Condition {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.implicitRules = value;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.contained = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description Business identifiers assigned to this condition by the performer or other
    systems which remain constant as the resource is updated and propagates from
    server to server.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(value) ? value.map(v => new Identifier(v)) : [new Identifier(value)];
            }
        });

        /**
         * @description The clinical status of the condition.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'clinicalStatus', {
            enumerable: true,
            get: () => this.__data.clinicalStatus,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.clinicalStatus = new CodeableConcept(value);
            }
        });

        /**
         * @description The verification status to support the clinical status of the condition.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'verificationStatus', {
            enumerable: true,
            get: () => this.__data.verificationStatus,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.verificationStatus = new CodeableConcept(value);
            }
        });

        /**
         * @description A category assigned to the condition.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'category', {
            enumerable: true,
            get: () => this.__data.category,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.category = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description A subjective assessment of the severity of the condition as evaluated by the
    clinician.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'severity', {
            enumerable: true,
            get: () => this.__data.severity,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.severity = new CodeableConcept(value);
            }
        });

        /**
         * @description Identification of the condition, problem or diagnosis.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            get: () => this.__data.code,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.code = new CodeableConcept(value);
            }
        });

        /**
         * @description The anatomical location where this condition manifests itself.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'bodySite', {
            enumerable: true,
            get: () => this.__data.bodySite,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.bodySite = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description Indicates the patient or group who the condition record is associated with.
         * @property {ConditionSubject}
        */
        Object.defineProperty(this, 'subject', {
            enumerable: true,
            get: () => this.__data.subject,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.subject = new Reference(value);
            }
        });

        /**
         * @description The Encounter during which this Condition was created or to which the creation
    of this record is tightly associated.
         * @property {Encounter|undefined}
        */
        Object.defineProperty(this, 'encounter', {
            enumerable: true,
            get: () => this.__data.encounter,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.encounter = new Reference(value);
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'onsetDateTime', {
            enumerable: true,
            get: () => this.__data.onsetDateTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.onsetDateTime = value;
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'onsetAge', {
            enumerable: true,
            get: () => this.__data.onsetAge,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.onsetAge = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'onsetPeriod', {
            enumerable: true,
            get: () => this.__data.onsetPeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.onsetPeriod = new Period(value);
            }
        });

        /**
         * @description None
         * @property {Range|undefined}
        */
        Object.defineProperty(this, 'onsetRange', {
            enumerable: true,
            get: () => this.__data.onsetRange,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Range = require('../complex_types/range.js');
                this.__data.onsetRange = new Range(value);
            }
        });

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'onsetString', {
            enumerable: true,
            get: () => this.__data.onsetString,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.onsetString = value;
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'abatementDateTime', {
            enumerable: true,
            get: () => this.__data.abatementDateTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.abatementDateTime = value;
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'abatementAge', {
            enumerable: true,
            get: () => this.__data.abatementAge,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.abatementAge = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'abatementPeriod', {
            enumerable: true,
            get: () => this.__data.abatementPeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.abatementPeriod = new Period(value);
            }
        });

        /**
         * @description None
         * @property {Range|undefined}
        */
        Object.defineProperty(this, 'abatementRange', {
            enumerable: true,
            get: () => this.__data.abatementRange,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Range = require('../complex_types/range.js');
                this.__data.abatementRange = new Range(value);
            }
        });

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'abatementString', {
            enumerable: true,
            get: () => this.__data.abatementString,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.abatementString = value;
            }
        });

        /**
         * @description The recordedDate represents when this particular Condition record was created
    in the system, which is often a system-generated date.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'recordedDate', {
            enumerable: true,
            get: () => this.__data.recordedDate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.recordedDate = value;
            }
        });

        /**
         * @description Individual who recorded the record and takes responsibility for its content.
         * @property {ConditionRecorder|undefined}
        */
        Object.defineProperty(this, 'recorder', {
            enumerable: true,
            get: () => this.__data.recorder,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.recorder = new Reference(value);
            }
        });

        /**
         * @description Individual who is making the condition statement.
         * @property {ConditionAsserter|undefined}
        */
        Object.defineProperty(this, 'asserter', {
            enumerable: true,
            get: () => this.__data.asserter,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.asserter = new Reference(value);
            }
        });

        /**
         * @description Clinical stage or grade of a condition. May include formal severity
    assessments.
         * @property {ConditionStage[]|undefined}
        */
        Object.defineProperty(this, 'stage', {
            enumerable: true,
            get: () => this.__data.stage,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ConditionStage = require('../backbone_elements/conditionStage.js');
                this.__data.stage = Array.isArray(value) ? value.map(v => new ConditionStage(v)) : [new ConditionStage(value)];
            }
        });

        /**
         * @description Supporting evidence / manifestations that are the basis of the Condition's
    verification status, such as evidence that confirmed or refuted the condition.
         * @property {ConditionEvidence[]|undefined}
        */
        Object.defineProperty(this, 'evidence', {
            enumerable: true,
            get: () => this.__data.evidence,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ConditionEvidence = require('../backbone_elements/conditionEvidence.js');
                this.__data.evidence = Array.isArray(value) ? value.map(v => new ConditionEvidence(v)) : [new ConditionEvidence(value)];
            }
        });

        /**
         * @description Additional information about the Condition. This is a general notes/comments
    entry  for description of the Condition, its diagnosis and prognosis.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            enumerable: true,
            get: () => this.__data.note,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.note = Array.isArray(value) ? value.map(v => new Annotation(v)) : [new Annotation(value)];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Condition',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Condition';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            clinicalStatus: this.clinicalStatus && this.clinicalStatus.toJSON(),
            verificationStatus: this.verificationStatus && this.verificationStatus.toJSON(),
            category: this.category && this.category.map(v => v.toJSON()),
            severity: this.severity && this.severity.toJSON(),
            code: this.code && this.code.toJSON(),
            bodySite: this.bodySite && this.bodySite.map(v => v.toJSON()),
            subject: this.subject && this.subject.toJSON(),
            encounter: this.encounter && this.encounter.toJSON(),
            onsetDateTime: this.onsetDateTime,
            onsetAge: this.onsetAge && this.onsetAge.toJSON(),
            onsetPeriod: this.onsetPeriod && this.onsetPeriod.toJSON(),
            onsetRange: this.onsetRange && this.onsetRange.toJSON(),
            onsetString: this.onsetString,
            abatementDateTime: this.abatementDateTime,
            abatementAge: this.abatementAge && this.abatementAge.toJSON(),
            abatementPeriod: this.abatementPeriod && this.abatementPeriod.toJSON(),
            abatementRange: this.abatementRange && this.abatementRange.toJSON(),
            abatementString: this.abatementString,
            recordedDate: this.recordedDate,
            recorder: this.recorder && this.recorder.toJSON(),
            asserter: this.asserter && this.asserter.toJSON(),
            stage: this.stage && this.stage.map(v => v.toJSON()),
            evidence: this.evidence && this.evidence.map(v => v.toJSON()),
            note: this.note && this.note.map(v => v.toJSON()),
        };
    }
}

module.exports = Condition;
