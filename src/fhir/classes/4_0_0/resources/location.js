/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');


/**
Location
    Details and position information for a physical place where services are
    provided and resources and participants may be stored, found, contained, or
    accommodated.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class Location extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {code|undefined} [status],
     * @param {Coding|undefined} [operationalStatus],
     * @param {String|undefined} [name],
     * @param {String[]|undefined} [alias],
     * @param {String|undefined} [description],
     * @param {code|undefined} [mode],
     * @param {CodeableConcept[]|undefined} [type],
     * @param {ContactPoint[]|undefined} [telecom],
     * @param {Address|undefined} [address],
     * @param {CodeableConcept|undefined} [physicalType],
     * @param {LocationPosition|undefined} [position],
     * @param {Reference|undefined} [managingOrganization],
     * @param {Reference|undefined} [partOf],
     * @param {LocationHoursOfOperation[]|undefined} [hoursOfOperation],
     * @param {String|undefined} [availabilityExceptions],
     * @param {Reference[]|undefined} [endpoint],
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            operationalStatus,
            name,
            alias,
            description,
            mode,
            type,
            telecom,
            address,
            physicalType,
            position,
            managingOrganization,
            partOf,
            hoursOfOperation,
            availabilityExceptions,
            endpoint,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.contained = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description Unique code or number identifying the location to its users.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(valueProvided) ? valueProvided.map(v => new Identifier(v)) : [new Identifier(valueProvided)];
            }
        });

        /**
         * @description The status property covers the general availability of the resource, not the
    current value which may be covered by the operationStatus, or by a
    schedule/slots if they are configured for the location.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description The operational status covers operation values most relevant to beds (but can
    also apply to rooms/units/chairs/etc. such as an isolation unit/dialysis
    chair). This typically covers concepts such as contamination, housekeeping,
    and other activities like maintenance.
         * @property {Coding|undefined}
        */
        Object.defineProperty(this, 'operationalStatus', {
            enumerable: true,
            get: () => this.__data.operationalStatus,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.operationalStatus = new Coding(valueProvided);
            }
        });

        /**
         * @description Name of the location as used by humans. Does not need to be unique.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'name', {
            enumerable: true,
            get: () => this.__data.name,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.name = valueProvided;
            }
        });

        /**
         * @description A list of alternate names that the location is known as, or was known as, in
    the past.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'alias', {
            enumerable: true,
            get: () => this.__data.alias,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.alias = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description Description of the Location, which helps in finding or referencing the place.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description Indicates whether a resource instance represents a specific location or a
    class of locations.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'mode', {
            enumerable: true,
            get: () => this.__data.mode,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.mode = valueProvided;
            }
        });

        /**
         * @description Indicates the type of function performed at the location.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.type = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description The contact details of communication devices available at the location. This
    can include phone numbers, fax numbers, mobile numbers, email addresses and
    web sites.
         * @property {ContactPoint[]|undefined}
        */
        Object.defineProperty(this, 'telecom', {
            enumerable: true,
            get: () => this.__data.telecom,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ContactPoint = require('../complex_types/contactPoint.js');
                this.__data.telecom = Array.isArray(valueProvided) ? valueProvided.map(v => new ContactPoint(v)) : [new ContactPoint(valueProvided)];
            }
        });

        /**
         * @description Physical location.
         * @property {Address|undefined}
        */
        Object.defineProperty(this, 'address', {
            enumerable: true,
            get: () => this.__data.address,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Address = require('../complex_types/address.js');
                this.__data.address = new Address(valueProvided);
            }
        });

        /**
         * @description Physical form of the location, e.g. building, room, vehicle, road.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'physicalType', {
            enumerable: true,
            get: () => this.__data.physicalType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.physicalType = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description The absolute geographic location of the Location, expressed using the WGS84
    datum (This is the same co-ordinate system used in KML).
         * @property {LocationPosition|undefined}
        */
        Object.defineProperty(this, 'position', {
            enumerable: true,
            get: () => this.__data.position,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let LocationPosition = require('../backbone_elements/locationPosition.js');
                this.__data.position = new LocationPosition(valueProvided);
            }
        });

        /**
         * @description The organization responsible for the provisioning and upkeep of the location.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'managingOrganization', {
            enumerable: true,
            get: () => this.__data.managingOrganization,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.managingOrganization = new Reference(valueProvided);
            }
        });

        /**
         * @description Another Location of which this Location is physically a part of.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'partOf', {
            enumerable: true,
            get: () => this.__data.partOf,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.partOf = new Reference(valueProvided);
            }
        });

        /**
         * @description What days/times during a week is this location usually open.
         * @property {LocationHoursOfOperation[]|undefined}
        */
        Object.defineProperty(this, 'hoursOfOperation', {
            enumerable: true,
            get: () => this.__data.hoursOfOperation,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let LocationHoursOfOperation = require('../backbone_elements/locationHoursOfOperation.js');
                this.__data.hoursOfOperation = Array.isArray(valueProvided) ? valueProvided.map(v => new LocationHoursOfOperation(v)) : [new LocationHoursOfOperation(valueProvided)];
            }
        });

        /**
         * @description A description of when the locations opening ours are different to normal, e.g.
    public holiday availability. Succinctly describing all possible exceptions to
    normal site availability as detailed in the opening hours Times.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'availabilityExceptions', {
            enumerable: true,
            get: () => this.__data.availabilityExceptions,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.availabilityExceptions = valueProvided;
            }
        });

        /**
         * @description Technical endpoints providing access to services operated for the location.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'endpoint', {
            enumerable: true,
            get: () => this.__data.endpoint,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.endpoint = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            operationalStatus,
            name,
            alias,
            description,
            mode,
            type,
            telecom,
            address,
            physicalType,
            position,
            managingOrganization,
            partOf,
            hoursOfOperation,
            availabilityExceptions,
            endpoint,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Location',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Location';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            status: this.status,
            operationalStatus: this.operationalStatus && this.operationalStatus.toJSON(),
            name: this.name,
            alias: this.alias,
            description: this.description,
            mode: this.mode,
            type: this.type && this.type.map(v => v.toJSON()),
            telecom: this.telecom && this.telecom.map(v => v.toJSON()),
            address: this.address && this.address.toJSON(),
            physicalType: this.physicalType && this.physicalType.toJSON(),
            position: this.position && this.position.toJSON(),
            managingOrganization: this.managingOrganization && this.managingOrganization.toJSON(),
            partOf: this.partOf && this.partOf.toJSON(),
            hoursOfOperation: this.hoursOfOperation && this.hoursOfOperation.map(v => v.toJSON()),
            availabilityExceptions: this.availabilityExceptions,
            endpoint: this.endpoint && this.endpoint.map(v => v.toJSON()),
        };
    }
}

module.exports = Location;
