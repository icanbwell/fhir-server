/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');
const async = require('async');


/**
DeviceDefinition
    The characteristics, operational status and capabilities of a medical-related
    component of a medical device.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class DeviceDefinition extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {DeviceDefinitionUdiDeviceIdentifier[]|undefined} [udiDeviceIdentifier],
     * @param {String|undefined} [manufacturerString],
     * @param {Reference|undefined} [manufacturerReference],
     * @param {DeviceDefinitionDeviceName[]|undefined} [deviceName],
     * @param {String|undefined} [modelNumber],
     * @param {CodeableConcept|undefined} [type],
     * @param {DeviceDefinitionSpecialization[]|undefined} [specialization],
     * @param {String[]|undefined} [version],
     * @param {CodeableConcept[]|undefined} [safety],
     * @param {ProductShelfLife[]|undefined} [shelfLifeStorage],
     * @param {ProdCharacteristic|undefined} [physicalCharacteristics],
     * @param {CodeableConcept[]|undefined} [languageCode],
     * @param {DeviceDefinitionCapability[]|undefined} [capability],
     * @param {DeviceDefinitionProperty[]|undefined} [property],
     * @param {Reference|undefined} [owner],
     * @param {ContactPoint[]|undefined} [contact],
     * @param {uri|undefined} [url],
     * @param {uri|undefined} [onlineInformation],
     * @param {Annotation[]|undefined} [note],
     * @param {Quantity|undefined} [quantity],
     * @param {Reference|undefined} [parentDevice],
     * @param {DeviceDefinitionMaterial[]|undefined} [material],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            udiDeviceIdentifier,
            manufacturerString,
            manufacturerReference,
            deviceName,
            modelNumber,
            type,
            specialization,
            version,
            safety,
            shelfLifeStorage,
            physicalCharacteristics,
            languageCode,
            capability,
            property,
            owner,
            contact,
            url,
            onlineInformation,
            note,
            quantity,
            parentDevice,
            material,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.meta = undefined;
                    return;
                }
                const Meta = require('../complex_types/meta.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.meta = FhirResourceCreator.create(valueProvided, Meta);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.implicitRules = undefined;
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.language = undefined;
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.text = undefined;
                    return;
                }
                const Narrative = require('../complex_types/narrative.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.text = FhirResourceCreator.create(valueProvided, Narrative);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.contained = undefined;
                    return;
                }
                const ResourceContainer = require('../simple_types/resourceContainer.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.contained = FhirResourceCreator.createArray(valueProvided);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.extension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.modifierExtension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description Unique instance identifiers assigned to a device by the software,
    manufacturers, other organizations or owners. For example: handle ID.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.identifier = undefined;
                    return;
                }
                const Identifier = require('../complex_types/identifier.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.identifier = FhirResourceCreator.createArray(valueProvided, Identifier);
            }
        });

        /**
         * @description Unique device identifier (UDI) assigned to device label or package.  Note that
    the Device may include multiple udiCarriers as it either may include just the
    udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it
    could have been sold.
         * @property {DeviceDefinitionUdiDeviceIdentifier[]|undefined}
        */
        Object.defineProperty(this, 'udiDeviceIdentifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.udiDeviceIdentifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.udiDeviceIdentifier = undefined;
                    return;
                }
                const DeviceDefinitionUdiDeviceIdentifier = require('../backbone_elements/deviceDefinitionUdiDeviceIdentifier.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.udiDeviceIdentifier = FhirResourceCreator.createArray(valueProvided, DeviceDefinitionUdiDeviceIdentifier);
            }
        });

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'manufacturerString', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.manufacturerString,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.manufacturerString = undefined;
                    return;
                }
                this.__data.manufacturerString = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'manufacturerReference', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.manufacturerReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.manufacturerReference = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.manufacturerReference = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description A name given to the device to identify it.
         * @property {DeviceDefinitionDeviceName[]|undefined}
        */
        Object.defineProperty(this, 'deviceName', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.deviceName,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.deviceName = undefined;
                    return;
                }
                const DeviceDefinitionDeviceName = require('../backbone_elements/deviceDefinitionDeviceName.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.deviceName = FhirResourceCreator.createArray(valueProvided, DeviceDefinitionDeviceName);
            }
        });

        /**
         * @description The model number for the device.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'modelNumber', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modelNumber,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modelNumber = undefined;
                    return;
                }
                this.__data.modelNumber = valueProvided;
            }
        });

        /**
         * @description What kind of device or device system this is.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'type', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.type = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.type = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description The capabilities supported on a  device, the standards to which the device
    conforms for a particular purpose, and used for the communication.
         * @property {DeviceDefinitionSpecialization[]|undefined}
        */
        Object.defineProperty(this, 'specialization', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.specialization,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.specialization = undefined;
                    return;
                }
                const DeviceDefinitionSpecialization = require('../backbone_elements/deviceDefinitionSpecialization.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.specialization = FhirResourceCreator.createArray(valueProvided, DeviceDefinitionSpecialization);
            }
        });

        /**
         * @description The available versions of the device, e.g., software versions.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'version', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.version,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.version = undefined;
                    return;
                }
                this.__data.version = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => v) : [valueProvided];
            }
        });

        /**
         * @description Safety characteristics of the device.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'safety', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.safety,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.safety = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.safety = FhirResourceCreator.createArray(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Shelf Life and storage information.
         * @property {ProductShelfLife[]|undefined}
        */
        Object.defineProperty(this, 'shelfLifeStorage', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.shelfLifeStorage,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.shelfLifeStorage = undefined;
                    return;
                }
                const ProductShelfLife = require('../backbone_elements/productShelfLife.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.shelfLifeStorage = FhirResourceCreator.createArray(valueProvided, ProductShelfLife);
            }
        });

        /**
         * @description Dimensions, color etc.
         * @property {ProdCharacteristic|undefined}
        */
        Object.defineProperty(this, 'physicalCharacteristics', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.physicalCharacteristics,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.physicalCharacteristics = undefined;
                    return;
                }
                const ProdCharacteristic = require('../backbone_elements/prodCharacteristic.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.physicalCharacteristics = FhirResourceCreator.create(valueProvided, ProdCharacteristic);
            }
        });

        /**
         * @description Language code for the human-readable text strings produced by the device (all
    supported).
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'languageCode', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.languageCode,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.languageCode = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.languageCode = FhirResourceCreator.createArray(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Device capabilities.
         * @property {DeviceDefinitionCapability[]|undefined}
        */
        Object.defineProperty(this, 'capability', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.capability,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.capability = undefined;
                    return;
                }
                const DeviceDefinitionCapability = require('../backbone_elements/deviceDefinitionCapability.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.capability = FhirResourceCreator.createArray(valueProvided, DeviceDefinitionCapability);
            }
        });

        /**
         * @description The actual configuration settings of a device as it actually operates, e.g.,
    regulation status, time properties.
         * @property {DeviceDefinitionProperty[]|undefined}
        */
        Object.defineProperty(this, 'property', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.property,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.property = undefined;
                    return;
                }
                const DeviceDefinitionProperty = require('../backbone_elements/deviceDefinitionProperty.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.property = FhirResourceCreator.createArray(valueProvided, DeviceDefinitionProperty);
            }
        });

        /**
         * @description An organization that is responsible for the provision and ongoing maintenance
    of the device.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'owner', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.owner,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.owner = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.owner = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description Contact details for an organization or a particular human that is responsible
    for the device.
         * @property {ContactPoint[]|undefined}
        */
        Object.defineProperty(this, 'contact', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contact,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.contact = undefined;
                    return;
                }
                const ContactPoint = require('../complex_types/contactPoint.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.contact = FhirResourceCreator.createArray(valueProvided, ContactPoint);
            }
        });

        /**
         * @description A network address on which the device may be contacted directly.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'url', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.url,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.url = undefined;
                    return;
                }
                this.__data.url = valueProvided;
            }
        });

        /**
         * @description Access to on-line information about the device.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'onlineInformation', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.onlineInformation,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.onlineInformation = undefined;
                    return;
                }
                this.__data.onlineInformation = valueProvided;
            }
        });

        /**
         * @description Descriptive information, usage information or implantation information that is
    not captured in an existing element.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.note,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.note = undefined;
                    return;
                }
                const Annotation = require('../complex_types/annotation.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.note = FhirResourceCreator.createArray(valueProvided, Annotation);
            }
        });

        /**
         * @description The quantity of the device present in the packaging (e.g. the number of
    devices present in a pack, or the number of devices in the same package of the
    medicinal product).
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'quantity', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.quantity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.quantity = undefined;
                    return;
                }
                const Quantity = require('../complex_types/quantity.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.quantity = FhirResourceCreator.create(valueProvided, Quantity);
            }
        });

        /**
         * @description The parent device it can be part of.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'parentDevice', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.parentDevice,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.parentDevice = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.parentDevice = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description A substance used to create the material(s) of which the device is made.
         * @property {DeviceDefinitionMaterial[]|undefined}
        */
        Object.defineProperty(this, 'material', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.material,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.material = undefined;
                    return;
                }
                const DeviceDefinitionMaterial = require('../backbone_elements/deviceDefinitionMaterial.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.material = FhirResourceCreator.createArray(valueProvided, DeviceDefinitionMaterial);
            }
        });


        /**
         * @description _access
         * @property {Object|undefined}
         */
        Object.defineProperty(this, '_access', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._access,
            set: valueProvided => {
                this.__data._access = valueProvided;
            }
        });
        /**
         * @description _sourceAssigningAuthority
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceAssigningAuthority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceAssigningAuthority,
            set: valueProvided => {
                this.__data._sourceAssigningAuthority = valueProvided;
            }
        });
        /**
         * @description _uuid
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_uuid', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._uuid,
            set: valueProvided => {
                this.__data._uuid = valueProvided;
            }
        });
        /**
         * @description _sourceId
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceId,
            set: valueProvided => {
                this.__data._sourceId = valueProvided;
            }
        });


        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            udiDeviceIdentifier,
            manufacturerString,
            manufacturerReference,
            deviceName,
            modelNumber,
            type,
            specialization,
            version,
            safety,
            shelfLifeStorage,
            physicalCharacteristics,
            languageCode,
            capability,
            property,
            owner,
            contact,
            url,
            onlineInformation,
            note,
            quantity,
            parentDevice,
            material,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        });

        /**
         * @description Define a default non-writable resourceType property
         * @property {string|undefined}
         */
        Object.defineProperty(this, 'resourceType', {
            value: 'DeviceDefinition',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    /**
     * @description Define a default non-writable resourceType property
     * @property {string|undefined}
     */
    static get resourceType() {
        return 'DeviceDefinition';
    }

    /**
     * @description Creates a blank new resource
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {DeviceDefinitionUdiDeviceIdentifier[]|undefined} [udiDeviceIdentifier],
     * @param {String|undefined} [manufacturerString],
     * @param {Reference|undefined} [manufacturerReference],
     * @param {DeviceDefinitionDeviceName[]|undefined} [deviceName],
     * @param {String|undefined} [modelNumber],
     * @param {CodeableConcept|undefined} [type],
     * @param {DeviceDefinitionSpecialization[]|undefined} [specialization],
     * @param {String[]|undefined} [version],
     * @param {CodeableConcept[]|undefined} [safety],
     * @param {ProductShelfLife[]|undefined} [shelfLifeStorage],
     * @param {ProdCharacteristic|undefined} [physicalCharacteristics],
     * @param {CodeableConcept[]|undefined} [languageCode],
     * @param {DeviceDefinitionCapability[]|undefined} [capability],
     * @param {DeviceDefinitionProperty[]|undefined} [property],
     * @param {Reference|undefined} [owner],
     * @param {ContactPoint[]|undefined} [contact],
     * @param {uri|undefined} [url],
     * @param {uri|undefined} [onlineInformation],
     * @param {Annotation[]|undefined} [note],
     * @param {Quantity|undefined} [quantity],
     * @param {Reference|undefined} [parentDevice],
     * @param {DeviceDefinitionMaterial[]|undefined} [material],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
     * @returns {DeviceDefinition}
    */
    create(
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            udiDeviceIdentifier,
            manufacturerString,
            manufacturerReference,
            deviceName,
            modelNumber,
            type,
            specialization,
            version,
            safety,
            shelfLifeStorage,
            physicalCharacteristics,
            languageCode,
            capability,
            property,
            owner,
            contact,
            url,
            onlineInformation,
            note,
            quantity,
            parentDevice,
            material,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        }
    ) {
        return new DeviceDefinition({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            udiDeviceIdentifier,
            manufacturerString,
            manufacturerReference,
            deviceName,
            modelNumber,
            type,
            specialization,
            version,
            safety,
            shelfLifeStorage,
            physicalCharacteristics,
            languageCode,
            capability,
            property,
            owner,
            contact,
            url,
            onlineInformation,
            note,
            quantity,
            parentDevice,
            material,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {DeviceDefinition}
    */
    clone() {
        return new DeviceDefinition(this.toJSONInternal());
    }


    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            udiDeviceIdentifier: this.udiDeviceIdentifier && this.udiDeviceIdentifier.map(v => v.toJSON()),
            manufacturerString: this.manufacturerString,
            manufacturerReference: this.manufacturerReference && this.manufacturerReference.toJSON(),
            deviceName: this.deviceName && this.deviceName.map(v => v.toJSON()),
            modelNumber: this.modelNumber,
            type: this.type && this.type.toJSON(),
            specialization: this.specialization && this.specialization.map(v => v.toJSON()),
            version: this.version,
            safety: this.safety && this.safety.map(v => v.toJSON()),
            shelfLifeStorage: this.shelfLifeStorage && this.shelfLifeStorage.map(v => v.toJSON()),
            physicalCharacteristics: this.physicalCharacteristics && this.physicalCharacteristics.toJSON(),
            languageCode: this.languageCode && this.languageCode.map(v => v.toJSON()),
            capability: this.capability && this.capability.map(v => v.toJSON()),
            property: this.property && this.property.map(v => v.toJSON()),
            owner: this.owner && this.owner.toJSON(),
            contact: this.contact && this.contact.map(v => v.toJSON()),
            url: this.url,
            onlineInformation: this.onlineInformation,
            note: this.note && this.note.map(v => v.toJSON()),
            quantity: this.quantity && this.quantity.toJSON(),
            parentDevice: this.parentDevice && this.parentDevice.toJSON(),
            material: this.material && this.material.map(v => v.toJSON()),
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync({fnUpdateReferenceAsync}) {
            if (this.meta) {await this.meta.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.text) {await this.text.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.contained) {await async.each(this.contained, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.extension) {await async.each(this.extension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.modifierExtension) {await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.identifier) {await async.each(this.identifier, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.udiDeviceIdentifier) {await async.each(this.udiDeviceIdentifier, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.manufacturerReference) {await this.manufacturerReference.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.deviceName) {await async.each(this.deviceName, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.type) {await this.type.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.specialization) {await async.each(this.specialization, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.safety) {await async.each(this.safety, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.shelfLifeStorage) {await async.each(this.shelfLifeStorage, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.physicalCharacteristics) {await this.physicalCharacteristics.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.languageCode) {await async.each(this.languageCode, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.capability) {await async.each(this.capability, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.property) {await async.each(this.property, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.owner) {await this.owner.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.contact) {await async.each(this.contact, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.note) {await async.each(this.note, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.quantity) {await this.quantity.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.parentDevice) {await this.parentDevice.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.material) {await async.each(this.material, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal() {
        const {removeNull} = require('../../../../utils/nullRemover');
        const json = {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSONInternal(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSONInternal(),
            contained: this.contained && this.contained.map(v => v.toJSONInternal()),
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            identifier: this.identifier && this.identifier.map(v => v.toJSONInternal()),
            udiDeviceIdentifier: this.udiDeviceIdentifier && this.udiDeviceIdentifier.map(v => v.toJSONInternal()),
            manufacturerString: this.manufacturerString,
            manufacturerReference: this.manufacturerReference && this.manufacturerReference.toJSONInternal(),
            deviceName: this.deviceName && this.deviceName.map(v => v.toJSONInternal()),
            modelNumber: this.modelNumber,
            type: this.type && this.type.toJSONInternal(),
            specialization: this.specialization && this.specialization.map(v => v.toJSONInternal()),
            version: this.version,
            safety: this.safety && this.safety.map(v => v.toJSONInternal()),
            shelfLifeStorage: this.shelfLifeStorage && this.shelfLifeStorage.map(v => v.toJSONInternal()),
            physicalCharacteristics: this.physicalCharacteristics && this.physicalCharacteristics.toJSONInternal(),
            languageCode: this.languageCode && this.languageCode.map(v => v.toJSONInternal()),
            capability: this.capability && this.capability.map(v => v.toJSONInternal()),
            property: this.property && this.property.map(v => v.toJSONInternal()),
            owner: this.owner && this.owner.toJSONInternal(),
            contact: this.contact && this.contact.map(v => v.toJSONInternal()),
            url: this.url,
            onlineInformation: this.onlineInformation,
            note: this.note && this.note.map(v => v.toJSONInternal()),
            quantity: this.quantity && this.quantity.toJSONInternal(),
            parentDevice: this.parentDevice && this.parentDevice.toJSONInternal(),
            material: this.material && this.material.map(v => v.toJSONInternal()),
        };


        if (this._access) {
            json._access = this._access;
        }
        if (this._sourceAssigningAuthority) {
            json._sourceAssigningAuthority = this._sourceAssigningAuthority;
        }
        if (this._uuid) {
            json._uuid = this._uuid;
        }
        if (this._sourceId) {
            json._sourceId = this._sourceId;
        }

        return removeNull(json);
    }
}

module.exports = DeviceDefinition;
