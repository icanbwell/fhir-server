

// This file is auto-generated by generate_classes so do not edit manually

const { removeNull } = require('../../../../utils/nullRemover');

const Resource = require('../resources/resource');
const async = require('async');

/**
DiagnosticReport
    The findings and interpretation of diagnostic  tests performed on patients,
    groups of patients, devices, and locations, and/or specimens derived from
    these. The report includes clinical context such as requesting and provider
    information, and some mix of atomic results, images, textual and coded
    interpretations, and formatted representation of diagnostic reports.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class DiagnosticReport extends Resource {
    /**
     * @param {String|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {Reference[]|undefined} [basedOn],
     * @param {code} status,
     * @param {CodeableConcept[]|undefined} [category],
     * @param {CodeableConcept} code,
     * @param {Reference|undefined} [subject],
     * @param {Reference|undefined} [encounter],
     * @param {dateTime|undefined} [effectiveDateTime],
     * @param {Period|undefined} [effectivePeriod],
     * @param {instant|undefined} [issued],
     * @param {Reference[]|undefined} [performer],
     * @param {Reference[]|undefined} [resultsInterpreter],
     * @param {Reference[]|undefined} [specimen],
     * @param {Reference[]|undefined} [result],
     * @param {Reference[]|undefined} [imagingStudy],
     * @param {DiagnosticReportMedia[]|undefined} [media],
     * @param {String|undefined} [conclusion],
     * @param {CodeableConcept[]|undefined} [conclusionCode],
     * @param {Attachment[]|undefined} [presentedForm],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
    */
    constructor (
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            basedOn,
            status,
            category,
            code,
            subject,
            encounter,
            effectiveDateTime,
            effectivePeriod,
            issued,
            performer,
            resultsInterpreter,
            specimen,
            result,
            imagingStudy,
            media,
            conclusion,
            conclusionCode,
            presentedForm,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.meta = undefined;
                    return;
                }
                const Meta = require('../complex_types/meta.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.meta = FhirResourceCreator.create(valueProvided, Meta);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.implicitRules = undefined;
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.language = undefined;
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.text = undefined;
                    return;
                }
                const Narrative = require('../complex_types/narrative.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.text = FhirResourceCreator.create(valueProvided, Narrative);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.contained = undefined;
                    return;
                }
                const ResourceContainer = require('../simple_types/resourceContainer.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.contained = FhirResourceCreator.createArray(valueProvided);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.extension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.modifierExtension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description Identifiers assigned to this report by the performer or other systems.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.identifier = undefined;
                    return;
                }
                const Identifier = require('../complex_types/identifier.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.identifier = FhirResourceCreator.createArray(valueProvided, Identifier);
            }
        });

        /**
         * @description Details concerning a service requested.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'basedOn', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.basedOn,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.basedOn = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.basedOn = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description The status of the diagnostic report.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.status = undefined;
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description A code that classifies the clinical discipline, department or diagnostic
    service that created the report (e.g. cardiology, biochemistry, hematology,
    MRI). This is used for searching, sorting and display purposes.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'category', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.category,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.category = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.category = FhirResourceCreator.createArray(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description A code or name that describes this diagnostic report.
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'code', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.code,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.code = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.code = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description The subject of the report. Usually, but not always, this is a patient.
    However, diagnostic services also perform analyses on specimens collected from
    a variety of other sources.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'subject', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.subject,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.subject = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.subject = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description The healthcare event  (e.g. a patient and healthcare provider interaction)
    which this DiagnosticReport is about.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'encounter', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.encounter,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.encounter = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.encounter = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'effectiveDateTime', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.effectiveDateTime,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.effectiveDateTime = undefined;
                    return;
                }
                this.__data.effectiveDateTime = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'effectivePeriod', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.effectivePeriod,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.effectivePeriod = undefined;
                    return;
                }
                const Period = require('../complex_types/period.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.effectivePeriod = FhirResourceCreator.create(valueProvided, Period);
            }
        });

        /**
         * @description The date and time that this version of the report was made available to
    providers, typically after the report was reviewed and verified.
         * @property {instant|undefined}
        */
        Object.defineProperty(this, 'issued', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.issued,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.issued = undefined;
                    return;
                }
                this.__data.issued = valueProvided;
            }
        });

        /**
         * @description The diagnostic service that is responsible for issuing the report.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'performer', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.performer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.performer = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.performer = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description The practitioner or organization that is responsible for the report's
    conclusions and interpretations.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'resultsInterpreter', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.resultsInterpreter,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.resultsInterpreter = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.resultsInterpreter = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description Details about the specimens on which this diagnostic report is based.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'specimen', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.specimen,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.specimen = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.specimen = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description [Observations](observation.html)  that are part of this diagnostic report.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'result', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.result,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.result = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.result = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description One or more links to full details of any imaging performed during the
    diagnostic investigation. Typically, this is imaging performed by DICOM
    enabled modalities, but this is not required. A fully enabled PACS viewer can
    use this information to provide views of the source images.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'imagingStudy', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.imagingStudy,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.imagingStudy = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.imagingStudy = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description A list of key images associated with this report. The images are generally
    created during the diagnostic process, and may be directly of the patient, or
    of treated specimens (i.e. slides of interest).
         * @property {DiagnosticReportMedia[]|undefined}
        */
        Object.defineProperty(this, 'media', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.media,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.media = undefined;
                    return;
                }
                const DiagnosticReportMedia = require('../backbone_elements/diagnosticReportMedia.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.media = FhirResourceCreator.createArray(valueProvided, DiagnosticReportMedia);
            }
        });

        /**
         * @description Concise and clinically contextualized summary conclusion
    (interpretation/impression) of the diagnostic report.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'conclusion', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.conclusion,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.conclusion = undefined;
                    return;
                }
                this.__data.conclusion = valueProvided;
            }
        });

        /**
         * @description One or more codes that represent the summary conclusion
    (interpretation/impression) of the diagnostic report.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'conclusionCode', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.conclusionCode,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.conclusionCode = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.conclusionCode = FhirResourceCreator.createArray(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Rich text representation of the entire result as issued by the diagnostic
    service. Multiple formats are allowed but they SHALL be semantically
    equivalent.
         * @property {Attachment[]|undefined}
        */
        Object.defineProperty(this, 'presentedForm', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.presentedForm,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.presentedForm = undefined;
                    return;
                }
                const Attachment = require('../complex_types/attachment.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.presentedForm = FhirResourceCreator.createArray(valueProvided, Attachment);
            }
        });

        /**
         * @description _access
         * @property {Object|undefined}
         */
        Object.defineProperty(this, '_access', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._access,
            set: valueProvided => {
                this.__data._access = valueProvided;
            }
        });
        /**
         * @description _sourceAssigningAuthority
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceAssigningAuthority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceAssigningAuthority,
            set: valueProvided => {
                this.__data._sourceAssigningAuthority = valueProvided;
            }
        });
        /**
         * @description _uuid
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_uuid', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._uuid,
            set: valueProvided => {
                this.__data._uuid = valueProvided;
            }
        });
        /**
         * @description _sourceId
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceId,
            set: valueProvided => {
                this.__data._sourceId = valueProvided;
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            basedOn,
            status,
            category,
            code,
            subject,
            encounter,
            effectiveDateTime,
            effectivePeriod,
            issued,
            performer,
            resultsInterpreter,
            specimen,
            result,
            imagingStudy,
            media,
            conclusion,
            conclusionCode,
            presentedForm,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        });

        /**
         * @description Define a default non-writable resourceType property
         * @property {string|undefined}
         */
        Object.defineProperty(this, 'resourceType', {
            value: 'DiagnosticReport',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    /**
     * @description Define a default non-writable resourceType property
     * @property {string|undefined}
     */
    static get resourceType () {
        return 'DiagnosticReport';
    }

    /**
     * @description Creates a blank new resource
     * @param {String|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {Reference[]|undefined} [basedOn],
     * @param {code} status,
     * @param {CodeableConcept[]|undefined} [category],
     * @param {CodeableConcept} code,
     * @param {Reference|undefined} [subject],
     * @param {Reference|undefined} [encounter],
     * @param {dateTime|undefined} [effectiveDateTime],
     * @param {Period|undefined} [effectivePeriod],
     * @param {instant|undefined} [issued],
     * @param {Reference[]|undefined} [performer],
     * @param {Reference[]|undefined} [resultsInterpreter],
     * @param {Reference[]|undefined} [specimen],
     * @param {Reference[]|undefined} [result],
     * @param {Reference[]|undefined} [imagingStudy],
     * @param {DiagnosticReportMedia[]|undefined} [media],
     * @param {String|undefined} [conclusion],
     * @param {CodeableConcept[]|undefined} [conclusionCode],
     * @param {Attachment[]|undefined} [presentedForm],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
     * @returns {DiagnosticReport}
    */
    create (
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            basedOn,
            status,
            category,
            code,
            subject,
            encounter,
            effectiveDateTime,
            effectivePeriod,
            issued,
            performer,
            resultsInterpreter,
            specimen,
            result,
            imagingStudy,
            media,
            conclusion,
            conclusionCode,
            presentedForm,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        }
    ) {
        return new DiagnosticReport({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            basedOn,
            status,
            category,
            code,
            subject,
            encounter,
            effectiveDateTime,
            effectivePeriod,
            issued,
            performer,
            resultsInterpreter,
            specimen,
            result,
            imagingStudy,
            media,
            conclusion,
            conclusionCode,
            presentedForm,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {DiagnosticReport}
    */
    clone () {
        return new DiagnosticReport(this.toJSONInternal());
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON () {
        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            basedOn: this.basedOn && this.basedOn.map(v => v.toJSON()),
            status: this.status,
            category: this.category && this.category.map(v => v.toJSON()),
            code: this.code && this.code.toJSON(),
            subject: this.subject && this.subject.toJSON(),
            encounter: this.encounter && this.encounter.toJSON(),
            effectiveDateTime: this.effectiveDateTime,
            effectivePeriod: this.effectivePeriod && this.effectivePeriod.toJSON(),
            issued: this.issued,
            performer: this.performer && this.performer.map(v => v.toJSON()),
            resultsInterpreter: this.resultsInterpreter && this.resultsInterpreter.map(v => v.toJSON()),
            specimen: this.specimen && this.specimen.map(v => v.toJSON()),
            result: this.result && this.result.map(v => v.toJSON()),
            imagingStudy: this.imagingStudy && this.imagingStudy.map(v => v.toJSON()),
            media: this.media && this.media.map(v => v.toJSON()),
            conclusion: this.conclusion,
            conclusionCode: this.conclusionCode && this.conclusionCode.map(v => v.toJSON()),
            presentedForm: this.presentedForm && this.presentedForm.map(v => v.toJSON())
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync ({ fnUpdateReferenceAsync }) {
            if (this.meta) { await this.meta.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.text) { await this.text.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.contained) { await async.each(this.contained, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.extension) { await async.each(this.extension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.modifierExtension) { await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.identifier) { await async.each(this.identifier, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.basedOn) { await async.each(this.basedOn, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.category) { await async.each(this.category, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.code) { await this.code.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.subject) { await this.subject.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.encounter) { await this.encounter.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.effectivePeriod) { await this.effectivePeriod.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.performer) { await async.each(this.performer, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.resultsInterpreter) { await async.each(this.resultsInterpreter, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.specimen) { await async.each(this.specimen, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.result) { await async.each(this.result, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.imagingStudy) { await async.each(this.imagingStudy, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.media) { await async.each(this.media, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.conclusionCode) { await async.each(this.conclusionCode, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.presentedForm) { await async.each(this.presentedForm, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal () {
        const json = {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSONInternal(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSONInternal(),
            contained: this.contained && this.contained.map(v => v.toJSONInternal()),
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            identifier: this.identifier && this.identifier.map(v => v.toJSONInternal()),
            basedOn: this.basedOn && this.basedOn.map(v => v.toJSONInternal()),
            status: this.status,
            category: this.category && this.category.map(v => v.toJSONInternal()),
            code: this.code && this.code.toJSONInternal(),
            subject: this.subject && this.subject.toJSONInternal(),
            encounter: this.encounter && this.encounter.toJSONInternal(),
            effectiveDateTime: this.effectiveDateTime,
            effectivePeriod: this.effectivePeriod && this.effectivePeriod.toJSONInternal(),
            issued: this.issued,
            performer: this.performer && this.performer.map(v => v.toJSONInternal()),
            resultsInterpreter: this.resultsInterpreter && this.resultsInterpreter.map(v => v.toJSONInternal()),
            specimen: this.specimen && this.specimen.map(v => v.toJSONInternal()),
            result: this.result && this.result.map(v => v.toJSONInternal()),
            imagingStudy: this.imagingStudy && this.imagingStudy.map(v => v.toJSONInternal()),
            media: this.media && this.media.map(v => v.toJSONInternal()),
            conclusion: this.conclusion,
            conclusionCode: this.conclusionCode && this.conclusionCode.map(v => v.toJSONInternal()),
            presentedForm: this.presentedForm && this.presentedForm.map(v => v.toJSONInternal())
        };
        if (this._access) {
            json._access = this._access;
        }
        if (this._sourceAssigningAuthority) {
            json._sourceAssigningAuthority = this._sourceAssigningAuthority;
        }
        if (this._uuid) {
            json._uuid = this._uuid;
        }
        if (this._sourceId) {
            json._sourceId = this._sourceId;
        }

        return removeNull(json);
    }
}

module.exports = DiagnosticReport;
