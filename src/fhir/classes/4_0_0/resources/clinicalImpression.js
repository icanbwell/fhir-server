// This file is auto-generated by generate_classes so do not edit manually

/**
ClinicalImpression
    A record of a clinical assessment performed to determine what problem(s) may
    affect the patient and before planning the treatments or management strategies
    that are best to manage a patient's condition. Assessments are often 1:1 with
    a clinical consultation / encounter,  but this varies greatly depending on the
    clinical workflow. This resource is called "ClinicalImpression" rather than
    "ClinicalAssessment" to avoid confusion with the recording of assessment tools
    such as Apgar score.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class ClinicalImpression {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.implicitRules = value;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.contained = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description Business identifiers assigned to this clinical impression by the performer or
    other systems which remain constant as the resource is updated and propagates
    from server to server.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(value) ? value.map(v => new Identifier(v)) : [new Identifier(value)];
            }
        });

        /**
         * @description Identifies the workflow status of the assessment.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.status = value;
            }
        });

        /**
         * @description Captures the reason for the current state of the ClinicalImpression.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'statusReason', {
            enumerable: true,
            get: () => this.__data.statusReason,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.statusReason = new CodeableConcept(value);
            }
        });

        /**
         * @description Categorizes the type of clinical assessment performed.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            get: () => this.__data.code,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.code = new CodeableConcept(value);
            }
        });

        /**
         * @description A summary of the context and/or cause of the assessment - why / where it was
    performed, and what patient events/status prompted it.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.description = value;
            }
        });

        /**
         * @description The patient or group of individuals assessed as part of this record.
         * @property {ClinicalImpressionSubject}
        */
        Object.defineProperty(this, 'subject', {
            enumerable: true,
            get: () => this.__data.subject,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.subject = new Reference(value);
            }
        });

        /**
         * @description The Encounter during which this ClinicalImpression was created or to which the
    creation of this record is tightly associated.
         * @property {Encounter|undefined}
        */
        Object.defineProperty(this, 'encounter', {
            enumerable: true,
            get: () => this.__data.encounter,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.encounter = new Reference(value);
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'effectiveDateTime', {
            enumerable: true,
            get: () => this.__data.effectiveDateTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.effectiveDateTime = value;
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'effectivePeriod', {
            enumerable: true,
            get: () => this.__data.effectivePeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.effectivePeriod = new Period(value);
            }
        });

        /**
         * @description Indicates when the documentation of the assessment was complete.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'date', {
            enumerable: true,
            get: () => this.__data.date,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.date = value;
            }
        });

        /**
         * @description The clinician performing the assessment.
         * @property {ClinicalImpressionAssessor|undefined}
        */
        Object.defineProperty(this, 'assessor', {
            enumerable: true,
            get: () => this.__data.assessor,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.assessor = new Reference(value);
            }
        });

        /**
         * @description A reference to the last assessment that was conducted on this patient.
    Assessments are often/usually ongoing in nature; a care provider (practitioner
    or team) will make new assessments on an ongoing basis as new data arises or
    the patient's conditions changes.
         * @property {ClinicalImpression|undefined}
        */
        Object.defineProperty(this, 'previous', {
            enumerable: true,
            get: () => this.__data.previous,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.previous = new Reference(value);
            }
        });

        /**
         * @description A list of the relevant problems/conditions for a patient.
         * @property {ClinicalImpressionProblem[]|undefined}
        */
        Object.defineProperty(this, 'problem', {
            enumerable: true,
            get: () => this.__data.problem,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.problem = Array.isArray(value) ? value.map(v => new Reference(v)) : [new Reference(value)];
            }
        });

        /**
         * @description One or more sets of investigations (signs, symptoms, etc.). The actual
    grouping of investigations varies greatly depending on the type and context of
    the assessment. These investigations may include data generated during the
    assessment process, or data previously generated and recorded that is
    pertinent to the outcomes.
         * @property {ClinicalImpressionInvestigation[]|undefined}
        */
        Object.defineProperty(this, 'investigation', {
            enumerable: true,
            get: () => this.__data.investigation,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ClinicalImpressionInvestigation = require('../backbone_elements/clinicalImpressionInvestigation.js');
                this.__data.investigation = Array.isArray(value) ? value.map(v => new ClinicalImpressionInvestigation(v)) : [new ClinicalImpressionInvestigation(value)];
            }
        });

        /**
         * @description Reference to a specific published clinical protocol that was followed during
    this assessment, and/or that provides evidence in support of the diagnosis.
         * @property {uri[]|undefined}
        */
        Object.defineProperty(this, 'protocol', {
            enumerable: true,
            get: () => this.__data.protocol,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.protocol = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description A text summary of the investigations and the diagnosis.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'summary', {
            enumerable: true,
            get: () => this.__data.summary,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.summary = value;
            }
        });

        /**
         * @description Specific findings or diagnoses that were considered likely or relevant to
    ongoing treatment.
         * @property {ClinicalImpressionFinding[]|undefined}
        */
        Object.defineProperty(this, 'finding', {
            enumerable: true,
            get: () => this.__data.finding,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ClinicalImpressionFinding = require('../backbone_elements/clinicalImpressionFinding.js');
                this.__data.finding = Array.isArray(value) ? value.map(v => new ClinicalImpressionFinding(v)) : [new ClinicalImpressionFinding(value)];
            }
        });

        /**
         * @description Estimate of likely outcome.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'prognosisCodeableConcept', {
            enumerable: true,
            get: () => this.__data.prognosisCodeableConcept,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.prognosisCodeableConcept = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description RiskAssessment expressing likely outcome.
         * @property {RiskAssessment[]|undefined}
        */
        Object.defineProperty(this, 'prognosisReference', {
            enumerable: true,
            get: () => this.__data.prognosisReference,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.prognosisReference = Array.isArray(value) ? value.map(v => new Reference(v)) : [new Reference(value)];
            }
        });

        /**
         * @description Information supporting the clinical impression.
         * @property {Resource[]|undefined}
        */
        Object.defineProperty(this, 'supportingInfo', {
            enumerable: true,
            get: () => this.__data.supportingInfo,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.supportingInfo = Array.isArray(value) ? value.map(v => new Reference(v)) : [new Reference(value)];
            }
        });

        /**
         * @description Commentary about the impression, typically recorded after the impression
    itself was made, though supplemental notes by the original author could also
    appear.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            enumerable: true,
            get: () => this.__data.note,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.note = Array.isArray(value) ? value.map(v => new Annotation(v)) : [new Annotation(value)];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ClinicalImpression',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ClinicalImpression';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            status: this.status,
            statusReason: this.statusReason && this.statusReason.toJSON(),
            code: this.code && this.code.toJSON(),
            description: this.description,
            subject: this.subject && this.subject.toJSON(),
            encounter: this.encounter && this.encounter.toJSON(),
            effectiveDateTime: this.effectiveDateTime,
            effectivePeriod: this.effectivePeriod && this.effectivePeriod.toJSON(),
            date: this.date,
            assessor: this.assessor && this.assessor.toJSON(),
            previous: this.previous && this.previous.toJSON(),
            problem: this.problem && this.problem.map(v => v.toJSON()),
            investigation: this.investigation && this.investigation.map(v => v.toJSON()),
            protocol: this.protocol,
            summary: this.summary,
            finding: this.finding && this.finding.map(v => v.toJSON()),
            prognosisCodeableConcept: this.prognosisCodeableConcept && this.prognosisCodeableConcept.map(v => v.toJSON()),
            prognosisReference: this.prognosisReference && this.prognosisReference.map(v => v.toJSON()),
            supportingInfo: this.supportingInfo && this.supportingInfo.map(v => v.toJSON()),
            note: this.note && this.note.map(v => v.toJSON()),
        };
    }
}

module.exports = ClinicalImpression;
