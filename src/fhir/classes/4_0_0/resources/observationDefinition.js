/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const {removeNull} = require('../../../../utils/nullRemover');
const Resource = require('../resources/resource');


/**
ObservationDefinition
    Set of definitional characteristics for a kind of observation or measurement
    produced or consumed by an orderable health care service.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class ObservationDefinition extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {CodeableConcept[]|undefined} [category],
     * @param {CodeableConcept} code,
     * @param {Identifier[]|undefined} [identifier],
     * @param {code[]|undefined} [permittedDataType],
     * @param {Boolean|undefined} [multipleResultsAllowed],
     * @param {CodeableConcept|undefined} [method],
     * @param {String|undefined} [preferredReportName],
     * @param {ObservationDefinitionQuantitativeDetails|undefined} [quantitativeDetails],
     * @param {ObservationDefinitionQualifiedInterval[]|undefined} [qualifiedInterval],
     * @param {Reference|undefined} [validCodedValueSet],
     * @param {Reference|undefined} [normalCodedValueSet],
     * @param {Reference|undefined} [abnormalCodedValueSet],
     * @param {Reference|undefined} [criticalCodedValueSet],
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            category,
            code,
            identifier,
            permittedDataType,
            multipleResultsAllowed,
            method,
            preferredReportName,
            quantitativeDetails,
            qualifiedInterval,
            validCodedValueSet,
            normalCodedValueSet,
            abnormalCodedValueSet,
            criticalCodedValueSet,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                this.__data.contained = Array.isArray(valueProvided) ? valueProvided.map(v => new ResourceContainer(v)) : [new ResourceContainer(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description A code that classifies the general type of observation.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'category', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.category,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.category = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Describes what will be observed. Sometimes this is called the observation
    "name".
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'code', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.code,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.code = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description A unique identifier assigned to this ObservationDefinition artifact.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(valueProvided) ? valueProvided.map(v => new Identifier(v)) : [new Identifier(valueProvided)];
            }
        });

        /**
         * @description The data types allowed for the value element of the instance observations
    conforming to this ObservationDefinition.
         * @property {code[]|undefined}
        */
        Object.defineProperty(this, 'permittedDataType', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.permittedDataType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.permittedDataType = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description Multiple results allowed for observations conforming to this
    ObservationDefinition.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'multipleResultsAllowed', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.multipleResultsAllowed,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.multipleResultsAllowed = valueProvided;
            }
        });

        /**
         * @description The method or technique used to perform the observation.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'method', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.method,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.method = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description The preferred name to be used when reporting the results of observations
    conforming to this ObservationDefinition.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'preferredReportName', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.preferredReportName,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.preferredReportName = valueProvided;
            }
        });

        /**
         * @description Characteristics for quantitative results of this observation.
         * @property {ObservationDefinitionQuantitativeDetails|undefined}
        */
        Object.defineProperty(this, 'quantitativeDetails', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.quantitativeDetails,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ObservationDefinitionQuantitativeDetails = require('../backbone_elements/observationDefinitionQuantitativeDetails.js');
                this.__data.quantitativeDetails = new ObservationDefinitionQuantitativeDetails(valueProvided);
            }
        });

        /**
         * @description Multiple  ranges of results qualified by different contexts for ordinal or
    continuous observations conforming to this ObservationDefinition.
         * @property {ObservationDefinitionQualifiedInterval[]|undefined}
        */
        Object.defineProperty(this, 'qualifiedInterval', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.qualifiedInterval,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ObservationDefinitionQualifiedInterval = require('../backbone_elements/observationDefinitionQualifiedInterval.js');
                this.__data.qualifiedInterval = Array.isArray(valueProvided) ? valueProvided.map(v => new ObservationDefinitionQualifiedInterval(v)) : [new ObservationDefinitionQualifiedInterval(valueProvided)];
            }
        });

        /**
         * @description The set of valid coded results for the observations  conforming to this
    ObservationDefinition.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'validCodedValueSet', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.validCodedValueSet,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.validCodedValueSet = new Reference(valueProvided);
            }
        });

        /**
         * @description The set of normal coded results for the observations conforming to this
    ObservationDefinition.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'normalCodedValueSet', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.normalCodedValueSet,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.normalCodedValueSet = new Reference(valueProvided);
            }
        });

        /**
         * @description The set of abnormal coded results for the observation conforming to this
    ObservationDefinition.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'abnormalCodedValueSet', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.abnormalCodedValueSet,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.abnormalCodedValueSet = new Reference(valueProvided);
            }
        });

        /**
         * @description The set of critical coded results for the observation conforming to this
    ObservationDefinition.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'criticalCodedValueSet', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.criticalCodedValueSet,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.criticalCodedValueSet = new Reference(valueProvided);
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            category,
            code,
            identifier,
            permittedDataType,
            multipleResultsAllowed,
            method,
            preferredReportName,
            quantitativeDetails,
            qualifiedInterval,
            validCodedValueSet,
            normalCodedValueSet,
            abnormalCodedValueSet,
            criticalCodedValueSet,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ObservationDefinition',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    static get resourceType() {
        return 'ObservationDefinition';
    }

    /**
     * @description Creates a blank new resource
     * @returns {ObservationDefinition}
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {CodeableConcept[]|undefined} [category],
     * @param {CodeableConcept} code,
     * @param {Identifier[]|undefined} [identifier],
     * @param {code[]|undefined} [permittedDataType],
     * @param {Boolean|undefined} [multipleResultsAllowed],
     * @param {CodeableConcept|undefined} [method],
     * @param {String|undefined} [preferredReportName],
     * @param {ObservationDefinitionQuantitativeDetails|undefined} [quantitativeDetails],
     * @param {ObservationDefinitionQualifiedInterval[]|undefined} [qualifiedInterval],
     * @param {Reference|undefined} [validCodedValueSet],
     * @param {Reference|undefined} [normalCodedValueSet],
     * @param {Reference|undefined} [abnormalCodedValueSet],
     * @param {Reference|undefined} [criticalCodedValueSet],
    */
    create(
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            category,
            code,
            identifier,
            permittedDataType,
            multipleResultsAllowed,
            method,
            preferredReportName,
            quantitativeDetails,
            qualifiedInterval,
            validCodedValueSet,
            normalCodedValueSet,
            abnormalCodedValueSet,
            criticalCodedValueSet,
        }
    ) {
        return new ObservationDefinition({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            category,
            code,
            identifier,
            permittedDataType,
            multipleResultsAllowed,
            method,
            preferredReportName,
            quantitativeDetails,
            qualifiedInterval,
            validCodedValueSet,
            normalCodedValueSet,
            abnormalCodedValueSet,
            criticalCodedValueSet,
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {ObservationDefinition}
    */
    copy() {
        return new ObservationDefinition(this.toJSON());
    }


    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            category: this.category && this.category.map(v => v.toJSON()),
            code: this.code && this.code.toJSON(),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            permittedDataType: this.permittedDataType,
            multipleResultsAllowed: this.multipleResultsAllowed,
            method: this.method && this.method.toJSON(),
            preferredReportName: this.preferredReportName,
            quantitativeDetails: this.quantitativeDetails && this.quantitativeDetails.toJSON(),
            qualifiedInterval: this.qualifiedInterval && this.qualifiedInterval.map(v => v.toJSON()),
            validCodedValueSet: this.validCodedValueSet && this.validCodedValueSet.toJSON(),
            normalCodedValueSet: this.normalCodedValueSet && this.normalCodedValueSet.toJSON(),
            abnormalCodedValueSet: this.abnormalCodedValueSet && this.abnormalCodedValueSet.toJSON(),
            criticalCodedValueSet: this.criticalCodedValueSet && this.criticalCodedValueSet.toJSON(),
        });
    }
}

module.exports = ObservationDefinition;
