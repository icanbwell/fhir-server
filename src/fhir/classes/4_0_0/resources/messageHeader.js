/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

/**
MessageHeader
    The header for a message exchange that is either requesting or responding to
    an action.  The reference(s) that are the subject of the action as well as
    other information related to the action are typically transmitted in a bundle
    in which the MessageHeader resource instance is the first resource in the
    bundle.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class MessageHeader {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Coding|undefined} [eventCoding],
     * @param {uri|undefined} [eventUri],
     * @param {MessageHeaderDestination[]|undefined} [destination],
     * @param {Reference|undefined} [sender],
     * @param {Reference|undefined} [enterer],
     * @param {Reference|undefined} [author],
     * @param {MessageHeaderSource} source,
     * @param {Reference|undefined} [responsible],
     * @param {CodeableConcept|undefined} [reason],
     * @param {MessageHeaderResponse|undefined} [response],
     * @param {Reference[]|undefined} [focus],
     * @param {canonical|undefined} [definition],
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            eventCoding,
            eventUri,
            destination,
            sender,
            enterer,
            author,
            source,
            responsible,
            reason,
            response,
            focus,
            definition,
        }
    ) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.contained = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description None
         * @property {Coding|undefined}
        */
        Object.defineProperty(this, 'eventCoding', {
            enumerable: true,
            get: () => this.__data.eventCoding,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.eventCoding = new Coding(valueProvided);
            }
        });

        /**
         * @description None
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'eventUri', {
            enumerable: true,
            get: () => this.__data.eventUri,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.eventUri = valueProvided;
            }
        });

        /**
         * @description The destination application which the message is intended for.
         * @property {MessageHeaderDestination[]|undefined}
        */
        Object.defineProperty(this, 'destination', {
            enumerable: true,
            get: () => this.__data.destination,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let MessageHeaderDestination = require('../backbone_elements/messageHeaderDestination.js');
                this.__data.destination = Array.isArray(valueProvided) ? valueProvided.map(v => new MessageHeaderDestination(v)) : [new MessageHeaderDestination(valueProvided)];
            }
        });

        /**
         * @description Identifies the sending system to allow the use of a trust relationship.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'sender', {
            enumerable: true,
            get: () => this.__data.sender,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.sender = new Reference(valueProvided);
            }
        });

        /**
         * @description The person or device that performed the data entry leading to this message.
    When there is more than one candidate, pick the most proximal to the message.
    Can provide other enterers in extensions.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'enterer', {
            enumerable: true,
            get: () => this.__data.enterer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.enterer = new Reference(valueProvided);
            }
        });

        /**
         * @description The logical author of the message - the person or device that decided the
    described event should happen. When there is more than one candidate, pick the
    most proximal to the MessageHeader. Can provide other authors in extensions.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'author', {
            enumerable: true,
            get: () => this.__data.author,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.author = new Reference(valueProvided);
            }
        });

        /**
         * @description The source application from which this message originated.
         * @property {MessageHeaderSource}
        */
        Object.defineProperty(this, 'source', {
            enumerable: true,
            get: () => this.__data.source,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let MessageHeaderSource = require('../backbone_elements/messageHeaderSource.js');
                this.__data.source = new MessageHeaderSource(valueProvided);
            }
        });

        /**
         * @description The person or organization that accepts overall responsibility for the
    contents of the message. The implication is that the message event happened
    under the policies of the responsible party.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'responsible', {
            enumerable: true,
            get: () => this.__data.responsible,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.responsible = new Reference(valueProvided);
            }
        });

        /**
         * @description Coded indication of the cause for the event - indicates  a reason for the
    occurrence of the event that is a focus of this message.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'reason', {
            enumerable: true,
            get: () => this.__data.reason,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.reason = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description Information about the message that this message is a response to.  Only
    present if this message is a response.
         * @property {MessageHeaderResponse|undefined}
        */
        Object.defineProperty(this, 'response', {
            enumerable: true,
            get: () => this.__data.response,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let MessageHeaderResponse = require('../backbone_elements/messageHeaderResponse.js');
                this.__data.response = new MessageHeaderResponse(valueProvided);
            }
        });

        /**
         * @description The actual data of the message - a reference to the root/focus class of the
    event.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'focus', {
            enumerable: true,
            get: () => this.__data.focus,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.focus = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description Permanent link to the MessageDefinition for this message.
         * @property {canonical|undefined}
        */
        Object.defineProperty(this, 'definition', {
            enumerable: true,
            get: () => this.__data.definition,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.definition = valueProvided;
            }
        });

        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            eventCoding,
            eventUri,
            destination,
            sender,
            enterer,
            author,
            source,
            responsible,
            reason,
            response,
            focus,
            definition,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'MessageHeader',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'MessageHeader';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            eventCoding: this.eventCoding && this.eventCoding.toJSON(),
            eventUri: this.eventUri,
            destination: this.destination && this.destination.map(v => v.toJSON()),
            sender: this.sender && this.sender.toJSON(),
            enterer: this.enterer && this.enterer.toJSON(),
            author: this.author && this.author.toJSON(),
            source: this.source && this.source.toJSON(),
            responsible: this.responsible && this.responsible.toJSON(),
            reason: this.reason && this.reason.toJSON(),
            response: this.response && this.response.toJSON(),
            focus: this.focus && this.focus.map(v => v.toJSON()),
            definition: this.definition,
        };
    }
}

module.exports = MessageHeader;
