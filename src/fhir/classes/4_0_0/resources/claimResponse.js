/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');


/**
ClaimResponse
    This resource provides the adjudication details from the processing of a Claim
    resource.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class ClaimResponse extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {code} status,
     * @param {CodeableConcept} type,
     * @param {CodeableConcept|undefined} [subType],
     * @param {code} use,
     * @param {Reference} patient,
     * @param {dateTime} created,
     * @param {Reference} insurer,
     * @param {Reference|undefined} [requestor],
     * @param {Reference|undefined} [request],
     * @param {code} outcome,
     * @param {String|undefined} [disposition],
     * @param {String|undefined} [preAuthRef],
     * @param {Period|undefined} [preAuthPeriod],
     * @param {CodeableConcept|undefined} [payeeType],
     * @param {ClaimResponseItem[]|undefined} [item],
     * @param {ClaimResponseAddItem[]|undefined} [addItem],
     * @param {ClaimResponseAdjudication[]|undefined} [adjudication],
     * @param {ClaimResponseTotal[]|undefined} [total],
     * @param {ClaimResponsePayment|undefined} [payment],
     * @param {CodeableConcept|undefined} [fundsReserve],
     * @param {CodeableConcept|undefined} [formCode],
     * @param {Attachment|undefined} [form],
     * @param {ClaimResponseProcessNote[]|undefined} [processNote],
     * @param {Reference[]|undefined} [communicationRequest],
     * @param {ClaimResponseInsurance[]|undefined} [insurance],
     * @param {ClaimResponseError[]|undefined} [error],
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            type,
            subType,
            use,
            patient,
            created,
            insurer,
            requestor,
            request,
            outcome,
            disposition,
            preAuthRef,
            preAuthPeriod,
            payeeType,
            item,
            addItem,
            adjudication,
            total,
            payment,
            fundsReserve,
            formCode,
            form,
            processNote,
            communicationRequest,
            insurance,
            error,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.contained = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description A unique identifier assigned to this claim response.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(valueProvided) ? valueProvided.map(v => new Identifier(v)) : [new Identifier(valueProvided)];
            }
        });

        /**
         * @description The status of the resource instance.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description A finer grained suite of claim type codes which may convey additional
    information such as Inpatient vs Outpatient and/or a specialty service.
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.type = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description A finer grained suite of claim type codes which may convey additional
    information such as Inpatient vs Outpatient and/or a specialty service.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'subType', {
            enumerable: true,
            get: () => this.__data.subType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.subType = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description A code to indicate whether the nature of the request is: to request
    adjudication of products and services previously rendered; or requesting
    authorization and adjudication for provision in the future; or requesting the
    non-binding adjudication of the listed products and services which could be
    provided in the future.
         * @property {code}
        */
        Object.defineProperty(this, 'use', {
            enumerable: true,
            get: () => this.__data.use,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.use = valueProvided;
            }
        });

        /**
         * @description The party to whom the professional services and/or products have been supplied
    or are being considered and for whom actual for facast reimbursement is
    sought.
         * @property {Reference}
        */
        Object.defineProperty(this, 'patient', {
            enumerable: true,
            get: () => this.__data.patient,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.patient = new Reference(valueProvided);
            }
        });

        /**
         * @description The date this resource was created.
         * @property {dateTime}
        */
        Object.defineProperty(this, 'created', {
            enumerable: true,
            get: () => this.__data.created,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.created = valueProvided;
            }
        });

        /**
         * @description The party responsible for authorization, adjudication and reimbursement.
         * @property {Reference}
        */
        Object.defineProperty(this, 'insurer', {
            enumerable: true,
            get: () => this.__data.insurer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.insurer = new Reference(valueProvided);
            }
        });

        /**
         * @description The provider which is responsible for the claim, predetermination or
    preauthorization.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'requestor', {
            enumerable: true,
            get: () => this.__data.requestor,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.requestor = new Reference(valueProvided);
            }
        });

        /**
         * @description Original request resource reference.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'request', {
            enumerable: true,
            get: () => this.__data.request,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.request = new Reference(valueProvided);
            }
        });

        /**
         * @description The outcome of the claim, predetermination, or preauthorization processing.
         * @property {code}
        */
        Object.defineProperty(this, 'outcome', {
            enumerable: true,
            get: () => this.__data.outcome,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.outcome = valueProvided;
            }
        });

        /**
         * @description A human readable description of the status of the adjudication.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'disposition', {
            enumerable: true,
            get: () => this.__data.disposition,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.disposition = valueProvided;
            }
        });

        /**
         * @description Reference from the Insurer which is used in later communications which refers
    to this adjudication.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'preAuthRef', {
            enumerable: true,
            get: () => this.__data.preAuthRef,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.preAuthRef = valueProvided;
            }
        });

        /**
         * @description The time frame during which this authorization is effective.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'preAuthPeriod', {
            enumerable: true,
            get: () => this.__data.preAuthPeriod,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.preAuthPeriod = new Period(valueProvided);
            }
        });

        /**
         * @description Type of Party to be reimbursed: subscriber, provider, other.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'payeeType', {
            enumerable: true,
            get: () => this.__data.payeeType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.payeeType = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description A claim line. Either a simple (a product or service) or a 'group' of details
    which can also be a simple items or groups of sub-details.
         * @property {ClaimResponseItem[]|undefined}
        */
        Object.defineProperty(this, 'item', {
            enumerable: true,
            get: () => this.__data.item,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ClaimResponseItem = require('../backbone_elements/claimResponseItem.js');
                this.__data.item = Array.isArray(valueProvided) ? valueProvided.map(v => new ClaimResponseItem(v)) : [new ClaimResponseItem(valueProvided)];
            }
        });

        /**
         * @description The first-tier service adjudications for payor added product or service lines.
         * @property {ClaimResponseAddItem[]|undefined}
        */
        Object.defineProperty(this, 'addItem', {
            enumerable: true,
            get: () => this.__data.addItem,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ClaimResponseAddItem = require('../backbone_elements/claimResponseAddItem.js');
                this.__data.addItem = Array.isArray(valueProvided) ? valueProvided.map(v => new ClaimResponseAddItem(v)) : [new ClaimResponseAddItem(valueProvided)];
            }
        });

        /**
         * @description The adjudication results which are presented at the header level rather than
    at the line-item or add-item levels.
         * @property {ClaimResponseAdjudication[]|undefined}
        */
        Object.defineProperty(this, 'adjudication', {
            enumerable: true,
            get: () => this.__data.adjudication,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ClaimResponseAdjudication = require('../backbone_elements/claimResponseAdjudication.js');
                this.__data.adjudication = Array.isArray(valueProvided) ? valueProvided.map(v => new ClaimResponseAdjudication(v)) : [new ClaimResponseAdjudication(valueProvided)];
            }
        });

        /**
         * @description Categorized monetary totals for the adjudication.
         * @property {ClaimResponseTotal[]|undefined}
        */
        Object.defineProperty(this, 'total', {
            enumerable: true,
            get: () => this.__data.total,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ClaimResponseTotal = require('../backbone_elements/claimResponseTotal.js');
                this.__data.total = Array.isArray(valueProvided) ? valueProvided.map(v => new ClaimResponseTotal(v)) : [new ClaimResponseTotal(valueProvided)];
            }
        });

        /**
         * @description Payment details for the adjudication of the claim.
         * @property {ClaimResponsePayment|undefined}
        */
        Object.defineProperty(this, 'payment', {
            enumerable: true,
            get: () => this.__data.payment,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ClaimResponsePayment = require('../backbone_elements/claimResponsePayment.js');
                this.__data.payment = new ClaimResponsePayment(valueProvided);
            }
        });

        /**
         * @description A code, used only on a response to a preauthorization, to indicate whether the
    benefits payable have been reserved and for whom.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'fundsReserve', {
            enumerable: true,
            get: () => this.__data.fundsReserve,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.fundsReserve = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description A code for the form to be used for printing the content.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'formCode', {
            enumerable: true,
            get: () => this.__data.formCode,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.formCode = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description The actual form, by reference or inclusion, for printing the content or an
    EOB.
         * @property {Attachment|undefined}
        */
        Object.defineProperty(this, 'form', {
            enumerable: true,
            get: () => this.__data.form,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Attachment = require('../complex_types/attachment.js');
                this.__data.form = new Attachment(valueProvided);
            }
        });

        /**
         * @description A note that describes or explains adjudication results in a human readable
    form.
         * @property {ClaimResponseProcessNote[]|undefined}
        */
        Object.defineProperty(this, 'processNote', {
            enumerable: true,
            get: () => this.__data.processNote,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ClaimResponseProcessNote = require('../backbone_elements/claimResponseProcessNote.js');
                this.__data.processNote = Array.isArray(valueProvided) ? valueProvided.map(v => new ClaimResponseProcessNote(v)) : [new ClaimResponseProcessNote(valueProvided)];
            }
        });

        /**
         * @description Request for additional supporting or authorizing information.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'communicationRequest', {
            enumerable: true,
            get: () => this.__data.communicationRequest,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.communicationRequest = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description Financial instruments for reimbursement for the health care products and
    services specified on the claim.
         * @property {ClaimResponseInsurance[]|undefined}
        */
        Object.defineProperty(this, 'insurance', {
            enumerable: true,
            get: () => this.__data.insurance,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ClaimResponseInsurance = require('../backbone_elements/claimResponseInsurance.js');
                this.__data.insurance = Array.isArray(valueProvided) ? valueProvided.map(v => new ClaimResponseInsurance(v)) : [new ClaimResponseInsurance(valueProvided)];
            }
        });

        /**
         * @description Errors encountered during the processing of the adjudication.
         * @property {ClaimResponseError[]|undefined}
        */
        Object.defineProperty(this, 'error', {
            enumerable: true,
            get: () => this.__data.error,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ClaimResponseError = require('../backbone_elements/claimResponseError.js');
                this.__data.error = Array.isArray(valueProvided) ? valueProvided.map(v => new ClaimResponseError(v)) : [new ClaimResponseError(valueProvided)];
            }
        });

        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            type,
            subType,
            use,
            patient,
            created,
            insurer,
            requestor,
            request,
            outcome,
            disposition,
            preAuthRef,
            preAuthPeriod,
            payeeType,
            item,
            addItem,
            adjudication,
            total,
            payment,
            fundsReserve,
            formCode,
            form,
            processNote,
            communicationRequest,
            insurance,
            error,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ClaimResponse',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ClaimResponse';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            status: this.status,
            type: this.type && this.type.toJSON(),
            subType: this.subType && this.subType.toJSON(),
            use: this.use,
            patient: this.patient && this.patient.toJSON(),
            created: this.created,
            insurer: this.insurer && this.insurer.toJSON(),
            requestor: this.requestor && this.requestor.toJSON(),
            request: this.request && this.request.toJSON(),
            outcome: this.outcome,
            disposition: this.disposition,
            preAuthRef: this.preAuthRef,
            preAuthPeriod: this.preAuthPeriod && this.preAuthPeriod.toJSON(),
            payeeType: this.payeeType && this.payeeType.toJSON(),
            item: this.item && this.item.map(v => v.toJSON()),
            addItem: this.addItem && this.addItem.map(v => v.toJSON()),
            adjudication: this.adjudication && this.adjudication.map(v => v.toJSON()),
            total: this.total && this.total.map(v => v.toJSON()),
            payment: this.payment && this.payment.toJSON(),
            fundsReserve: this.fundsReserve && this.fundsReserve.toJSON(),
            formCode: this.formCode && this.formCode.toJSON(),
            form: this.form && this.form.toJSON(),
            processNote: this.processNote && this.processNote.map(v => v.toJSON()),
            communicationRequest: this.communicationRequest && this.communicationRequest.map(v => v.toJSON()),
            insurance: this.insurance && this.insurance.map(v => v.toJSON()),
            error: this.error && this.error.map(v => v.toJSON()),
        };
    }
}

module.exports = ClaimResponse;
