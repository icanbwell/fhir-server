

// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');
const async = require('async');

/**
ChargeItem
    The resource ChargeItem describes the provision of healthcare provider
    products for a certain patient, therefore referring not only to the product,
    but containing in addition details of the provision, like date, time, amounts
    and participating organizations and persons. Main Usage of the ChargeItem is
    to enable the billing process and internal cost allocation.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class ChargeItem extends Resource {
    /**
     * @param {String|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {uri[]|undefined} [definitionUri],
     * @param {canonical[]|undefined} [definitionCanonical],
     * @param {code} status,
     * @param {Reference[]|undefined} [partOf],
     * @param {CodeableConcept} code,
     * @param {Reference} subject,
     * @param {Reference|undefined} [context],
     * @param {dateTime|undefined} [occurrenceDateTime],
     * @param {Period|undefined} [occurrencePeriod],
     * @param {Timing|undefined} [occurrenceTiming],
     * @param {ChargeItemPerformer[]|undefined} [performer],
     * @param {Reference|undefined} [performingOrganization],
     * @param {Reference|undefined} [requestingOrganization],
     * @param {Reference|undefined} [costCenter],
     * @param {Quantity|undefined} [quantity],
     * @param {CodeableConcept[]|undefined} [bodysite],
     * @param {decimal|undefined} [factorOverride],
     * @param {Money|undefined} [priceOverride],
     * @param {String|undefined} [overrideReason],
     * @param {Reference|undefined} [enterer],
     * @param {dateTime|undefined} [enteredDate],
     * @param {CodeableConcept[]|undefined} [reason],
     * @param {Reference[]|undefined} [service],
     * @param {Reference|undefined} [productReference],
     * @param {CodeableConcept|undefined} [productCodeableConcept],
     * @param {Reference[]|undefined} [account],
     * @param {Annotation[]|undefined} [note],
     * @param {Reference[]|undefined} [supportingInformation],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
    */
    constructor (
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            definitionUri,
            definitionCanonical,
            status,
            partOf,
            code,
            subject,
            context,
            occurrenceDateTime,
            occurrencePeriod,
            occurrenceTiming,
            performer,
            performingOrganization,
            requestingOrganization,
            costCenter,
            quantity,
            bodysite,
            factorOverride,
            priceOverride,
            overrideReason,
            enterer,
            enteredDate,
            reason,
            service,
            productReference,
            productCodeableConcept,
            account,
            note,
            supportingInformation,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.meta = undefined;
                    return;
                }
                const Meta = require('../complex_types/meta.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.meta = FhirResourceCreator.create(valueProvided, Meta);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.implicitRules = undefined;
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.language = undefined;
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.text = undefined;
                    return;
                }
                const Narrative = require('../complex_types/narrative.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.text = FhirResourceCreator.create(valueProvided, Narrative);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.contained = undefined;
                    return;
                }
                const ResourceContainer = require('../simple_types/resourceContainer.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.contained = FhirResourceCreator.createArray(valueProvided);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.extension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.modifierExtension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description Identifiers assigned to this event performer or other systems.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.identifier = undefined;
                    return;
                }
                const Identifier = require('../complex_types/identifier.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.identifier = FhirResourceCreator.createArray(valueProvided, Identifier);
            }
        });

        /**
         * @description References the (external) source of pricing information, rules of application
    for the code this ChargeItem uses.
         * @property {uri[]|undefined}
        */
        Object.defineProperty(this, 'definitionUri', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.definitionUri,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.definitionUri = undefined;
                    return;
                }
                this.__data.definitionUri = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => v) : [valueProvided];
            }
        });

        /**
         * @description References the source of pricing information, rules of application for the
    code this ChargeItem uses.
         * @property {canonical[]|undefined}
        */
        Object.defineProperty(this, 'definitionCanonical', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.definitionCanonical,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.definitionCanonical = undefined;
                    return;
                }
                this.__data.definitionCanonical = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => v) : [valueProvided];
            }
        });

        /**
         * @description The current state of the ChargeItem.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.status = undefined;
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description ChargeItems can be grouped to larger ChargeItems covering the whole set.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'partOf', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.partOf,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.partOf = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.partOf = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description A code that identifies the charge, like a billing code.
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'code', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.code,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.code = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.code = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description The individual or set of individuals the action is being or was performed on.
         * @property {Reference}
        */
        Object.defineProperty(this, 'subject', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.subject,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.subject = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.subject = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description The encounter or episode of care that establishes the context for this event.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'context', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.context,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.context = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.context = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'occurrenceDateTime', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.occurrenceDateTime,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.occurrenceDateTime = undefined;
                    return;
                }
                this.__data.occurrenceDateTime = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'occurrencePeriod', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.occurrencePeriod,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.occurrencePeriod = undefined;
                    return;
                }
                const Period = require('../complex_types/period.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.occurrencePeriod = FhirResourceCreator.create(valueProvided, Period);
            }
        });

        /**
         * @description None
         * @property {Timing|undefined}
        */
        Object.defineProperty(this, 'occurrenceTiming', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.occurrenceTiming,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.occurrenceTiming = undefined;
                    return;
                }
                const Timing = require('../backbone_elements/timing.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.occurrenceTiming = FhirResourceCreator.create(valueProvided, Timing);
            }
        });

        /**
         * @description Indicates who or what performed or participated in the charged service.
         * @property {ChargeItemPerformer[]|undefined}
        */
        Object.defineProperty(this, 'performer', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.performer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.performer = undefined;
                    return;
                }
                const ChargeItemPerformer = require('../backbone_elements/chargeItemPerformer.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.performer = FhirResourceCreator.createArray(valueProvided, ChargeItemPerformer);
            }
        });

        /**
         * @description The organization requesting the service.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'performingOrganization', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.performingOrganization,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.performingOrganization = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.performingOrganization = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description The organization performing the service.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'requestingOrganization', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.requestingOrganization,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.requestingOrganization = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.requestingOrganization = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description The financial cost center permits the tracking of charge attribution.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'costCenter', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.costCenter,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.costCenter = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.costCenter = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description Quantity of which the charge item has been serviced.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'quantity', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.quantity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.quantity = undefined;
                    return;
                }
                const Quantity = require('../complex_types/quantity.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.quantity = FhirResourceCreator.create(valueProvided, Quantity);
            }
        });

        /**
         * @description The anatomical location where the related service has been applied.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'bodysite', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.bodysite,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.bodysite = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.bodysite = FhirResourceCreator.createArray(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Factor overriding the factor determined by the rules associated with the code.
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'factorOverride', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.factorOverride,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.factorOverride = undefined;
                    return;
                }
                this.__data.factorOverride = valueProvided;
            }
        });

        /**
         * @description Total price of the charge overriding the list price associated with the code.
         * @property {Money|undefined}
        */
        Object.defineProperty(this, 'priceOverride', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.priceOverride,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.priceOverride = undefined;
                    return;
                }
                const Money = require('../complex_types/money.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.priceOverride = FhirResourceCreator.create(valueProvided, Money);
            }
        });

        /**
         * @description If the list price or the rule-based factor associated with the code is
    overridden, this attribute can capture a text to indicate the  reason for this
    action.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'overrideReason', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.overrideReason,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.overrideReason = undefined;
                    return;
                }
                this.__data.overrideReason = valueProvided;
            }
        });

        /**
         * @description The device, practitioner, etc. who entered the charge item.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'enterer', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.enterer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.enterer = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.enterer = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description Date the charge item was entered.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'enteredDate', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.enteredDate,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.enteredDate = undefined;
                    return;
                }
                this.__data.enteredDate = valueProvided;
            }
        });

        /**
         * @description Describes why the event occurred in coded or textual form.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'reason', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.reason,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.reason = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.reason = FhirResourceCreator.createArray(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Indicated the rendered service that caused this charge.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'service', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.service,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.service = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.service = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'productReference', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.productReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.productReference = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.productReference = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'productCodeableConcept', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.productCodeableConcept,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.productCodeableConcept = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.productCodeableConcept = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Account into which this ChargeItems belongs.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'account', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.account,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.account = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.account = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description Comments made about the event by the performer, subject or other participants.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.note,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.note = undefined;
                    return;
                }
                const Annotation = require('../complex_types/annotation.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.note = FhirResourceCreator.createArray(valueProvided, Annotation);
            }
        });

        /**
         * @description Further information supporting this charge.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'supportingInformation', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.supportingInformation,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.supportingInformation = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.supportingInformation = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description _access
         * @property {Object|undefined}
         */
        Object.defineProperty(this, '_access', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._access,
            set: valueProvided => {
                this.__data._access = valueProvided;
            }
        });
        /**
         * @description _sourceAssigningAuthority
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceAssigningAuthority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceAssigningAuthority,
            set: valueProvided => {
                this.__data._sourceAssigningAuthority = valueProvided;
            }
        });
        /**
         * @description _uuid
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_uuid', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._uuid,
            set: valueProvided => {
                this.__data._uuid = valueProvided;
            }
        });
        /**
         * @description _sourceId
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceId,
            set: valueProvided => {
                this.__data._sourceId = valueProvided;
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            definitionUri,
            definitionCanonical,
            status,
            partOf,
            code,
            subject,
            context,
            occurrenceDateTime,
            occurrencePeriod,
            occurrenceTiming,
            performer,
            performingOrganization,
            requestingOrganization,
            costCenter,
            quantity,
            bodysite,
            factorOverride,
            priceOverride,
            overrideReason,
            enterer,
            enteredDate,
            reason,
            service,
            productReference,
            productCodeableConcept,
            account,
            note,
            supportingInformation,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        });

        /**
         * @description Define a default non-writable resourceType property
         * @property {string|undefined}
         */
        Object.defineProperty(this, 'resourceType', {
            value: 'ChargeItem',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    /**
     * @description Define a default non-writable resourceType property
     * @property {string|undefined}
     */
    static get resourceType () {
        return 'ChargeItem';
    }

    /**
     * @description Creates a blank new resource
     * @param {String|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {uri[]|undefined} [definitionUri],
     * @param {canonical[]|undefined} [definitionCanonical],
     * @param {code} status,
     * @param {Reference[]|undefined} [partOf],
     * @param {CodeableConcept} code,
     * @param {Reference} subject,
     * @param {Reference|undefined} [context],
     * @param {dateTime|undefined} [occurrenceDateTime],
     * @param {Period|undefined} [occurrencePeriod],
     * @param {Timing|undefined} [occurrenceTiming],
     * @param {ChargeItemPerformer[]|undefined} [performer],
     * @param {Reference|undefined} [performingOrganization],
     * @param {Reference|undefined} [requestingOrganization],
     * @param {Reference|undefined} [costCenter],
     * @param {Quantity|undefined} [quantity],
     * @param {CodeableConcept[]|undefined} [bodysite],
     * @param {decimal|undefined} [factorOverride],
     * @param {Money|undefined} [priceOverride],
     * @param {String|undefined} [overrideReason],
     * @param {Reference|undefined} [enterer],
     * @param {dateTime|undefined} [enteredDate],
     * @param {CodeableConcept[]|undefined} [reason],
     * @param {Reference[]|undefined} [service],
     * @param {Reference|undefined} [productReference],
     * @param {CodeableConcept|undefined} [productCodeableConcept],
     * @param {Reference[]|undefined} [account],
     * @param {Annotation[]|undefined} [note],
     * @param {Reference[]|undefined} [supportingInformation],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
     * @returns {ChargeItem}
    */
    create (
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            definitionUri,
            definitionCanonical,
            status,
            partOf,
            code,
            subject,
            context,
            occurrenceDateTime,
            occurrencePeriod,
            occurrenceTiming,
            performer,
            performingOrganization,
            requestingOrganization,
            costCenter,
            quantity,
            bodysite,
            factorOverride,
            priceOverride,
            overrideReason,
            enterer,
            enteredDate,
            reason,
            service,
            productReference,
            productCodeableConcept,
            account,
            note,
            supportingInformation,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        }
    ) {
        return new ChargeItem({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            definitionUri,
            definitionCanonical,
            status,
            partOf,
            code,
            subject,
            context,
            occurrenceDateTime,
            occurrencePeriod,
            occurrenceTiming,
            performer,
            performingOrganization,
            requestingOrganization,
            costCenter,
            quantity,
            bodysite,
            factorOverride,
            priceOverride,
            overrideReason,
            enterer,
            enteredDate,
            reason,
            service,
            productReference,
            productCodeableConcept,
            account,
            note,
            supportingInformation,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {ChargeItem}
    */
    clone () {
        return new ChargeItem(this.toJSONInternal());
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON () {
        const { removeNull } = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            definitionUri: this.definitionUri,
            definitionCanonical: this.definitionCanonical,
            status: this.status,
            partOf: this.partOf && this.partOf.map(v => v.toJSON()),
            code: this.code && this.code.toJSON(),
            subject: this.subject && this.subject.toJSON(),
            context: this.context && this.context.toJSON(),
            occurrenceDateTime: this.occurrenceDateTime,
            occurrencePeriod: this.occurrencePeriod && this.occurrencePeriod.toJSON(),
            occurrenceTiming: this.occurrenceTiming && this.occurrenceTiming.toJSON(),
            performer: this.performer && this.performer.map(v => v.toJSON()),
            performingOrganization: this.performingOrganization && this.performingOrganization.toJSON(),
            requestingOrganization: this.requestingOrganization && this.requestingOrganization.toJSON(),
            costCenter: this.costCenter && this.costCenter.toJSON(),
            quantity: this.quantity && this.quantity.toJSON(),
            bodysite: this.bodysite && this.bodysite.map(v => v.toJSON()),
            factorOverride: this.factorOverride,
            priceOverride: this.priceOverride && this.priceOverride.toJSON(),
            overrideReason: this.overrideReason,
            enterer: this.enterer && this.enterer.toJSON(),
            enteredDate: this.enteredDate,
            reason: this.reason && this.reason.map(v => v.toJSON()),
            service: this.service && this.service.map(v => v.toJSON()),
            productReference: this.productReference && this.productReference.toJSON(),
            productCodeableConcept: this.productCodeableConcept && this.productCodeableConcept.toJSON(),
            account: this.account && this.account.map(v => v.toJSON()),
            note: this.note && this.note.map(v => v.toJSON()),
            supportingInformation: this.supportingInformation && this.supportingInformation.map(v => v.toJSON())
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync ({ fnUpdateReferenceAsync }) {
            if (this.meta) { await this.meta.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.text) { await this.text.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.contained) { await async.each(this.contained, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.extension) { await async.each(this.extension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.modifierExtension) { await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.identifier) { await async.each(this.identifier, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.partOf) { await async.each(this.partOf, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.code) { await this.code.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.subject) { await this.subject.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.context) { await this.context.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.occurrencePeriod) { await this.occurrencePeriod.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.occurrenceTiming) { await this.occurrenceTiming.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.performer) { await async.each(this.performer, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.performingOrganization) { await this.performingOrganization.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.requestingOrganization) { await this.requestingOrganization.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.costCenter) { await this.costCenter.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.quantity) { await this.quantity.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.bodysite) { await async.each(this.bodysite, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.priceOverride) { await this.priceOverride.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.enterer) { await this.enterer.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.reason) { await async.each(this.reason, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.service) { await async.each(this.service, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.productReference) { await this.productReference.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.productCodeableConcept) { await this.productCodeableConcept.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.account) { await async.each(this.account, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.note) { await async.each(this.note, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.supportingInformation) { await async.each(this.supportingInformation, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal () {
        const { removeNull } = require('../../../../utils/nullRemover');
        const json = {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSONInternal(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSONInternal(),
            contained: this.contained && this.contained.map(v => v.toJSONInternal()),
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            identifier: this.identifier && this.identifier.map(v => v.toJSONInternal()),
            definitionUri: this.definitionUri,
            definitionCanonical: this.definitionCanonical,
            status: this.status,
            partOf: this.partOf && this.partOf.map(v => v.toJSONInternal()),
            code: this.code && this.code.toJSONInternal(),
            subject: this.subject && this.subject.toJSONInternal(),
            context: this.context && this.context.toJSONInternal(),
            occurrenceDateTime: this.occurrenceDateTime,
            occurrencePeriod: this.occurrencePeriod && this.occurrencePeriod.toJSONInternal(),
            occurrenceTiming: this.occurrenceTiming && this.occurrenceTiming.toJSONInternal(),
            performer: this.performer && this.performer.map(v => v.toJSONInternal()),
            performingOrganization: this.performingOrganization && this.performingOrganization.toJSONInternal(),
            requestingOrganization: this.requestingOrganization && this.requestingOrganization.toJSONInternal(),
            costCenter: this.costCenter && this.costCenter.toJSONInternal(),
            quantity: this.quantity && this.quantity.toJSONInternal(),
            bodysite: this.bodysite && this.bodysite.map(v => v.toJSONInternal()),
            factorOverride: this.factorOverride,
            priceOverride: this.priceOverride && this.priceOverride.toJSONInternal(),
            overrideReason: this.overrideReason,
            enterer: this.enterer && this.enterer.toJSONInternal(),
            enteredDate: this.enteredDate,
            reason: this.reason && this.reason.map(v => v.toJSONInternal()),
            service: this.service && this.service.map(v => v.toJSONInternal()),
            productReference: this.productReference && this.productReference.toJSONInternal(),
            productCodeableConcept: this.productCodeableConcept && this.productCodeableConcept.toJSONInternal(),
            account: this.account && this.account.map(v => v.toJSONInternal()),
            note: this.note && this.note.map(v => v.toJSONInternal()),
            supportingInformation: this.supportingInformation && this.supportingInformation.map(v => v.toJSONInternal())
        };
        if (this._access) {
            json._access = this._access;
        }
        if (this._sourceAssigningAuthority) {
            json._sourceAssigningAuthority = this._sourceAssigningAuthority;
        }
        if (this._uuid) {
            json._uuid = this._uuid;
        }
        if (this._sourceId) {
            json._sourceId = this._sourceId;
        }

        return removeNull(json);
    }
}

module.exports = ChargeItem;
