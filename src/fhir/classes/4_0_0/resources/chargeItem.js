// This file is auto-generated by generate_classes so do not edit manually

/**
ChargeItem
    The resource ChargeItem describes the provision of healthcare provider
    products for a certain patient, therefore referring not only to the product,
    but containing in addition details of the provision, like date, time, amounts
    and participating organizations and persons. Main Usage of the ChargeItem is
    to enable the billing process and internal cost allocation.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class ChargeItem {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.implicitRules = value;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.contained = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description Identifiers assigned to this event performer or other systems.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(value) ? value.map(v => new Identifier(v)) : [new Identifier(value)];
            }
        });

        /**
         * @description References the (external) source of pricing information, rules of application
    for the code this ChargeItem uses.
         * @property {uri[]|undefined}
        */
        Object.defineProperty(this, 'definitionUri', {
            enumerable: true,
            get: () => this.__data.definitionUri,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.definitionUri = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description References the source of pricing information, rules of application for the
    code this ChargeItem uses.
         * @property {canonical[]|undefined}
        */
        Object.defineProperty(this, 'definitionCanonical', {
            enumerable: true,
            get: () => this.__data.definitionCanonical,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.definitionCanonical = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description The current state of the ChargeItem.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.status = value;
            }
        });

        /**
         * @description ChargeItems can be grouped to larger ChargeItems covering the whole set.
         * @property {ChargeItem[]|undefined}
        */
        Object.defineProperty(this, 'partOf', {
            enumerable: true,
            get: () => this.__data.partOf,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.partOf = Array.isArray(value) ? value.map(v => new Reference(v)) : [new Reference(value)];
            }
        });

        /**
         * @description A code that identifies the charge, like a billing code.
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            get: () => this.__data.code,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.code = new CodeableConcept(value);
            }
        });

        /**
         * @description The individual or set of individuals the action is being or was performed on.
         * @property {ChargeItemSubject}
        */
        Object.defineProperty(this, 'subject', {
            enumerable: true,
            get: () => this.__data.subject,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.subject = new Reference(value);
            }
        });

        /**
         * @description The encounter or episode of care that establishes the context for this event.
         * @property {ChargeItemContext|undefined}
        */
        Object.defineProperty(this, 'context', {
            enumerable: true,
            get: () => this.__data.context,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.context = new Reference(value);
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'occurrenceDateTime', {
            enumerable: true,
            get: () => this.__data.occurrenceDateTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.occurrenceDateTime = value;
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'occurrencePeriod', {
            enumerable: true,
            get: () => this.__data.occurrencePeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.occurrencePeriod = new Period(value);
            }
        });

        /**
         * @description None
         * @property {Timing|undefined}
        */
        Object.defineProperty(this, 'occurrenceTiming', {
            enumerable: true,
            get: () => this.__data.occurrenceTiming,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Timing = require('../backbone_elements/timing.js');
                this.__data.occurrenceTiming = new Timing(value);
            }
        });

        /**
         * @description Indicates who or what performed or participated in the charged service.
         * @property {ChargeItemPerformer[]|undefined}
        */
        Object.defineProperty(this, 'performer', {
            enumerable: true,
            get: () => this.__data.performer,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ChargeItemPerformer = require('../backbone_elements/chargeItemPerformer.js');
                this.__data.performer = Array.isArray(value) ? value.map(v => new ChargeItemPerformer(v)) : [new ChargeItemPerformer(value)];
            }
        });

        /**
         * @description The organization requesting the service.
         * @property {Organization|undefined}
        */
        Object.defineProperty(this, 'performingOrganization', {
            enumerable: true,
            get: () => this.__data.performingOrganization,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.performingOrganization = new Reference(value);
            }
        });

        /**
         * @description The organization performing the service.
         * @property {Organization|undefined}
        */
        Object.defineProperty(this, 'requestingOrganization', {
            enumerable: true,
            get: () => this.__data.requestingOrganization,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.requestingOrganization = new Reference(value);
            }
        });

        /**
         * @description The financial cost center permits the tracking of charge attribution.
         * @property {Organization|undefined}
        */
        Object.defineProperty(this, 'costCenter', {
            enumerable: true,
            get: () => this.__data.costCenter,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.costCenter = new Reference(value);
            }
        });

        /**
         * @description Quantity of which the charge item has been serviced.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'quantity', {
            enumerable: true,
            get: () => this.__data.quantity,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.quantity = new Quantity(value);
            }
        });

        /**
         * @description The anatomical location where the related service has been applied.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'bodysite', {
            enumerable: true,
            get: () => this.__data.bodysite,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.bodysite = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description Factor overriding the factor determined by the rules associated with the code.
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'factorOverride', {
            enumerable: true,
            get: () => this.__data.factorOverride,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.factorOverride = value;
            }
        });

        /**
         * @description Total price of the charge overriding the list price associated with the code.
         * @property {Money|undefined}
        */
        Object.defineProperty(this, 'priceOverride', {
            enumerable: true,
            get: () => this.__data.priceOverride,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Money = require('../complex_types/money.js');
                this.__data.priceOverride = new Money(value);
            }
        });

        /**
         * @description If the list price or the rule-based factor associated with the code is
    overridden, this attribute can capture a text to indicate the  reason for this
    action.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'overrideReason', {
            enumerable: true,
            get: () => this.__data.overrideReason,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.overrideReason = value;
            }
        });

        /**
         * @description The device, practitioner, etc. who entered the charge item.
         * @property {ChargeItemEnterer|undefined}
        */
        Object.defineProperty(this, 'enterer', {
            enumerable: true,
            get: () => this.__data.enterer,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.enterer = new Reference(value);
            }
        });

        /**
         * @description Date the charge item was entered.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'enteredDate', {
            enumerable: true,
            get: () => this.__data.enteredDate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.enteredDate = value;
            }
        });

        /**
         * @description Describes why the event occurred in coded or textual form.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'reason', {
            enumerable: true,
            get: () => this.__data.reason,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.reason = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description Indicated the rendered service that caused this charge.
         * @property {ChargeItemService[]|undefined}
        */
        Object.defineProperty(this, 'service', {
            enumerable: true,
            get: () => this.__data.service,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.service = Array.isArray(value) ? value.map(v => new Reference(v)) : [new Reference(value)];
            }
        });

        /**
         * @description None
         * @property {ChargeItemProductReference|undefined}
        */
        Object.defineProperty(this, 'productReference', {
            enumerable: true,
            get: () => this.__data.productReference,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.productReference = new Reference(value);
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'productCodeableConcept', {
            enumerable: true,
            get: () => this.__data.productCodeableConcept,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.productCodeableConcept = new CodeableConcept(value);
            }
        });

        /**
         * @description Account into which this ChargeItems belongs.
         * @property {Account[]|undefined}
        */
        Object.defineProperty(this, 'account', {
            enumerable: true,
            get: () => this.__data.account,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.account = Array.isArray(value) ? value.map(v => new Reference(v)) : [new Reference(value)];
            }
        });

        /**
         * @description Comments made about the event by the performer, subject or other participants.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            enumerable: true,
            get: () => this.__data.note,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.note = Array.isArray(value) ? value.map(v => new Annotation(v)) : [new Annotation(value)];
            }
        });

        /**
         * @description Further information supporting this charge.
         * @property {Resource[]|undefined}
        */
        Object.defineProperty(this, 'supportingInformation', {
            enumerable: true,
            get: () => this.__data.supportingInformation,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.supportingInformation = Array.isArray(value) ? value.map(v => new Reference(v)) : [new Reference(value)];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ChargeItem',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ChargeItem';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            definitionUri: this.definitionUri,
            definitionCanonical: this.definitionCanonical,
            status: this.status,
            partOf: this.partOf && this.partOf.map(v => v.toJSON()),
            code: this.code && this.code.toJSON(),
            subject: this.subject && this.subject.toJSON(),
            context: this.context && this.context.toJSON(),
            occurrenceDateTime: this.occurrenceDateTime,
            occurrencePeriod: this.occurrencePeriod && this.occurrencePeriod.toJSON(),
            occurrenceTiming: this.occurrenceTiming && this.occurrenceTiming.toJSON(),
            performer: this.performer && this.performer.map(v => v.toJSON()),
            performingOrganization: this.performingOrganization && this.performingOrganization.toJSON(),
            requestingOrganization: this.requestingOrganization && this.requestingOrganization.toJSON(),
            costCenter: this.costCenter && this.costCenter.toJSON(),
            quantity: this.quantity && this.quantity.toJSON(),
            bodysite: this.bodysite && this.bodysite.map(v => v.toJSON()),
            factorOverride: this.factorOverride,
            priceOverride: this.priceOverride && this.priceOverride.toJSON(),
            overrideReason: this.overrideReason,
            enterer: this.enterer && this.enterer.toJSON(),
            enteredDate: this.enteredDate,
            reason: this.reason && this.reason.map(v => v.toJSON()),
            service: this.service && this.service.map(v => v.toJSON()),
            productReference: this.productReference && this.productReference.toJSON(),
            productCodeableConcept: this.productCodeableConcept && this.productCodeableConcept.toJSON(),
            account: this.account && this.account.map(v => v.toJSON()),
            note: this.note && this.note.map(v => v.toJSON()),
            supportingInformation: this.supportingInformation && this.supportingInformation.map(v => v.toJSON()),
        };
    }
}

module.exports = ChargeItem;
