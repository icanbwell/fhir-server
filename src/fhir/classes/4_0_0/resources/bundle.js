// This file is auto-generated by generate_classes so do not edit manually

/**
Bundle
    A container for a collection of resources.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class Bundle {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.implicitRules = value;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A persistent identifier for the bundle that won't change as a bundle is copied
    from server to server.
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = new Identifier(value);
            }
        });

        /**
         * @description Indicates the purpose of this bundle - how it is intended to be used.
         * @property {code}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.type = value;
            }
        });

        /**
         * @description The date/time that the bundle was assembled - i.e. when the resources were
    placed in the bundle.
         * @property {instant|undefined}
        */
        Object.defineProperty(this, 'timestamp', {
            enumerable: true,
            get: () => this.__data.timestamp,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.timestamp = value;
            }
        });

        /**
         * @description If a set of search matches, this is the total number of entries of type
    'match' across all pages in the search.  It does not include search.mode =
    'include' or 'outcome' entries and it does not provide a count of the number
    of entries in the Bundle.
         * @property {unsignedInt|undefined}
        */
        Object.defineProperty(this, 'total', {
            enumerable: true,
            get: () => this.__data.total,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.total = value;
            }
        });

        /**
         * @description A series of links that provide context to this bundle.
         * @property {BundleLink[]|undefined}
        */
        Object.defineProperty(this, 'link', {
            enumerable: true,
            get: () => this.__data.link,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let BundleLink = require('../backbone_elements/bundleLink.js');
                this.__data.link = Array.isArray(value) ? value.map(v => new BundleLink(v)) : [new BundleLink(value)];
            }
        });

        /**
         * @description An entry in a bundle resource - will either contain a resource or information
    about a resource (transactions and history only).
         * @property {BundleEntry[]|undefined}
        */
        Object.defineProperty(this, 'entry', {
            enumerable: true,
            get: () => this.__data.entry,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let BundleEntry = require('../backbone_elements/bundleEntry.js');
                this.__data.entry = Array.isArray(value) ? value.map(v => new BundleEntry(v)) : [new BundleEntry(value)];
            }
        });

        /**
         * @description Digital Signature - base64 encoded. XML-DSig or a JWT.
         * @property {Signature|undefined}
        */
        Object.defineProperty(this, 'signature', {
            enumerable: true,
            get: () => this.__data.signature,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Signature = require('../complex_types/signature.js');
                this.__data.signature = new Signature(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Bundle',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Bundle';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            identifier: this.identifier && this.identifier.toJSON(),
            type: this.type,
            timestamp: this.timestamp,
            total: this.total,
            link: this.link && this.link.map(v => v.toJSON()),
            entry: this.entry && this.entry.map(v => v.toJSON()),
            signature: this.signature && this.signature.toJSON(),
        };
    }
}

module.exports = Bundle;
