/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');


/**
Claim
    A provider issued list of professional services and products which have been
    provided, or are to be provided, to a patient which is sent to an insurer for
    reimbursement.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class Claim extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {code} status,
     * @param {CodeableConcept} type,
     * @param {CodeableConcept|undefined} [subType],
     * @param {code} use,
     * @param {Reference} patient,
     * @param {Period|undefined} [billablePeriod],
     * @param {dateTime} created,
     * @param {Reference|undefined} [enterer],
     * @param {Reference|undefined} [insurer],
     * @param {Reference} provider,
     * @param {CodeableConcept} priority,
     * @param {CodeableConcept|undefined} [fundsReserve],
     * @param {ClaimRelated[]|undefined} [related],
     * @param {Reference|undefined} [prescription],
     * @param {Reference|undefined} [originalPrescription],
     * @param {ClaimPayee|undefined} [payee],
     * @param {Reference|undefined} [referral],
     * @param {Reference|undefined} [facility],
     * @param {ClaimCareTeam[]|undefined} [careTeam],
     * @param {ClaimSupportingInfo[]|undefined} [supportingInfo],
     * @param {ClaimDiagnosis[]|undefined} [diagnosis],
     * @param {ClaimProcedure[]|undefined} [procedure],
     * @param {ClaimInsurance[]} insurance,
     * @param {ClaimAccident|undefined} [accident],
     * @param {ClaimItem[]|undefined} [item],
     * @param {Money|undefined} [total],
     * @param {Object|undefined} [_access]
     * @param {Object|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            type,
            subType,
            use,
            patient,
            billablePeriod,
            created,
            enterer,
            insurer,
            provider,
            priority,
            fundsReserve,
            related,
            prescription,
            originalPrescription,
            payee,
            referral,
            facility,
            careTeam,
            supportingInfo,
            diagnosis,
            procedure,
            insurance,
            accident,
            item,
            total,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.meta = undefined;
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.implicitRules = undefined;
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.language = undefined;
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.text = undefined;
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.contained = undefined;
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                const {getResource} = require('../../../../operations/common/getResource');
                if (Array.isArray(valueProvided)) {
                    this.__data.contained = valueProvided.filter(v => v).map(v => {
                        const ResourceCreator = getResource('4_0_0', v.resourceType);
                        return new ResourceCreator(v);
                    });
                } else {
                const ResourceCreator = getResource('4_0_0', valueProvided.resourceType);
                this.__data.contained = [new ResourceCreator(valueProvided)];
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description A unique identifier assigned to this claim.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.identifier = undefined;
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new Identifier(v)) : [new Identifier(valueProvided)];
            }
        });

        /**
         * @description The status of the resource instance.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.status = undefined;
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description The category of claim, e.g. oral, pharmacy, vision, institutional,
    professional.
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'type', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.type = undefined;
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.type = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description A finer grained suite of claim type codes which may convey additional
    information such as Inpatient vs Outpatient and/or a specialty service.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'subType', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.subType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.subType = undefined;
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.subType = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description A code to indicate whether the nature of the request is: to request
    adjudication of products and services previously rendered; or requesting
    authorization and adjudication for provision in the future; or requesting the
    non-binding adjudication of the listed products and services which could be
    provided in the future.
         * @property {code}
        */
        Object.defineProperty(this, 'use', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.use,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.use = undefined;
                    return;
                }
                this.__data.use = valueProvided;
            }
        });

        /**
         * @description The party to whom the professional services and/or products have been supplied
    or are being considered and for whom actual or forecast reimbursement is
    sought.
         * @property {Reference}
        */
        Object.defineProperty(this, 'patient', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.patient,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.patient = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.patient = new Reference(valueProvided);
            }
        });

        /**
         * @description The period for which charges are being submitted.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'billablePeriod', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.billablePeriod,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.billablePeriod = undefined;
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.billablePeriod = new Period(valueProvided);
            }
        });

        /**
         * @description The date this resource was created.
         * @property {dateTime}
        */
        Object.defineProperty(this, 'created', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.created,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.created = undefined;
                    return;
                }
                this.__data.created = valueProvided;
            }
        });

        /**
         * @description Individual who created the claim, predetermination or preauthorization.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'enterer', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.enterer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.enterer = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.enterer = new Reference(valueProvided);
            }
        });

        /**
         * @description The Insurer who is target of the request.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'insurer', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.insurer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.insurer = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.insurer = new Reference(valueProvided);
            }
        });

        /**
         * @description The provider which is responsible for the claim, predetermination or
    preauthorization.
         * @property {Reference}
        */
        Object.defineProperty(this, 'provider', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.provider,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.provider = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.provider = new Reference(valueProvided);
            }
        });

        /**
         * @description The provider-required urgency of processing the request. Typical values
    include: stat, routine deferred.
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'priority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.priority,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.priority = undefined;
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.priority = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description A code to indicate whether and for whom funds are to be reserved for future
    claims.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'fundsReserve', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.fundsReserve,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.fundsReserve = undefined;
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.fundsReserve = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description Other claims which are related to this claim such as prior submissions or
    claims for related services or for the same event.
         * @property {ClaimRelated[]|undefined}
        */
        Object.defineProperty(this, 'related', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.related,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.related = undefined;
                    return;
                }
                let ClaimRelated = require('../backbone_elements/claimRelated.js');
                this.__data.related = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new ClaimRelated(v)) : [new ClaimRelated(valueProvided)];
            }
        });

        /**
         * @description Prescription to support the dispensing of pharmacy, device or vision products.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'prescription', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.prescription,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.prescription = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.prescription = new Reference(valueProvided);
            }
        });

        /**
         * @description Original prescription which has been superseded by this prescription to
    support the dispensing of pharmacy services, medications or products.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'originalPrescription', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.originalPrescription,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.originalPrescription = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.originalPrescription = new Reference(valueProvided);
            }
        });

        /**
         * @description The party to be reimbursed for cost of the products and services according to
    the terms of the policy.
         * @property {ClaimPayee|undefined}
        */
        Object.defineProperty(this, 'payee', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.payee,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.payee = undefined;
                    return;
                }
                let ClaimPayee = require('../backbone_elements/claimPayee.js');
                this.__data.payee = new ClaimPayee(valueProvided);
            }
        });

        /**
         * @description A reference to a referral resource.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'referral', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.referral,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.referral = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.referral = new Reference(valueProvided);
            }
        });

        /**
         * @description Facility where the services were provided.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'facility', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.facility,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.facility = undefined;
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.facility = new Reference(valueProvided);
            }
        });

        /**
         * @description The members of the team who provided the products and services.
         * @property {ClaimCareTeam[]|undefined}
        */
        Object.defineProperty(this, 'careTeam', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.careTeam,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.careTeam = undefined;
                    return;
                }
                let ClaimCareTeam = require('../backbone_elements/claimCareTeam.js');
                this.__data.careTeam = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new ClaimCareTeam(v)) : [new ClaimCareTeam(valueProvided)];
            }
        });

        /**
         * @description Additional information codes regarding exceptions, special considerations, the
    condition, situation, prior or concurrent issues.
         * @property {ClaimSupportingInfo[]|undefined}
        */
        Object.defineProperty(this, 'supportingInfo', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.supportingInfo,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.supportingInfo = undefined;
                    return;
                }
                let ClaimSupportingInfo = require('../backbone_elements/claimSupportingInfo.js');
                this.__data.supportingInfo = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new ClaimSupportingInfo(v)) : [new ClaimSupportingInfo(valueProvided)];
            }
        });

        /**
         * @description Information about diagnoses relevant to the claim items.
         * @property {ClaimDiagnosis[]|undefined}
        */
        Object.defineProperty(this, 'diagnosis', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.diagnosis,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.diagnosis = undefined;
                    return;
                }
                let ClaimDiagnosis = require('../backbone_elements/claimDiagnosis.js');
                this.__data.diagnosis = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new ClaimDiagnosis(v)) : [new ClaimDiagnosis(valueProvided)];
            }
        });

        /**
         * @description Procedures performed on the patient relevant to the billing items with the
    claim.
         * @property {ClaimProcedure[]|undefined}
        */
        Object.defineProperty(this, 'procedure', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.procedure,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.procedure = undefined;
                    return;
                }
                let ClaimProcedure = require('../backbone_elements/claimProcedure.js');
                this.__data.procedure = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new ClaimProcedure(v)) : [new ClaimProcedure(valueProvided)];
            }
        });

        /**
         * @description Financial instruments for reimbursement for the health care products and
    services specified on the claim.
         * @property {ClaimInsurance[]}
        */
        Object.defineProperty(this, 'insurance', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.insurance,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.insurance = undefined;
                    return;
                }
                let ClaimInsurance = require('../backbone_elements/claimInsurance.js');
                this.__data.insurance = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new ClaimInsurance(v)) : [new ClaimInsurance(valueProvided)];
            }
        });

        /**
         * @description Details of an accident which resulted in injuries which required the products
    and services listed in the claim.
         * @property {ClaimAccident|undefined}
        */
        Object.defineProperty(this, 'accident', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.accident,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.accident = undefined;
                    return;
                }
                let ClaimAccident = require('../backbone_elements/claimAccident.js');
                this.__data.accident = new ClaimAccident(valueProvided);
            }
        });

        /**
         * @description A claim line. Either a simple  product or service or a 'group' of details
    which can each be a simple items or groups of sub-details.
         * @property {ClaimItem[]|undefined}
        */
        Object.defineProperty(this, 'item', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.item,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.item = undefined;
                    return;
                }
                let ClaimItem = require('../backbone_elements/claimItem.js');
                this.__data.item = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => new ClaimItem(v)) : [new ClaimItem(valueProvided)];
            }
        });

        /**
         * @description The total value of the all the items in the claim.
         * @property {Money|undefined}
        */
        Object.defineProperty(this, 'total', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.total,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.total = undefined;
                    return;
                }
                let Money = require('../complex_types/money.js');
                this.__data.total = new Money(valueProvided);
            }
        });


        /**
         * @description _access
         * @property {Object|undefined}
         */
        Object.defineProperty(this, '_access', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._access,
            set: valueProvided => {
                this.__data._access = valueProvided;
            }
        });
        /**
         * @description _sourceAssigningAuthority
         * @property {Object|undefined}
         */
        Object.defineProperty(this, '_sourceAssigningAuthority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceAssigningAuthority,
            set: valueProvided => {
                this.__data._sourceAssigningAuthority = valueProvided;
            }
        });
        /**
         * @description _uuid
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_uuid', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._uuid,
            set: valueProvided => {
                this.__data._uuid = valueProvided;
            }
        });
        /**
         * @description _sourceId
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceId,
            set: valueProvided => {
                this.__data._sourceId = valueProvided;
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            type,
            subType,
            use,
            patient,
            billablePeriod,
            created,
            enterer,
            insurer,
            provider,
            priority,
            fundsReserve,
            related,
            prescription,
            originalPrescription,
            payee,
            referral,
            facility,
            careTeam,
            supportingInfo,
            diagnosis,
            procedure,
            insurance,
            accident,
            item,
            total,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Claim',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    static get resourceType() {
        return 'Claim';
    }

    /**
     * @description Creates a blank new resource
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {code} status,
     * @param {CodeableConcept} type,
     * @param {CodeableConcept|undefined} [subType],
     * @param {code} use,
     * @param {Reference} patient,
     * @param {Period|undefined} [billablePeriod],
     * @param {dateTime} created,
     * @param {Reference|undefined} [enterer],
     * @param {Reference|undefined} [insurer],
     * @param {Reference} provider,
     * @param {CodeableConcept} priority,
     * @param {CodeableConcept|undefined} [fundsReserve],
     * @param {ClaimRelated[]|undefined} [related],
     * @param {Reference|undefined} [prescription],
     * @param {Reference|undefined} [originalPrescription],
     * @param {ClaimPayee|undefined} [payee],
     * @param {Reference|undefined} [referral],
     * @param {Reference|undefined} [facility],
     * @param {ClaimCareTeam[]|undefined} [careTeam],
     * @param {ClaimSupportingInfo[]|undefined} [supportingInfo],
     * @param {ClaimDiagnosis[]|undefined} [diagnosis],
     * @param {ClaimProcedure[]|undefined} [procedure],
     * @param {ClaimInsurance[]} insurance,
     * @param {ClaimAccident|undefined} [accident],
     * @param {ClaimItem[]|undefined} [item],
     * @param {Money|undefined} [total],
     * @param {Object|undefined} [_access]
     * @param {Object|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
     * @returns {Claim}
    */
    create(
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            type,
            subType,
            use,
            patient,
            billablePeriod,
            created,
            enterer,
            insurer,
            provider,
            priority,
            fundsReserve,
            related,
            prescription,
            originalPrescription,
            payee,
            referral,
            facility,
            careTeam,
            supportingInfo,
            diagnosis,
            procedure,
            insurance,
            accident,
            item,
            total,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        }
    ) {
        return new Claim({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            type,
            subType,
            use,
            patient,
            billablePeriod,
            created,
            enterer,
            insurer,
            provider,
            priority,
            fundsReserve,
            related,
            prescription,
            originalPrescription,
            payee,
            referral,
            facility,
            careTeam,
            supportingInfo,
            diagnosis,
            procedure,
            insurance,
            accident,
            item,
            total,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {Claim}
    */
    clone() {
        return new Claim(this.toJSONInternal());
    }


    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            status: this.status,
            type: this.type && this.type.toJSON(),
            subType: this.subType && this.subType.toJSON(),
            use: this.use,
            patient: this.patient && this.patient.toJSON(),
            billablePeriod: this.billablePeriod && this.billablePeriod.toJSON(),
            created: this.created,
            enterer: this.enterer && this.enterer.toJSON(),
            insurer: this.insurer && this.insurer.toJSON(),
            provider: this.provider && this.provider.toJSON(),
            priority: this.priority && this.priority.toJSON(),
            fundsReserve: this.fundsReserve && this.fundsReserve.toJSON(),
            related: this.related && this.related.map(v => v.toJSON()),
            prescription: this.prescription && this.prescription.toJSON(),
            originalPrescription: this.originalPrescription && this.originalPrescription.toJSON(),
            payee: this.payee && this.payee.toJSON(),
            referral: this.referral && this.referral.toJSON(),
            facility: this.facility && this.facility.toJSON(),
            careTeam: this.careTeam && this.careTeam.map(v => v.toJSON()),
            supportingInfo: this.supportingInfo && this.supportingInfo.map(v => v.toJSON()),
            diagnosis: this.diagnosis && this.diagnosis.map(v => v.toJSON()),
            procedure: this.procedure && this.procedure.map(v => v.toJSON()),
            insurance: this.insurance && this.insurance.map(v => v.toJSON()),
            accident: this.accident && this.accident.toJSON(),
            item: this.item && this.item.map(v => v.toJSON()),
            total: this.total && this.total.toJSON(),
        });
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal() {
        const {removeNull} = require('../../../../utils/nullRemover');
        const json = this.toJSON();

        if (this._access) {
            json._access = this._access;
        }
        if (this._sourceAssigningAuthority) {
            json._sourceAssigningAuthority = this._sourceAssigningAuthority;
        }
        if (this._uuid) {
            json._uuid = this._uuid;
        }
        if (this._sourceId) {
            json._sourceId = this._sourceId;
        }

        return removeNull(json);
    }
}

module.exports = Claim;
