

// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');
const async = require('async');

/**
MedicinalProductDefinition
    A medicinal product, being a substance or combination of substances that is
    intended to treat, prevent or diagnose a disease, or to restore, correct or
    modify physiological functions by exerting a pharmacological, immunological or
    metabolic action. This resource is intended to define and detail such products
    and their properties, for uses other than direct patient care (e.g. regulatory
    use, or drug catalogs).
    If the element is present, it must have either a @value, an @id, or extensions
*/
class MedicinalProductDefinition extends Resource {
    /**
     * @param {String|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {CodeableConcept|undefined} [type],
     * @param {CodeableConcept|undefined} [domain],
     * @param {String|undefined} [version],
     * @param {CodeableConcept|undefined} [status],
     * @param {dateTime|undefined} [statusDate],
     * @param {markdown|undefined} [description],
     * @param {CodeableConcept|undefined} [combinedPharmaceuticalDoseForm],
     * @param {CodeableConcept[]|undefined} [route],
     * @param {markdown|undefined} [indication],
     * @param {CodeableConcept|undefined} [legalStatusOfSupply],
     * @param {CodeableConcept|undefined} [additionalMonitoringIndicator],
     * @param {CodeableConcept[]|undefined} [specialMeasures],
     * @param {CodeableConcept|undefined} [pediatricUseIndicator],
     * @param {CodeableConcept[]|undefined} [classification],
     * @param {MarketingStatus[]|undefined} [marketingStatus],
     * @param {CodeableConcept[]|undefined} [packagedMedicinalProduct],
     * @param {CodeableConcept[]|undefined} [ingredient],
     * @param {CodeableReference[]|undefined} [impurity],
     * @param {Reference[]|undefined} [attachedDocument],
     * @param {Reference[]|undefined} [masterFile],
     * @param {MedicinalProductDefinitionContact[]|undefined} [contact],
     * @param {Reference[]|undefined} [clinicalTrial],
     * @param {Coding[]|undefined} [code],
     * @param {MedicinalProductDefinitionName[]} name,
     * @param {MedicinalProductDefinitionCrossReference[]|undefined} [crossReference],
     * @param {MedicinalProductDefinitionOperation[]|undefined} [operation],
     * @param {MedicinalProductDefinitionCharacteristic[]|undefined} [characteristic],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
    */
    constructor (
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            type,
            domain,
            version,
            status,
            statusDate,
            description,
            combinedPharmaceuticalDoseForm,
            route,
            indication,
            legalStatusOfSupply,
            additionalMonitoringIndicator,
            specialMeasures,
            pediatricUseIndicator,
            classification,
            marketingStatus,
            packagedMedicinalProduct,
            ingredient,
            impurity,
            attachedDocument,
            masterFile,
            contact,
            clinicalTrial,
            code,
            name,
            crossReference,
            operation,
            characteristic,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.meta = undefined;
                    return;
                }
                const Meta = require('../complex_types/meta.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.meta = FhirResourceCreator.create(valueProvided, Meta);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.implicitRules = undefined;
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.language = undefined;
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.text = undefined;
                    return;
                }
                const Narrative = require('../complex_types/narrative.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.text = FhirResourceCreator.create(valueProvided, Narrative);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.contained = undefined;
                    return;
                }
                const ResourceContainer = require('../simple_types/resourceContainer.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.contained = FhirResourceCreator.createArray(valueProvided);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.extension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.modifierExtension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description Business identifier for this product. Could be an MPID. When in development or
    being regulated, products are typically referenced by official identifiers,
    assigned by a manufacturer or regulator, and unique to a product (which, when
    compared to a product instance being prescribed, is actually a product type).
    See also MedicinalProductDefinition.code.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.identifier = undefined;
                    return;
                }
                const Identifier = require('../complex_types/identifier.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.identifier = FhirResourceCreator.createArray(valueProvided, Identifier);
            }
        });

        /**
         * @description Regulatory type, e.g. Investigational or Authorized.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'type', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.type = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.type = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description If this medicine applies to human or veterinary uses.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'domain', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.domain,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.domain = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.domain = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description A business identifier relating to a specific version of the product, this is
    commonly used to support revisions to an existing product.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'version', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.version,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.version = undefined;
                    return;
                }
                this.__data.version = valueProvided;
            }
        });

        /**
         * @description The status within the lifecycle of this product record. A high-level status,
    this is not intended to duplicate details carried elsewhere such as legal
    status, or authorization status.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.status = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.status = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description The date at which the given status became applicable.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'statusDate', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.statusDate,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.statusDate = undefined;
                    return;
                }
                this.__data.statusDate = valueProvided;
            }
        });

        /**
         * @description General description of this product.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'description', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.description = undefined;
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description The dose form for a single part product, or combined form of a multiple part
    product. This is one concept that describes all the components. It does not
    represent the form with components physically mixed, if that might be
    necessary, for which see
    (AdministrableProductDefinition.administrableDoseForm).
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'combinedPharmaceuticalDoseForm', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.combinedPharmaceuticalDoseForm,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.combinedPharmaceuticalDoseForm = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.combinedPharmaceuticalDoseForm = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description The path by which the product is taken into or makes contact with the body. In
    some regions this is referred to as the licenced or approved route. See also
    AdministrableProductDefinition resource. MedicinalProductDefinition.route is
    the same concept as AdministrableProductDefinition.routeOfAdministration.code,
    and they cannot be used together.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'route', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.route,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.route = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.route = FhirResourceCreator.createArray(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Description of indication(s) for this product, used when structured
    indications are not required. In cases where structured indications are
    required, they are captured using the ClinicalUseDefinition resource. An
    indication is a medical situation for which using the product is appropriate.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'indication', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.indication,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.indication = undefined;
                    return;
                }
                this.__data.indication = valueProvided;
            }
        });

        /**
         * @description The legal status of supply of the medicinal product as classified by the
    regulator.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'legalStatusOfSupply', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.legalStatusOfSupply,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.legalStatusOfSupply = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.legalStatusOfSupply = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Whether the Medicinal Product is subject to additional monitoring for
    regulatory reasons, such as heightened reporting requirements.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'additionalMonitoringIndicator', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.additionalMonitoringIndicator,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.additionalMonitoringIndicator = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.additionalMonitoringIndicator = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Whether the Medicinal Product is subject to special measures for regulatory
    reasons, such as a requirement to conduct post-authorisation studies.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'specialMeasures', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.specialMeasures,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.specialMeasures = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.specialMeasures = FhirResourceCreator.createArray(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description If authorised for use in children, or infants, neonates etc.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'pediatricUseIndicator', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.pediatricUseIndicator,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.pediatricUseIndicator = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.pediatricUseIndicator = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Allows the product to be classified by various systems, commonly WHO ATC.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'classification', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.classification,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.classification = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.classification = FhirResourceCreator.createArray(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Marketing status of the medicinal product, in contrast to marketing
    authorization. This refers to the product being actually 'on the market' as
    opposed to being allowed to be on the market (which is an authorization).
         * @property {MarketingStatus[]|undefined}
        */
        Object.defineProperty(this, 'marketingStatus', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.marketingStatus,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.marketingStatus = undefined;
                    return;
                }
                const MarketingStatus = require('../backbone_elements/marketingStatus.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.marketingStatus = FhirResourceCreator.createArray(valueProvided, MarketingStatus);
            }
        });

        /**
         * @description Package type for the product. See also the PackagedProductDefinition resource.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'packagedMedicinalProduct', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.packagedMedicinalProduct,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.packagedMedicinalProduct = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.packagedMedicinalProduct = FhirResourceCreator.createArray(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description The ingredients of this medicinal product - when not detailed in other
    resources. This is only needed if the ingredients are not specified by
    incoming references from the Ingredient resource, or indirectly via incoming
    AdministrableProductDefinition, PackagedProductDefinition or
    ManufacturedItemDefinition references. In cases where those levels of detail
    are not used, the ingredients may be specified directly here as codes.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'ingredient', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.ingredient,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.ingredient = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.ingredient = FhirResourceCreator.createArray(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Any component of the drug product which is not the chemical entity defined as
    the drug substance, or an excipient in the drug product. This includes
    process-related impurities and contaminants, product-related impurities
    including degradation products.
         * @property {CodeableReference[]|undefined}
        */
        Object.defineProperty(this, 'impurity', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.impurity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.impurity = undefined;
                    return;
                }
                const CodeableReference = require('../complex_types/codeableReference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.impurity = FhirResourceCreator.createArray(valueProvided, CodeableReference);
            }
        });

        /**
         * @description Additional information or supporting documentation about the medicinal
    product.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'attachedDocument', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.attachedDocument,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.attachedDocument = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.attachedDocument = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description A master file for the medicinal product (e.g. Pharmacovigilance System Master
    File). Drug master files (DMFs) are documents submitted to regulatory agencies
    to provide confidential detailed information about facilities, processes or
    articles used in the manufacturing, processing, packaging and storing of drug
    products.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'masterFile', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.masterFile,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.masterFile = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.masterFile = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description A product specific contact, person (in a role), or an organization.
         * @property {MedicinalProductDefinitionContact[]|undefined}
        */
        Object.defineProperty(this, 'contact', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contact,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.contact = undefined;
                    return;
                }
                const MedicinalProductDefinitionContact = require('../backbone_elements/medicinalProductDefinitionContact.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.contact = FhirResourceCreator.createArray(valueProvided, MedicinalProductDefinitionContact);
            }
        });

        /**
         * @description Clinical trials or studies that this product is involved in.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'clinicalTrial', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.clinicalTrial,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.clinicalTrial = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.clinicalTrial = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description A code that this product is known by, usually within some formal terminology,
    perhaps assigned by a third party (i.e. not the manufacturer or regulator).
    Products (types of medications) tend to be known by identifiers during
    development and within regulatory process. However when they are prescribed
    they tend to be identified by codes. The same product may be have multiple
    codes, applied to it by multiple organizations.
         * @property {Coding[]|undefined}
        */
        Object.defineProperty(this, 'code', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.code,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.code = undefined;
                    return;
                }
                const Coding = require('../complex_types/coding.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.code = FhirResourceCreator.createArray(valueProvided, Coding);
            }
        });

        /**
         * @description The product's name, including full name and possibly coded parts.
         * @property {MedicinalProductDefinitionName[]}
        */
        Object.defineProperty(this, 'name', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.name,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.name = undefined;
                    return;
                }
                const MedicinalProductDefinitionName = require('../backbone_elements/medicinalProductDefinitionName.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.name = FhirResourceCreator.createArray(valueProvided, MedicinalProductDefinitionName);
            }
        });

        /**
         * @description Reference to another product, e.g. for linking authorised to investigational
    product, or a virtual product.
         * @property {MedicinalProductDefinitionCrossReference[]|undefined}
        */
        Object.defineProperty(this, 'crossReference', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.crossReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.crossReference = undefined;
                    return;
                }
                const MedicinalProductDefinitionCrossReference = require('../backbone_elements/medicinalProductDefinitionCrossReference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.crossReference = FhirResourceCreator.createArray(valueProvided, MedicinalProductDefinitionCrossReference);
            }
        });

        /**
         * @description A manufacturing or administrative process or step associated with (or
    performed on) the medicinal product.
         * @property {MedicinalProductDefinitionOperation[]|undefined}
        */
        Object.defineProperty(this, 'operation', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.operation,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.operation = undefined;
                    return;
                }
                const MedicinalProductDefinitionOperation = require('../backbone_elements/medicinalProductDefinitionOperation.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.operation = FhirResourceCreator.createArray(valueProvided, MedicinalProductDefinitionOperation);
            }
        });

        /**
         * @description Allows the key product features to be recorded, such as "sugar free",
    "modified release", "parallel import".
         * @property {MedicinalProductDefinitionCharacteristic[]|undefined}
        */
        Object.defineProperty(this, 'characteristic', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.characteristic,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.characteristic = undefined;
                    return;
                }
                const MedicinalProductDefinitionCharacteristic = require('../backbone_elements/medicinalProductDefinitionCharacteristic.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.characteristic = FhirResourceCreator.createArray(valueProvided, MedicinalProductDefinitionCharacteristic);
            }
        });

        /**
         * @description _access
         * @property {Object|undefined}
         */
        Object.defineProperty(this, '_access', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._access,
            set: valueProvided => {
                this.__data._access = valueProvided;
            }
        });
        /**
         * @description _sourceAssigningAuthority
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceAssigningAuthority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceAssigningAuthority,
            set: valueProvided => {
                this.__data._sourceAssigningAuthority = valueProvided;
            }
        });
        /**
         * @description _uuid
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_uuid', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._uuid,
            set: valueProvided => {
                this.__data._uuid = valueProvided;
            }
        });
        /**
         * @description _sourceId
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceId,
            set: valueProvided => {
                this.__data._sourceId = valueProvided;
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            type,
            domain,
            version,
            status,
            statusDate,
            description,
            combinedPharmaceuticalDoseForm,
            route,
            indication,
            legalStatusOfSupply,
            additionalMonitoringIndicator,
            specialMeasures,
            pediatricUseIndicator,
            classification,
            marketingStatus,
            packagedMedicinalProduct,
            ingredient,
            impurity,
            attachedDocument,
            masterFile,
            contact,
            clinicalTrial,
            code,
            name,
            crossReference,
            operation,
            characteristic,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        });

        /**
         * @description Define a default non-writable resourceType property
         * @property {string|undefined}
         */
        Object.defineProperty(this, 'resourceType', {
            value: 'MedicinalProductDefinition',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    /**
     * @description Define a default non-writable resourceType property
     * @property {string|undefined}
     */
    static get resourceType () {
        return 'MedicinalProductDefinition';
    }

    /**
     * @description Creates a blank new resource
     * @param {String|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {CodeableConcept|undefined} [type],
     * @param {CodeableConcept|undefined} [domain],
     * @param {String|undefined} [version],
     * @param {CodeableConcept|undefined} [status],
     * @param {dateTime|undefined} [statusDate],
     * @param {markdown|undefined} [description],
     * @param {CodeableConcept|undefined} [combinedPharmaceuticalDoseForm],
     * @param {CodeableConcept[]|undefined} [route],
     * @param {markdown|undefined} [indication],
     * @param {CodeableConcept|undefined} [legalStatusOfSupply],
     * @param {CodeableConcept|undefined} [additionalMonitoringIndicator],
     * @param {CodeableConcept[]|undefined} [specialMeasures],
     * @param {CodeableConcept|undefined} [pediatricUseIndicator],
     * @param {CodeableConcept[]|undefined} [classification],
     * @param {MarketingStatus[]|undefined} [marketingStatus],
     * @param {CodeableConcept[]|undefined} [packagedMedicinalProduct],
     * @param {CodeableConcept[]|undefined} [ingredient],
     * @param {CodeableReference[]|undefined} [impurity],
     * @param {Reference[]|undefined} [attachedDocument],
     * @param {Reference[]|undefined} [masterFile],
     * @param {MedicinalProductDefinitionContact[]|undefined} [contact],
     * @param {Reference[]|undefined} [clinicalTrial],
     * @param {Coding[]|undefined} [code],
     * @param {MedicinalProductDefinitionName[]} name,
     * @param {MedicinalProductDefinitionCrossReference[]|undefined} [crossReference],
     * @param {MedicinalProductDefinitionOperation[]|undefined} [operation],
     * @param {MedicinalProductDefinitionCharacteristic[]|undefined} [characteristic],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
     * @returns {MedicinalProductDefinition}
    */
    create (
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            type,
            domain,
            version,
            status,
            statusDate,
            description,
            combinedPharmaceuticalDoseForm,
            route,
            indication,
            legalStatusOfSupply,
            additionalMonitoringIndicator,
            specialMeasures,
            pediatricUseIndicator,
            classification,
            marketingStatus,
            packagedMedicinalProduct,
            ingredient,
            impurity,
            attachedDocument,
            masterFile,
            contact,
            clinicalTrial,
            code,
            name,
            crossReference,
            operation,
            characteristic,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        }
    ) {
        return new MedicinalProductDefinition({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            type,
            domain,
            version,
            status,
            statusDate,
            description,
            combinedPharmaceuticalDoseForm,
            route,
            indication,
            legalStatusOfSupply,
            additionalMonitoringIndicator,
            specialMeasures,
            pediatricUseIndicator,
            classification,
            marketingStatus,
            packagedMedicinalProduct,
            ingredient,
            impurity,
            attachedDocument,
            masterFile,
            contact,
            clinicalTrial,
            code,
            name,
            crossReference,
            operation,
            characteristic,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {MedicinalProductDefinition}
    */
    clone () {
        return new MedicinalProductDefinition(this.toJSONInternal());
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON () {
        const { removeNull } = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            type: this.type && this.type.toJSON(),
            domain: this.domain && this.domain.toJSON(),
            version: this.version,
            status: this.status && this.status.toJSON(),
            statusDate: this.statusDate,
            description: this.description,
            combinedPharmaceuticalDoseForm: this.combinedPharmaceuticalDoseForm && this.combinedPharmaceuticalDoseForm.toJSON(),
            route: this.route && this.route.map(v => v.toJSON()),
            indication: this.indication,
            legalStatusOfSupply: this.legalStatusOfSupply && this.legalStatusOfSupply.toJSON(),
            additionalMonitoringIndicator: this.additionalMonitoringIndicator && this.additionalMonitoringIndicator.toJSON(),
            specialMeasures: this.specialMeasures && this.specialMeasures.map(v => v.toJSON()),
            pediatricUseIndicator: this.pediatricUseIndicator && this.pediatricUseIndicator.toJSON(),
            classification: this.classification && this.classification.map(v => v.toJSON()),
            marketingStatus: this.marketingStatus && this.marketingStatus.map(v => v.toJSON()),
            packagedMedicinalProduct: this.packagedMedicinalProduct && this.packagedMedicinalProduct.map(v => v.toJSON()),
            ingredient: this.ingredient && this.ingredient.map(v => v.toJSON()),
            impurity: this.impurity && this.impurity.map(v => v.toJSON()),
            attachedDocument: this.attachedDocument && this.attachedDocument.map(v => v.toJSON()),
            masterFile: this.masterFile && this.masterFile.map(v => v.toJSON()),
            contact: this.contact && this.contact.map(v => v.toJSON()),
            clinicalTrial: this.clinicalTrial && this.clinicalTrial.map(v => v.toJSON()),
            code: this.code && this.code.map(v => v.toJSON()),
            name: this.name && this.name.map(v => v.toJSON()),
            crossReference: this.crossReference && this.crossReference.map(v => v.toJSON()),
            operation: this.operation && this.operation.map(v => v.toJSON()),
            characteristic: this.characteristic && this.characteristic.map(v => v.toJSON())
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync ({ fnUpdateReferenceAsync }) {
            if (this.meta) { await this.meta.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.text) { await this.text.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.contained) { await async.each(this.contained, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.extension) { await async.each(this.extension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.modifierExtension) { await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.identifier) { await async.each(this.identifier, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.type) { await this.type.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.domain) { await this.domain.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.status) { await this.status.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.combinedPharmaceuticalDoseForm) { await this.combinedPharmaceuticalDoseForm.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.route) { await async.each(this.route, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.legalStatusOfSupply) { await this.legalStatusOfSupply.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.additionalMonitoringIndicator) { await this.additionalMonitoringIndicator.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.specialMeasures) { await async.each(this.specialMeasures, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.pediatricUseIndicator) { await this.pediatricUseIndicator.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.classification) { await async.each(this.classification, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.marketingStatus) { await async.each(this.marketingStatus, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.packagedMedicinalProduct) { await async.each(this.packagedMedicinalProduct, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.ingredient) { await async.each(this.ingredient, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.impurity) { await async.each(this.impurity, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.attachedDocument) { await async.each(this.attachedDocument, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.masterFile) { await async.each(this.masterFile, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.contact) { await async.each(this.contact, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.clinicalTrial) { await async.each(this.clinicalTrial, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.code) { await async.each(this.code, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.name) { await async.each(this.name, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.crossReference) { await async.each(this.crossReference, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.operation) { await async.each(this.operation, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.characteristic) { await async.each(this.characteristic, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal () {
        const { removeNull } = require('../../../../utils/nullRemover');
        const json = {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSONInternal(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSONInternal(),
            contained: this.contained && this.contained.map(v => v.toJSONInternal()),
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            identifier: this.identifier && this.identifier.map(v => v.toJSONInternal()),
            type: this.type && this.type.toJSONInternal(),
            domain: this.domain && this.domain.toJSONInternal(),
            version: this.version,
            status: this.status && this.status.toJSONInternal(),
            statusDate: this.statusDate,
            description: this.description,
            combinedPharmaceuticalDoseForm: this.combinedPharmaceuticalDoseForm && this.combinedPharmaceuticalDoseForm.toJSONInternal(),
            route: this.route && this.route.map(v => v.toJSONInternal()),
            indication: this.indication,
            legalStatusOfSupply: this.legalStatusOfSupply && this.legalStatusOfSupply.toJSONInternal(),
            additionalMonitoringIndicator: this.additionalMonitoringIndicator && this.additionalMonitoringIndicator.toJSONInternal(),
            specialMeasures: this.specialMeasures && this.specialMeasures.map(v => v.toJSONInternal()),
            pediatricUseIndicator: this.pediatricUseIndicator && this.pediatricUseIndicator.toJSONInternal(),
            classification: this.classification && this.classification.map(v => v.toJSONInternal()),
            marketingStatus: this.marketingStatus && this.marketingStatus.map(v => v.toJSONInternal()),
            packagedMedicinalProduct: this.packagedMedicinalProduct && this.packagedMedicinalProduct.map(v => v.toJSONInternal()),
            ingredient: this.ingredient && this.ingredient.map(v => v.toJSONInternal()),
            impurity: this.impurity && this.impurity.map(v => v.toJSONInternal()),
            attachedDocument: this.attachedDocument && this.attachedDocument.map(v => v.toJSONInternal()),
            masterFile: this.masterFile && this.masterFile.map(v => v.toJSONInternal()),
            contact: this.contact && this.contact.map(v => v.toJSONInternal()),
            clinicalTrial: this.clinicalTrial && this.clinicalTrial.map(v => v.toJSONInternal()),
            code: this.code && this.code.map(v => v.toJSONInternal()),
            name: this.name && this.name.map(v => v.toJSONInternal()),
            crossReference: this.crossReference && this.crossReference.map(v => v.toJSONInternal()),
            operation: this.operation && this.operation.map(v => v.toJSONInternal()),
            characteristic: this.characteristic && this.characteristic.map(v => v.toJSONInternal())
        };
        if (this._access) {
            json._access = this._access;
        }
        if (this._sourceAssigningAuthority) {
            json._sourceAssigningAuthority = this._sourceAssigningAuthority;
        }
        if (this._uuid) {
            json._uuid = this._uuid;
        }
        if (this._sourceId) {
            json._sourceId = this._sourceId;
        }

        return removeNull(json);
    }
}

module.exports = MedicinalProductDefinition;
