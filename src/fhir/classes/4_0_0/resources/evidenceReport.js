

// This file is auto-generated by generate_classes so do not edit manually

const { removeNull } = require('../../../../utils/nullRemover');

const Resource = require('../resources/resource');
const async = require('async');

/**
EvidenceReport
    The EvidenceReport Resource is a specialized container for a collection of
    resources and codable concepts, adapted to support compositions of Evidence,
    EvidenceVariable, and Citation resources and related concepts.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class EvidenceReport extends Resource {
    /**
     * @param {String|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {uri|undefined} [url],
     * @param {code} status,
     * @param {UsageContext[]|undefined} [useContext],
     * @param {Identifier[]|undefined} [identifier],
     * @param {Identifier[]|undefined} [relatedIdentifier],
     * @param {Reference|undefined} [citeAsReference],
     * @param {markdown|undefined} [citeAsMarkdown],
     * @param {CodeableConcept|undefined} [type],
     * @param {Annotation[]|undefined} [note],
     * @param {RelatedArtifact[]|undefined} [relatedArtifact],
     * @param {EvidenceReportSubject} subject,
     * @param {String|undefined} [publisher],
     * @param {ContactDetail[]|undefined} [contact],
     * @param {ContactDetail[]|undefined} [author],
     * @param {ContactDetail[]|undefined} [editor],
     * @param {ContactDetail[]|undefined} [reviewer],
     * @param {ContactDetail[]|undefined} [endorser],
     * @param {EvidenceReportRelatesTo[]|undefined} [relatesTo],
     * @param {EvidenceReportSection[]|undefined} [section],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
    */
    constructor (
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            status,
            useContext,
            identifier,
            relatedIdentifier,
            citeAsReference,
            citeAsMarkdown,
            type,
            note,
            relatedArtifact,
            subject,
            publisher,
            contact,
            author,
            editor,
            reviewer,
            endorser,
            relatesTo,
            section,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.meta = undefined;
                    return;
                }
                const Meta = require('../complex_types/meta.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.meta = FhirResourceCreator.create(valueProvided, Meta);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.implicitRules = undefined;
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.language = undefined;
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.text = undefined;
                    return;
                }
                const Narrative = require('../complex_types/narrative.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.text = FhirResourceCreator.create(valueProvided, Narrative);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.contained = undefined;
                    return;
                }
                const ResourceContainer = require('../simple_types/resourceContainer.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.contained = FhirResourceCreator.createArray(valueProvided);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.extension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.modifierExtension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description An absolute URI that is used to identify this EvidenceReport when it is
    referenced in a specification, model, design or an instance; also called its
    canonical identifier. This SHOULD be globally unique and SHOULD be a literal
    address at which at which an authoritative instance of this summary is (or
    will be) published. This URL can be the target of a canonical reference. It
    SHALL remain the same when the summary is stored on different servers.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'url', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.url,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.url = undefined;
                    return;
                }
                this.__data.url = valueProvided;
            }
        });

        /**
         * @description The status of this summary. Enables tracking the life-cycle of the content.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.status = undefined;
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description The content was developed with a focus and intent of supporting the contexts
    that are listed. These contexts may be general categories (gender, age, ...)
    or may be references to specific programs (insurance plans, studies, ...) and
    may be used to assist with indexing and searching for appropriate evidence
    report instances.
         * @property {UsageContext[]|undefined}
        */
        Object.defineProperty(this, 'useContext', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.useContext,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.useContext = undefined;
                    return;
                }
                const UsageContext = require('../complex_types/usageContext.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.useContext = FhirResourceCreator.createArray(valueProvided, UsageContext);
            }
        });

        /**
         * @description A formal identifier that is used to identify this EvidenceReport when it is
    represented in other formats, or referenced in a specification, model, design
    or an instance.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.identifier = undefined;
                    return;
                }
                const Identifier = require('../complex_types/identifier.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.identifier = FhirResourceCreator.createArray(valueProvided, Identifier);
            }
        });

        /**
         * @description A formal identifier that is used to identify things closely related to this
    EvidenceReport.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'relatedIdentifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.relatedIdentifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.relatedIdentifier = undefined;
                    return;
                }
                const Identifier = require('../complex_types/identifier.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.relatedIdentifier = FhirResourceCreator.createArray(valueProvided, Identifier);
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'citeAsReference', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.citeAsReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.citeAsReference = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.citeAsReference = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description None
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'citeAsMarkdown', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.citeAsMarkdown,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.citeAsMarkdown = undefined;
                    return;
                }
                this.__data.citeAsMarkdown = valueProvided;
            }
        });

        /**
         * @description Specifies the kind of report, such as grouping of classifiers, search results,
    or human-compiled expression.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'type', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.type = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.type = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description Used for footnotes and annotations.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.note,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.note = undefined;
                    return;
                }
                const Annotation = require('../complex_types/annotation.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.note = FhirResourceCreator.createArray(valueProvided, Annotation);
            }
        });

        /**
         * @description Link, description or reference to artifact associated with the report.
         * @property {RelatedArtifact[]|undefined}
        */
        Object.defineProperty(this, 'relatedArtifact', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.relatedArtifact,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.relatedArtifact = undefined;
                    return;
                }
                const RelatedArtifact = require('../complex_types/relatedArtifact.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.relatedArtifact = FhirResourceCreator.createArray(valueProvided, RelatedArtifact);
            }
        });

        /**
         * @description Specifies the subject or focus of the report. Answers "What is this report
    about?".
         * @property {EvidenceReportSubject}
        */
        Object.defineProperty(this, 'subject', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.subject,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.subject = undefined;
                    return;
                }
                const EvidenceReportSubject = require('../backbone_elements/evidenceReportSubject.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.subject = FhirResourceCreator.create(valueProvided, EvidenceReportSubject);
            }
        });

        /**
         * @description The name of the organization or individual that published the evidence report.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'publisher', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.publisher,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.publisher = undefined;
                    return;
                }
                this.__data.publisher = valueProvided;
            }
        });

        /**
         * @description Contact details to assist a user in finding and communicating with the
    publisher.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'contact', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contact,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.contact = undefined;
                    return;
                }
                const ContactDetail = require('../complex_types/contactDetail.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.contact = FhirResourceCreator.createArray(valueProvided, ContactDetail);
            }
        });

        /**
         * @description An individiual, organization, or device primarily involved in the creation and
    maintenance of the content.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'author', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.author,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.author = undefined;
                    return;
                }
                const ContactDetail = require('../complex_types/contactDetail.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.author = FhirResourceCreator.createArray(valueProvided, ContactDetail);
            }
        });

        /**
         * @description An individiual, organization, or device primarily responsible for internal
    coherence of the content.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'editor', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.editor,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.editor = undefined;
                    return;
                }
                const ContactDetail = require('../complex_types/contactDetail.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.editor = FhirResourceCreator.createArray(valueProvided, ContactDetail);
            }
        });

        /**
         * @description An individiual, organization, or device primarily responsible for review of
    some aspect of the content.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'reviewer', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.reviewer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.reviewer = undefined;
                    return;
                }
                const ContactDetail = require('../complex_types/contactDetail.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.reviewer = FhirResourceCreator.createArray(valueProvided, ContactDetail);
            }
        });

        /**
         * @description An individiual, organization, or device responsible for officially endorsing
    the content for use in some setting.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'endorser', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.endorser,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.endorser = undefined;
                    return;
                }
                const ContactDetail = require('../complex_types/contactDetail.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.endorser = FhirResourceCreator.createArray(valueProvided, ContactDetail);
            }
        });

        /**
         * @description Relationships that this composition has with other compositions or documents
    that already exist.
         * @property {EvidenceReportRelatesTo[]|undefined}
        */
        Object.defineProperty(this, 'relatesTo', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.relatesTo,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.relatesTo = undefined;
                    return;
                }
                const EvidenceReportRelatesTo = require('../backbone_elements/evidenceReportRelatesTo.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.relatesTo = FhirResourceCreator.createArray(valueProvided, EvidenceReportRelatesTo);
            }
        });

        /**
         * @description The root of the sections that make up the composition.
         * @property {EvidenceReportSection[]|undefined}
        */
        Object.defineProperty(this, 'section', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.section,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.section = undefined;
                    return;
                }
                const EvidenceReportSection = require('../backbone_elements/evidenceReportSection.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.section = FhirResourceCreator.createArray(valueProvided, EvidenceReportSection);
            }
        });

        /**
         * @description _access
         * @property {Object|undefined}
         */
        Object.defineProperty(this, '_access', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._access,
            set: valueProvided => {
                this.__data._access = valueProvided;
            }
        });
        /**
         * @description _sourceAssigningAuthority
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceAssigningAuthority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceAssigningAuthority,
            set: valueProvided => {
                this.__data._sourceAssigningAuthority = valueProvided;
            }
        });
        /**
         * @description _uuid
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_uuid', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._uuid,
            set: valueProvided => {
                this.__data._uuid = valueProvided;
            }
        });
        /**
         * @description _sourceId
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceId,
            set: valueProvided => {
                this.__data._sourceId = valueProvided;
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            status,
            useContext,
            identifier,
            relatedIdentifier,
            citeAsReference,
            citeAsMarkdown,
            type,
            note,
            relatedArtifact,
            subject,
            publisher,
            contact,
            author,
            editor,
            reviewer,
            endorser,
            relatesTo,
            section,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        });

        /**
         * @description Define a default non-writable resourceType property
         * @property {string|undefined}
         */
        Object.defineProperty(this, 'resourceType', {
            value: 'EvidenceReport',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    /**
     * @description Define a default non-writable resourceType property
     * @property {string|undefined}
     */
    static get resourceType () {
        return 'EvidenceReport';
    }

    /**
     * @description Creates a blank new resource
     * @param {String|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {uri|undefined} [url],
     * @param {code} status,
     * @param {UsageContext[]|undefined} [useContext],
     * @param {Identifier[]|undefined} [identifier],
     * @param {Identifier[]|undefined} [relatedIdentifier],
     * @param {Reference|undefined} [citeAsReference],
     * @param {markdown|undefined} [citeAsMarkdown],
     * @param {CodeableConcept|undefined} [type],
     * @param {Annotation[]|undefined} [note],
     * @param {RelatedArtifact[]|undefined} [relatedArtifact],
     * @param {EvidenceReportSubject} subject,
     * @param {String|undefined} [publisher],
     * @param {ContactDetail[]|undefined} [contact],
     * @param {ContactDetail[]|undefined} [author],
     * @param {ContactDetail[]|undefined} [editor],
     * @param {ContactDetail[]|undefined} [reviewer],
     * @param {ContactDetail[]|undefined} [endorser],
     * @param {EvidenceReportRelatesTo[]|undefined} [relatesTo],
     * @param {EvidenceReportSection[]|undefined} [section],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
     * @returns {EvidenceReport}
    */
    create (
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            status,
            useContext,
            identifier,
            relatedIdentifier,
            citeAsReference,
            citeAsMarkdown,
            type,
            note,
            relatedArtifact,
            subject,
            publisher,
            contact,
            author,
            editor,
            reviewer,
            endorser,
            relatesTo,
            section,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        }
    ) {
        return new EvidenceReport({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            status,
            useContext,
            identifier,
            relatedIdentifier,
            citeAsReference,
            citeAsMarkdown,
            type,
            note,
            relatedArtifact,
            subject,
            publisher,
            contact,
            author,
            editor,
            reviewer,
            endorser,
            relatesTo,
            section,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {EvidenceReport}
    */
    clone () {
        return new EvidenceReport(this.toJSONInternal());
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON () {
        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            url: this.url,
            status: this.status,
            useContext: this.useContext && this.useContext.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            relatedIdentifier: this.relatedIdentifier && this.relatedIdentifier.map(v => v.toJSON()),
            citeAsReference: this.citeAsReference && this.citeAsReference.toJSON(),
            citeAsMarkdown: this.citeAsMarkdown,
            type: this.type && this.type.toJSON(),
            note: this.note && this.note.map(v => v.toJSON()),
            relatedArtifact: this.relatedArtifact && this.relatedArtifact.map(v => v.toJSON()),
            subject: this.subject && this.subject.toJSON(),
            publisher: this.publisher,
            contact: this.contact && this.contact.map(v => v.toJSON()),
            author: this.author && this.author.map(v => v.toJSON()),
            editor: this.editor && this.editor.map(v => v.toJSON()),
            reviewer: this.reviewer && this.reviewer.map(v => v.toJSON()),
            endorser: this.endorser && this.endorser.map(v => v.toJSON()),
            relatesTo: this.relatesTo && this.relatesTo.map(v => v.toJSON()),
            section: this.section && this.section.map(v => v.toJSON())
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync ({ fnUpdateReferenceAsync }) {
            if (this.meta) { await this.meta.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.text) { await this.text.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.contained) { await async.each(this.contained, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.extension) { await async.each(this.extension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.modifierExtension) { await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.useContext) { await async.each(this.useContext, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.identifier) { await async.each(this.identifier, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.relatedIdentifier) { await async.each(this.relatedIdentifier, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.citeAsReference) { await this.citeAsReference.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.type) { await this.type.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.note) { await async.each(this.note, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.relatedArtifact) { await async.each(this.relatedArtifact, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.subject) { await this.subject.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.contact) { await async.each(this.contact, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.author) { await async.each(this.author, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.editor) { await async.each(this.editor, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.reviewer) { await async.each(this.reviewer, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.endorser) { await async.each(this.endorser, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.relatesTo) { await async.each(this.relatesTo, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.section) { await async.each(this.section, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal () {
        const json = {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSONInternal(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSONInternal(),
            contained: this.contained && this.contained.map(v => v.toJSONInternal()),
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            url: this.url,
            status: this.status,
            useContext: this.useContext && this.useContext.map(v => v.toJSONInternal()),
            identifier: this.identifier && this.identifier.map(v => v.toJSONInternal()),
            relatedIdentifier: this.relatedIdentifier && this.relatedIdentifier.map(v => v.toJSONInternal()),
            citeAsReference: this.citeAsReference && this.citeAsReference.toJSONInternal(),
            citeAsMarkdown: this.citeAsMarkdown,
            type: this.type && this.type.toJSONInternal(),
            note: this.note && this.note.map(v => v.toJSONInternal()),
            relatedArtifact: this.relatedArtifact && this.relatedArtifact.map(v => v.toJSONInternal()),
            subject: this.subject && this.subject.toJSONInternal(),
            publisher: this.publisher,
            contact: this.contact && this.contact.map(v => v.toJSONInternal()),
            author: this.author && this.author.map(v => v.toJSONInternal()),
            editor: this.editor && this.editor.map(v => v.toJSONInternal()),
            reviewer: this.reviewer && this.reviewer.map(v => v.toJSONInternal()),
            endorser: this.endorser && this.endorser.map(v => v.toJSONInternal()),
            relatesTo: this.relatesTo && this.relatesTo.map(v => v.toJSONInternal()),
            section: this.section && this.section.map(v => v.toJSONInternal())
        };
        if (this._access) {
            json._access = this._access;
        }
        if (this._sourceAssigningAuthority) {
            json._sourceAssigningAuthority = this._sourceAssigningAuthority;
        }
        if (this._uuid) {
            json._uuid = this._uuid;
        }
        if (this._sourceId) {
            json._sourceId = this._sourceId;
        }

        return removeNull(json);
    }
}

module.exports = EvidenceReport;
