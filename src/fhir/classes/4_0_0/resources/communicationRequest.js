/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');
const async = require('async');


/**
CommunicationRequest
    A request to convey information; e.g. the CDS system proposes that an alert be
    sent to a responsible provider, the CDS system proposes that the public health
    agency be notified about a reportable condition.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class CommunicationRequest extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {Reference[]|undefined} [basedOn],
     * @param {Reference[]|undefined} [replaces],
     * @param {Identifier|undefined} [groupIdentifier],
     * @param {code} status,
     * @param {CodeableConcept|undefined} [statusReason],
     * @param {CodeableConcept[]|undefined} [category],
     * @param {code|undefined} [priority],
     * @param {Boolean|undefined} [doNotPerform],
     * @param {CodeableConcept[]|undefined} [medium],
     * @param {Reference|undefined} [subject],
     * @param {Reference[]|undefined} [about],
     * @param {Reference|undefined} [encounter],
     * @param {CommunicationRequestPayload[]|undefined} [payload],
     * @param {dateTime|undefined} [occurrenceDateTime],
     * @param {Period|undefined} [occurrencePeriod],
     * @param {dateTime|undefined} [authoredOn],
     * @param {Reference|undefined} [requester],
     * @param {Reference[]|undefined} [recipient],
     * @param {Reference|undefined} [sender],
     * @param {CodeableConcept[]|undefined} [reasonCode],
     * @param {Reference[]|undefined} [reasonReference],
     * @param {Annotation[]|undefined} [note],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            basedOn,
            replaces,
            groupIdentifier,
            status,
            statusReason,
            category,
            priority,
            doNotPerform,
            medium,
            subject,
            about,
            encounter,
            payload,
            occurrenceDateTime,
            occurrencePeriod,
            authoredOn,
            requester,
            recipient,
            sender,
            reasonCode,
            reasonReference,
            note,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.meta = undefined;
                    return;
                }
                const Meta = require('../complex_types/meta.js');
                if (valueProvided instanceof Meta){
                    this.__data.meta = valueProvided;
                } else {
                    this.__data.meta = new Meta(valueProvided);
                }
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.implicitRules = undefined;
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.language = undefined;
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.text = undefined;
                    return;
                }
                const Narrative = require('../complex_types/narrative.js');
                if (valueProvided instanceof Narrative){
                    this.__data.text = valueProvided;
                } else {
                    this.__data.text = new Narrative(valueProvided);
                }
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.contained = undefined;
                    return;
                }
                const ResourceContainer = require('../simple_types/resourceContainer.js');
                const {getResource} = require('../../../../operations/common/getResource');
                if (Array.isArray(valueProvided)) {
                    this.__data.contained = valueProvided.filter(v => v).map(v => {
                        if (v instanceof Resource) {
                            return v;
                        }
                        const ResourceCreator = getResource('4_0_0', v.resourceType);
                        return new ResourceCreator(v);
                    });
                } else {
                    if (valueProvided instanceof Resource) {
                        this.__data.contained = [valueProvided];
                    } else {
                        const ResourceCreator = getResource('4_0_0', valueProvided.resourceType);
                        this.__data.contained = [new ResourceCreator(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.extension = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Extension ?
                                v : new Extension(v)
                            );
                } else {
                    if (valueProvided instanceof Extension) {
                        this.__data.extension = valueProvided;
                    } else {
                        this.__data.extension = [new Extension(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.modifierExtension = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Extension ?
                                v : new Extension(v)
                            );
                } else {
                    if (valueProvided instanceof Extension) {
                        this.__data.modifierExtension = valueProvided;
                    } else {
                        this.__data.modifierExtension = [new Extension(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Business identifiers assigned to this communication request by the performer
    or other systems which remain constant as the resource is updated and
    propagates from server to server.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.identifier = undefined;
                    return;
                }
                const Identifier = require('../complex_types/identifier.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.identifier = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Identifier ?
                                v : new Identifier(v)
                            );
                } else {
                    if (valueProvided instanceof Identifier) {
                        this.__data.identifier = valueProvided;
                    } else {
                        this.__data.identifier = [new Identifier(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description A plan or proposal that is fulfilled in whole or in part by this request.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'basedOn', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.basedOn,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.basedOn = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.basedOn = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Reference ?
                                v : new Reference(v)
                            );
                } else {
                    if (valueProvided instanceof Reference) {
                        this.__data.basedOn = valueProvided;
                    } else {
                        this.__data.basedOn = [new Reference(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Completed or terminated request(s) whose function is taken by this new
    request.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'replaces', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.replaces,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.replaces = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.replaces = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Reference ?
                                v : new Reference(v)
                            );
                } else {
                    if (valueProvided instanceof Reference) {
                        this.__data.replaces = valueProvided;
                    } else {
                        this.__data.replaces = [new Reference(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description A shared identifier common to all requests that were authorized more or less
    simultaneously by a single author, representing the identifier of the
    requisition, prescription or similar form.
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'groupIdentifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.groupIdentifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.groupIdentifier = undefined;
                    return;
                }
                const Identifier = require('../complex_types/identifier.js');
                if (valueProvided instanceof Identifier){
                    this.__data.groupIdentifier = valueProvided;
                } else {
                    this.__data.groupIdentifier = new Identifier(valueProvided);
                }
            }
        });

        /**
         * @description The status of the proposal or order.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.status = undefined;
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description Captures the reason for the current state of the CommunicationRequest.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'statusReason', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.statusReason,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.statusReason = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (valueProvided instanceof CodeableConcept){
                    this.__data.statusReason = valueProvided;
                } else {
                    this.__data.statusReason = new CodeableConcept(valueProvided);
                }
            }
        });

        /**
         * @description The type of message to be sent such as alert, notification, reminder,
    instruction, etc.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'category', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.category,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.category = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.category = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof CodeableConcept ?
                                v : new CodeableConcept(v)
                            );
                } else {
                    if (valueProvided instanceof CodeableConcept) {
                        this.__data.category = valueProvided;
                    } else {
                        this.__data.category = [new CodeableConcept(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Characterizes how quickly the proposed act must be initiated. Includes
    concepts such as stat, urgent, routine.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'priority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.priority,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.priority = undefined;
                    return;
                }
                this.__data.priority = valueProvided;
            }
        });

        /**
         * @description If true indicates that the CommunicationRequest is asking for the specified
    action to *not* occur.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'doNotPerform', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.doNotPerform,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.doNotPerform = undefined;
                    return;
                }
                this.__data.doNotPerform = valueProvided;
            }
        });

        /**
         * @description A channel that was used for this communication (e.g. email, fax).
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'medium', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.medium,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.medium = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.medium = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof CodeableConcept ?
                                v : new CodeableConcept(v)
                            );
                } else {
                    if (valueProvided instanceof CodeableConcept) {
                        this.__data.medium = valueProvided;
                    } else {
                        this.__data.medium = [new CodeableConcept(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description The patient or group that is the focus of this communication request.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'subject', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.subject,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.subject = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (valueProvided instanceof Reference){
                    this.__data.subject = valueProvided;
                } else {
                    this.__data.subject = new Reference(valueProvided);
                }
            }
        });

        /**
         * @description Other resources that pertain to this communication request and to which this
    communication request should be associated.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'about', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.about,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.about = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.about = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Reference ?
                                v : new Reference(v)
                            );
                } else {
                    if (valueProvided instanceof Reference) {
                        this.__data.about = valueProvided;
                    } else {
                        this.__data.about = [new Reference(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description The Encounter during which this CommunicationRequest was created or to which
    the creation of this record is tightly associated.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'encounter', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.encounter,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.encounter = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (valueProvided instanceof Reference){
                    this.__data.encounter = valueProvided;
                } else {
                    this.__data.encounter = new Reference(valueProvided);
                }
            }
        });

        /**
         * @description Text, attachment(s), or resource(s) to be communicated to the recipient.
         * @property {CommunicationRequestPayload[]|undefined}
        */
        Object.defineProperty(this, 'payload', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.payload,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.payload = undefined;
                    return;
                }
                const CommunicationRequestPayload = require('../backbone_elements/communicationRequestPayload.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.payload = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof CommunicationRequestPayload ?
                                v : new CommunicationRequestPayload(v)
                            );
                } else {
                    if (valueProvided instanceof CommunicationRequestPayload) {
                        this.__data.payload = valueProvided;
                    } else {
                        this.__data.payload = [new CommunicationRequestPayload(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'occurrenceDateTime', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.occurrenceDateTime,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.occurrenceDateTime = undefined;
                    return;
                }
                this.__data.occurrenceDateTime = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'occurrencePeriod', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.occurrencePeriod,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.occurrencePeriod = undefined;
                    return;
                }
                const Period = require('../complex_types/period.js');
                if (valueProvided instanceof Period){
                    this.__data.occurrencePeriod = valueProvided;
                } else {
                    this.__data.occurrencePeriod = new Period(valueProvided);
                }
            }
        });

        /**
         * @description For draft requests, indicates the date of initial creation.  For requests with
    other statuses, indicates the date of activation.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'authoredOn', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.authoredOn,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.authoredOn = undefined;
                    return;
                }
                this.__data.authoredOn = valueProvided;
            }
        });

        /**
         * @description The device, individual, or organization who initiated the request and has
    responsibility for its activation.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'requester', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.requester,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.requester = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (valueProvided instanceof Reference){
                    this.__data.requester = valueProvided;
                } else {
                    this.__data.requester = new Reference(valueProvided);
                }
            }
        });

        /**
         * @description The entity (e.g. person, organization, clinical information system, device,
    group, or care team) which is the intended target of the communication.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'recipient', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.recipient,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.recipient = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.recipient = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Reference ?
                                v : new Reference(v)
                            );
                } else {
                    if (valueProvided instanceof Reference) {
                        this.__data.recipient = valueProvided;
                    } else {
                        this.__data.recipient = [new Reference(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description The entity (e.g. person, organization, clinical information system, or device)
    which is to be the source of the communication.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'sender', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.sender,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.sender = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (valueProvided instanceof Reference){
                    this.__data.sender = valueProvided;
                } else {
                    this.__data.sender = new Reference(valueProvided);
                }
            }
        });

        /**
         * @description Describes why the request is being made in coded or textual form.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'reasonCode', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.reasonCode,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.reasonCode = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.reasonCode = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof CodeableConcept ?
                                v : new CodeableConcept(v)
                            );
                } else {
                    if (valueProvided instanceof CodeableConcept) {
                        this.__data.reasonCode = valueProvided;
                    } else {
                        this.__data.reasonCode = [new CodeableConcept(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Indicates another resource whose existence justifies this request.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'reasonReference', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.reasonReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.reasonReference = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.reasonReference = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Reference ?
                                v : new Reference(v)
                            );
                } else {
                    if (valueProvided instanceof Reference) {
                        this.__data.reasonReference = valueProvided;
                    } else {
                        this.__data.reasonReference = [new Reference(valueProvided)];
                    }
                }
            }
        });

        /**
         * @description Comments made about the request by the requester, sender, recipient, subject
    or other participants.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.note,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.note = undefined;
                    return;
                }
                const Annotation = require('../complex_types/annotation.js');
                if (Array.isArray(valueProvided)) {
                    this.__data.note = valueProvided
                            .filter(v => v)
                            .map(v => v instanceof Annotation ?
                                v : new Annotation(v)
                            );
                } else {
                    if (valueProvided instanceof Annotation) {
                        this.__data.note = valueProvided;
                    } else {
                        this.__data.note = [new Annotation(valueProvided)];
                    }
                }
            }
        });


        /**
         * @description _access
         * @property {Object|undefined}
         */
        Object.defineProperty(this, '_access', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._access,
            set: valueProvided => {
                this.__data._access = valueProvided;
            }
        });
        /**
         * @description _sourceAssigningAuthority
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceAssigningAuthority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceAssigningAuthority,
            set: valueProvided => {
                this.__data._sourceAssigningAuthority = valueProvided;
            }
        });
        /**
         * @description _uuid
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_uuid', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._uuid,
            set: valueProvided => {
                this.__data._uuid = valueProvided;
            }
        });
        /**
         * @description _sourceId
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceId,
            set: valueProvided => {
                this.__data._sourceId = valueProvided;
            }
        });


        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            basedOn,
            replaces,
            groupIdentifier,
            status,
            statusReason,
            category,
            priority,
            doNotPerform,
            medium,
            subject,
            about,
            encounter,
            payload,
            occurrenceDateTime,
            occurrencePeriod,
            authoredOn,
            requester,
            recipient,
            sender,
            reasonCode,
            reasonReference,
            note,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        });

        /**
         * @description Define a default non-writable resourceType property
         * @property {string|undefined}
         */
        Object.defineProperty(this, 'resourceType', {
            value: 'CommunicationRequest',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    /**
     * @description Define a default non-writable resourceType property
     * @property {string|undefined}
     */
    static get resourceType() {
        return 'CommunicationRequest';
    }

    /**
     * @description Creates a blank new resource
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {Reference[]|undefined} [basedOn],
     * @param {Reference[]|undefined} [replaces],
     * @param {Identifier|undefined} [groupIdentifier],
     * @param {code} status,
     * @param {CodeableConcept|undefined} [statusReason],
     * @param {CodeableConcept[]|undefined} [category],
     * @param {code|undefined} [priority],
     * @param {Boolean|undefined} [doNotPerform],
     * @param {CodeableConcept[]|undefined} [medium],
     * @param {Reference|undefined} [subject],
     * @param {Reference[]|undefined} [about],
     * @param {Reference|undefined} [encounter],
     * @param {CommunicationRequestPayload[]|undefined} [payload],
     * @param {dateTime|undefined} [occurrenceDateTime],
     * @param {Period|undefined} [occurrencePeriod],
     * @param {dateTime|undefined} [authoredOn],
     * @param {Reference|undefined} [requester],
     * @param {Reference[]|undefined} [recipient],
     * @param {Reference|undefined} [sender],
     * @param {CodeableConcept[]|undefined} [reasonCode],
     * @param {Reference[]|undefined} [reasonReference],
     * @param {Annotation[]|undefined} [note],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
     * @returns {CommunicationRequest}
    */
    create(
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            basedOn,
            replaces,
            groupIdentifier,
            status,
            statusReason,
            category,
            priority,
            doNotPerform,
            medium,
            subject,
            about,
            encounter,
            payload,
            occurrenceDateTime,
            occurrencePeriod,
            authoredOn,
            requester,
            recipient,
            sender,
            reasonCode,
            reasonReference,
            note,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        }
    ) {
        return new CommunicationRequest({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            basedOn,
            replaces,
            groupIdentifier,
            status,
            statusReason,
            category,
            priority,
            doNotPerform,
            medium,
            subject,
            about,
            encounter,
            payload,
            occurrenceDateTime,
            occurrencePeriod,
            authoredOn,
            requester,
            recipient,
            sender,
            reasonCode,
            reasonReference,
            note,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId,
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {CommunicationRequest}
    */
    clone() {
        return new CommunicationRequest(this.toJSONInternal());
    }


    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            basedOn: this.basedOn && this.basedOn.map(v => v.toJSON()),
            replaces: this.replaces && this.replaces.map(v => v.toJSON()),
            groupIdentifier: this.groupIdentifier && this.groupIdentifier.toJSON(),
            status: this.status,
            statusReason: this.statusReason && this.statusReason.toJSON(),
            category: this.category && this.category.map(v => v.toJSON()),
            priority: this.priority,
            doNotPerform: this.doNotPerform,
            medium: this.medium && this.medium.map(v => v.toJSON()),
            subject: this.subject && this.subject.toJSON(),
            about: this.about && this.about.map(v => v.toJSON()),
            encounter: this.encounter && this.encounter.toJSON(),
            payload: this.payload && this.payload.map(v => v.toJSON()),
            occurrenceDateTime: this.occurrenceDateTime,
            occurrencePeriod: this.occurrencePeriod && this.occurrencePeriod.toJSON(),
            authoredOn: this.authoredOn,
            requester: this.requester && this.requester.toJSON(),
            recipient: this.recipient && this.recipient.map(v => v.toJSON()),
            sender: this.sender && this.sender.toJSON(),
            reasonCode: this.reasonCode && this.reasonCode.map(v => v.toJSON()),
            reasonReference: this.reasonReference && this.reasonReference.map(v => v.toJSON()),
            note: this.note && this.note.map(v => v.toJSON()),
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync({fnUpdateReferenceAsync}) {
            if (this.meta) {await this.meta.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.text) {await this.text.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.contained) {await async.each(this.contained, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.extension) {await async.each(this.extension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.modifierExtension) {await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.identifier) {await async.each(this.identifier, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.basedOn) {await async.each(this.basedOn, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.replaces) {await async.each(this.replaces, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.groupIdentifier) {await this.groupIdentifier.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.statusReason) {await this.statusReason.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.category) {await async.each(this.category, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.medium) {await async.each(this.medium, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.subject) {await this.subject.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.about) {await async.each(this.about, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.encounter) {await this.encounter.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.payload) {await async.each(this.payload, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.occurrencePeriod) {await this.occurrencePeriod.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.requester) {await this.requester.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.recipient) {await async.each(this.recipient, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.sender) {await this.sender.updateReferencesAsync({fnUpdateReferenceAsync});}
            if (this.reasonCode) {await async.each(this.reasonCode, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.reasonReference) {await async.each(this.reasonReference, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
            if (this.note) {await async.each(this.note, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync}));}
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal() {
        const {removeNull} = require('../../../../utils/nullRemover');
        const json = {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSONInternal(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSONInternal(),
            contained: this.contained && this.contained.map(v => v.toJSONInternal()),
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            identifier: this.identifier && this.identifier.map(v => v.toJSONInternal()),
            basedOn: this.basedOn && this.basedOn.map(v => v.toJSONInternal()),
            replaces: this.replaces && this.replaces.map(v => v.toJSONInternal()),
            groupIdentifier: this.groupIdentifier && this.groupIdentifier.toJSONInternal(),
            status: this.status,
            statusReason: this.statusReason && this.statusReason.toJSONInternal(),
            category: this.category && this.category.map(v => v.toJSONInternal()),
            priority: this.priority,
            doNotPerform: this.doNotPerform,
            medium: this.medium && this.medium.map(v => v.toJSONInternal()),
            subject: this.subject && this.subject.toJSONInternal(),
            about: this.about && this.about.map(v => v.toJSONInternal()),
            encounter: this.encounter && this.encounter.toJSONInternal(),
            payload: this.payload && this.payload.map(v => v.toJSONInternal()),
            occurrenceDateTime: this.occurrenceDateTime,
            occurrencePeriod: this.occurrencePeriod && this.occurrencePeriod.toJSONInternal(),
            authoredOn: this.authoredOn,
            requester: this.requester && this.requester.toJSONInternal(),
            recipient: this.recipient && this.recipient.map(v => v.toJSONInternal()),
            sender: this.sender && this.sender.toJSONInternal(),
            reasonCode: this.reasonCode && this.reasonCode.map(v => v.toJSONInternal()),
            reasonReference: this.reasonReference && this.reasonReference.map(v => v.toJSONInternal()),
            note: this.note && this.note.map(v => v.toJSONInternal()),
        };


        if (this._access) {
            json._access = this._access;
        }
        if (this._sourceAssigningAuthority) {
            json._sourceAssigningAuthority = this._sourceAssigningAuthority;
        }
        if (this._uuid) {
            json._uuid = this._uuid;
        }
        if (this._sourceId) {
            json._sourceId = this._sourceId;
        }

        return removeNull(json);
    }
}

module.exports = CommunicationRequest;
