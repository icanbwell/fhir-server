// This file is auto-generated by generate_classes so do not edit manually

/**
NutritionOrder
    A request to supply a diet, formula feeding (enteral) or oral nutritional
    supplement to a patient/resident.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class NutritionOrder {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.implicitRules = value;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.contained = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description Identifiers assigned to this order by the order sender or by the order
    receiver.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(value) ? value.map(v => new Identifier(v)) : [new Identifier(value)];
            }
        });

        /**
         * @description The URL pointing to a FHIR-defined protocol, guideline, orderset or other
    definition that is adhered to in whole or in part by this NutritionOrder.
         * @property {canonical[]|undefined}
        */
        Object.defineProperty(this, 'instantiatesCanonical', {
            enumerable: true,
            get: () => this.__data.instantiatesCanonical,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.instantiatesCanonical = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description The URL pointing to an externally maintained protocol, guideline, orderset or
    other definition that is adhered to in whole or in part by this
    NutritionOrder.
         * @property {uri[]|undefined}
        */
        Object.defineProperty(this, 'instantiatesUri', {
            enumerable: true,
            get: () => this.__data.instantiatesUri,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.instantiatesUri = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description The URL pointing to a protocol, guideline, orderset or other definition that
    is adhered to in whole or in part by this NutritionOrder.
         * @property {uri[]|undefined}
        */
        Object.defineProperty(this, 'instantiates', {
            enumerable: true,
            get: () => this.__data.instantiates,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.instantiates = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description The workflow status of the nutrition order/request.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.status = value;
            }
        });

        /**
         * @description Indicates the level of authority/intentionality associated with the
    NutrionOrder and where the request fits into the workflow chain.
         * @property {code}
        */
        Object.defineProperty(this, 'intent', {
            enumerable: true,
            get: () => this.__data.intent,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.intent = value;
            }
        });

        /**
         * @description The person (patient) who needs the nutrition order for an oral diet,
    nutritional supplement and/or enteral or formula feeding.
         * @property {Patient}
        */
        Object.defineProperty(this, 'patient', {
            enumerable: true,
            get: () => this.__data.patient,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.patient = new Reference(value);
            }
        });

        /**
         * @description An encounter that provides additional information about the healthcare context
    in which this request is made.
         * @property {Encounter|undefined}
        */
        Object.defineProperty(this, 'encounter', {
            enumerable: true,
            get: () => this.__data.encounter,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.encounter = new Reference(value);
            }
        });

        /**
         * @description The date and time that this nutrition order was requested.
         * @property {dateTime}
        */
        Object.defineProperty(this, 'dateTime', {
            enumerable: true,
            get: () => this.__data.dateTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.dateTime = value;
            }
        });

        /**
         * @description The practitioner that holds legal responsibility for ordering the diet,
    nutritional supplement, or formula feedings.
         * @property {NutritionOrderOrderer|undefined}
        */
        Object.defineProperty(this, 'orderer', {
            enumerable: true,
            get: () => this.__data.orderer,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.orderer = new Reference(value);
            }
        });

        /**
         * @description A link to a record of allergies or intolerances  which should be included in
    the nutrition order.
         * @property {AllergyIntolerance[]|undefined}
        */
        Object.defineProperty(this, 'allergyIntolerance', {
            enumerable: true,
            get: () => this.__data.allergyIntolerance,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.allergyIntolerance = Array.isArray(value) ? value.map(v => new Reference(v)) : [new Reference(value)];
            }
        });

        /**
         * @description This modifier is used to convey order-specific modifiers about the type of
    food that should be given. These can be derived from patient allergies,
    intolerances, or preferences such as Halal, Vegan or Kosher. This modifier
    applies to the entire nutrition order inclusive of the oral diet, nutritional
    supplements and enteral formula feedings.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'foodPreferenceModifier', {
            enumerable: true,
            get: () => this.__data.foodPreferenceModifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.foodPreferenceModifier = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description This modifier is used to convey Order-specific modifier about the type of oral
    food or oral fluids that should not be given. These can be derived from
    patient allergies, intolerances, or preferences such as No Red Meat, No Soy or
    No Wheat or  Gluten-Free.  While it should not be necessary to repeat allergy
    or intolerance information captured in the referenced AllergyIntolerance
    resource in the excludeFoodModifier, this element may be used to convey
    additional specificity related to foods that should be eliminated from the
    patient’s diet for any reason.  This modifier applies to the entire nutrition
    order inclusive of the oral diet, nutritional supplements and enteral formula
    feedings.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'excludeFoodModifier', {
            enumerable: true,
            get: () => this.__data.excludeFoodModifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.excludeFoodModifier = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description Diet given orally in contrast to enteral (tube) feeding.
         * @property {NutritionOrderOralDiet|undefined}
        */
        Object.defineProperty(this, 'oralDiet', {
            enumerable: true,
            get: () => this.__data.oralDiet,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let NutritionOrderOralDiet = require('../backbone_elements/nutritionOrderOralDiet.js');
                this.__data.oralDiet = new NutritionOrderOralDiet(value);
            }
        });

        /**
         * @description Oral nutritional products given in order to add further nutritional value to
    the patient's diet.
         * @property {NutritionOrderSupplement[]|undefined}
        */
        Object.defineProperty(this, 'supplement', {
            enumerable: true,
            get: () => this.__data.supplement,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let NutritionOrderSupplement = require('../backbone_elements/nutritionOrderSupplement.js');
                this.__data.supplement = Array.isArray(value) ? value.map(v => new NutritionOrderSupplement(v)) : [new NutritionOrderSupplement(value)];
            }
        });

        /**
         * @description Feeding provided through the gastrointestinal tract via a tube, catheter, or
    stoma that delivers nutrition distal to the oral cavity.
         * @property {NutritionOrderEnteralFormula|undefined}
        */
        Object.defineProperty(this, 'enteralFormula', {
            enumerable: true,
            get: () => this.__data.enteralFormula,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let NutritionOrderEnteralFormula = require('../backbone_elements/nutritionOrderEnteralFormula.js');
                this.__data.enteralFormula = new NutritionOrderEnteralFormula(value);
            }
        });

        /**
         * @description Comments made about the {{title}} by the requester, performer, subject or
    other participants.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            enumerable: true,
            get: () => this.__data.note,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.note = Array.isArray(value) ? value.map(v => new Annotation(v)) : [new Annotation(value)];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'NutritionOrder',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'NutritionOrder';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            instantiatesCanonical: this.instantiatesCanonical,
            instantiatesUri: this.instantiatesUri,
            instantiates: this.instantiates,
            status: this.status,
            intent: this.intent,
            patient: this.patient && this.patient.toJSON(),
            encounter: this.encounter && this.encounter.toJSON(),
            dateTime: this.dateTime,
            orderer: this.orderer && this.orderer.toJSON(),
            allergyIntolerance: this.allergyIntolerance && this.allergyIntolerance.map(v => v.toJSON()),
            foodPreferenceModifier: this.foodPreferenceModifier && this.foodPreferenceModifier.map(v => v.toJSON()),
            excludeFoodModifier: this.excludeFoodModifier && this.excludeFoodModifier.map(v => v.toJSON()),
            oralDiet: this.oralDiet && this.oralDiet.toJSON(),
            supplement: this.supplement && this.supplement.map(v => v.toJSON()),
            enteralFormula: this.enteralFormula && this.enteralFormula.toJSON(),
            note: this.note && this.note.map(v => v.toJSON()),
        };
    }
}

module.exports = NutritionOrder;
