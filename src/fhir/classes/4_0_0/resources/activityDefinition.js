/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

/**
ActivityDefinition
    This resource allows for the definition of some activity to be performed,
    independent of a particular patient, practitioner, or other performance
    context.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class ActivityDefinition {
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            identifier,
            version,
            name,
            title,
            subtitle,
            status,
            experimental,
            subjectCodeableConcept,
            subjectReference,
            date,
            publisher,
            contact,
            description,
            useContext,
            jurisdiction,
            purpose,
            usage,
            copyright,
            approvalDate,
            lastReviewDate,
            effectivePeriod,
            topic,
            author,
            editor,
            reviewer,
            endorser,
            relatedArtifact,
            library,
            kind,
            profile,
            code,
            intent,
            priority,
            doNotPerform,
            timingTiming,
            timingDateTime,
            timingAge,
            timingPeriod,
            timingRange,
            timingDuration,
            location,
            participant,
            productReference,
            productCodeableConcept,
            quantity,
            dosage,
            bodySite,
            specimenRequirement,
            observationRequirement,
            observationResultRequirement,
            transform,
            dynamicValue,
        }
    ) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.contained = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description An absolute URI that is used to identify this activity definition when it is
    referenced in a specification, model, design or an instance; also called its
    canonical identifier. This SHOULD be globally unique and SHOULD be a literal
    address at which at which an authoritative instance of this activity
    definition is (or will be) published. This URL can be the target of a
    canonical reference. It SHALL remain the same when the activity definition is
    stored on different servers.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'url', {
            enumerable: true,
            get: () => this.__data.url,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.url = valueProvided;
            }
        });

        /**
         * @description A formal identifier that is used to identify this activity definition when it
    is represented in other formats, or referenced in a specification, model,
    design or an instance.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(valueProvided) ? valueProvided.map(v => new Identifier(v)) : [new Identifier(valueProvided)];
            }
        });

        /**
         * @description The identifier that is used to identify this version of the activity
    definition when it is referenced in a specification, model, design or
    instance. This is an arbitrary value managed by the activity definition author
    and is not expected to be globally unique. For example, it might be a
    timestamp (e.g. yyyymmdd) if a managed version is not available. There is also
    no expectation that versions can be placed in a lexicographical sequence. To
    provide a version consistent with the Decision Support Service specification,
    use the format Major.Minor.Revision (e.g. 1.0.0). For more information on
    versioning knowledge assets, refer to the Decision Support Service
    specification. Note that a version is required for non-experimental active
    assets.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'version', {
            enumerable: true,
            get: () => this.__data.version,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.version = valueProvided;
            }
        });

        /**
         * @description A natural language name identifying the activity definition. This name should
    be usable as an identifier for the module by machine processing applications
    such as code generation.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'name', {
            enumerable: true,
            get: () => this.__data.name,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.name = valueProvided;
            }
        });

        /**
         * @description A short, descriptive, user-friendly title for the activity definition.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'title', {
            enumerable: true,
            get: () => this.__data.title,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.title = valueProvided;
            }
        });

        /**
         * @description An explanatory or alternate title for the activity definition giving
    additional information about its content.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'subtitle', {
            enumerable: true,
            get: () => this.__data.subtitle,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.subtitle = valueProvided;
            }
        });

        /**
         * @description The status of this activity definition. Enables tracking the life-cycle of the
    content.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description A Boolean value to indicate that this activity definition is authored for
    testing purposes (or education/evaluation/marketing) and is not intended to be
    used for genuine usage.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'experimental', {
            enumerable: true,
            get: () => this.__data.experimental,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.experimental = valueProvided;
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'subjectCodeableConcept', {
            enumerable: true,
            get: () => this.__data.subjectCodeableConcept,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.subjectCodeableConcept = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'subjectReference', {
            enumerable: true,
            get: () => this.__data.subjectReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.subjectReference = new Reference(valueProvided);
            }
        });

        /**
         * @description The date  (and optionally time) when the activity definition was published.
    The date must change when the business version changes and it must change if
    the status code changes. In addition, it should change when the substantive
    content of the activity definition changes.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'date', {
            enumerable: true,
            get: () => this.__data.date,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.date = valueProvided;
            }
        });

        /**
         * @description The name of the organization or individual that published the activity
    definition.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'publisher', {
            enumerable: true,
            get: () => this.__data.publisher,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.publisher = valueProvided;
            }
        });

        /**
         * @description Contact details to assist a user in finding and communicating with the
    publisher.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'contact', {
            enumerable: true,
            get: () => this.__data.contact,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.contact = Array.isArray(valueProvided) ? valueProvided.map(v => new ContactDetail(v)) : [new ContactDetail(valueProvided)];
            }
        });

        /**
         * @description A free text natural language description of the activity definition from a
    consumer's perspective.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description The content was developed with a focus and intent of supporting the contexts
    that are listed. These contexts may be general categories (gender, age, ...)
    or may be references to specific programs (insurance plans, studies, ...) and
    may be used to assist with indexing and searching for appropriate activity
    definition instances.
         * @property {UsageContext[]|undefined}
        */
        Object.defineProperty(this, 'useContext', {
            enumerable: true,
            get: () => this.__data.useContext,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let UsageContext = require('../complex_types/usageContext.js');
                this.__data.useContext = Array.isArray(valueProvided) ? valueProvided.map(v => new UsageContext(v)) : [new UsageContext(valueProvided)];
            }
        });

        /**
         * @description A legal or geographic region in which the activity definition is intended to
    be used.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'jurisdiction', {
            enumerable: true,
            get: () => this.__data.jurisdiction,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.jurisdiction = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Explanation of why this activity definition is needed and why it has been
    designed as it has.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'purpose', {
            enumerable: true,
            get: () => this.__data.purpose,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.purpose = valueProvided;
            }
        });

        /**
         * @description A detailed description of how the activity definition is used from a clinical
    perspective.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'usage', {
            enumerable: true,
            get: () => this.__data.usage,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.usage = valueProvided;
            }
        });

        /**
         * @description A copyright statement relating to the activity definition and/or its contents.
    Copyright statements are generally legal restrictions on the use and
    publishing of the activity definition.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'copyright', {
            enumerable: true,
            get: () => this.__data.copyright,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.copyright = valueProvided;
            }
        });

        /**
         * @description The date on which the resource content was approved by the publisher. Approval
    happens once when the content is officially approved for usage.
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'approvalDate', {
            enumerable: true,
            get: () => this.__data.approvalDate,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.approvalDate = valueProvided;
            }
        });

        /**
         * @description The date on which the resource content was last reviewed. Review happens
    periodically after approval but does not change the original approval date.
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'lastReviewDate', {
            enumerable: true,
            get: () => this.__data.lastReviewDate,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.lastReviewDate = valueProvided;
            }
        });

        /**
         * @description The period during which the activity definition content was or is planned to
    be in active use.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'effectivePeriod', {
            enumerable: true,
            get: () => this.__data.effectivePeriod,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.effectivePeriod = new Period(valueProvided);
            }
        });

        /**
         * @description Descriptive topics related to the content of the activity. Topics provide a
    high-level categorization of the activity that can be useful for filtering and
    searching.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'topic', {
            enumerable: true,
            get: () => this.__data.topic,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.topic = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description An individiual or organization primarily involved in the creation and
    maintenance of the content.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'author', {
            enumerable: true,
            get: () => this.__data.author,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.author = Array.isArray(valueProvided) ? valueProvided.map(v => new ContactDetail(v)) : [new ContactDetail(valueProvided)];
            }
        });

        /**
         * @description An individual or organization primarily responsible for internal coherence of
    the content.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'editor', {
            enumerable: true,
            get: () => this.__data.editor,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.editor = Array.isArray(valueProvided) ? valueProvided.map(v => new ContactDetail(v)) : [new ContactDetail(valueProvided)];
            }
        });

        /**
         * @description An individual or organization primarily responsible for review of some aspect
    of the content.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'reviewer', {
            enumerable: true,
            get: () => this.__data.reviewer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.reviewer = Array.isArray(valueProvided) ? valueProvided.map(v => new ContactDetail(v)) : [new ContactDetail(valueProvided)];
            }
        });

        /**
         * @description An individual or organization responsible for officially endorsing the content
    for use in some setting.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'endorser', {
            enumerable: true,
            get: () => this.__data.endorser,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.endorser = Array.isArray(valueProvided) ? valueProvided.map(v => new ContactDetail(v)) : [new ContactDetail(valueProvided)];
            }
        });

        /**
         * @description Related artifacts such as additional documentation, justification, or
    bibliographic references.
         * @property {RelatedArtifact[]|undefined}
        */
        Object.defineProperty(this, 'relatedArtifact', {
            enumerable: true,
            get: () => this.__data.relatedArtifact,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let RelatedArtifact = require('../complex_types/relatedArtifact.js');
                this.__data.relatedArtifact = Array.isArray(valueProvided) ? valueProvided.map(v => new RelatedArtifact(v)) : [new RelatedArtifact(valueProvided)];
            }
        });

        /**
         * @description A reference to a Library resource containing any formal logic used by the
    activity definition.
         * @property {canonical[]|undefined}
        */
        Object.defineProperty(this, 'library', {
            enumerable: true,
            get: () => this.__data.library,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.library = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description A description of the kind of resource the activity definition is representing.
    For example, a MedicationRequest, a ServiceRequest, or a CommunicationRequest.
    Typically, but not always, this is a Request resource.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'kind', {
            enumerable: true,
            get: () => this.__data.kind,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.kind = valueProvided;
            }
        });

        /**
         * @description A profile to which the target of the activity definition is expected to
    conform.
         * @property {canonical|undefined}
        */
        Object.defineProperty(this, 'profile', {
            enumerable: true,
            get: () => this.__data.profile,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.profile = valueProvided;
            }
        });

        /**
         * @description Detailed description of the type of activity; e.g. What lab test, what
    procedure, what kind of encounter.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            get: () => this.__data.code,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.code = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description Indicates the level of authority/intentionality associated with the activity
    and where the request should fit into the workflow chain.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'intent', {
            enumerable: true,
            get: () => this.__data.intent,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.intent = valueProvided;
            }
        });

        /**
         * @description Indicates how quickly the activity  should be addressed with respect to other
    requests.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'priority', {
            enumerable: true,
            get: () => this.__data.priority,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.priority = valueProvided;
            }
        });

        /**
         * @description Set this to true if the definition is to indicate that a particular activity
    should NOT be performed. If true, this element should be interpreted to
    reinforce a negative coding. For example NPO as a code with a doNotPerform of
    true would still indicate to NOT perform the action.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'doNotPerform', {
            enumerable: true,
            get: () => this.__data.doNotPerform,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.doNotPerform = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Timing|undefined}
        */
        Object.defineProperty(this, 'timingTiming', {
            enumerable: true,
            get: () => this.__data.timingTiming,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Timing = require('../backbone_elements/timing.js');
                this.__data.timingTiming = new Timing(valueProvided);
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'timingDateTime', {
            enumerable: true,
            get: () => this.__data.timingDateTime,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.timingDateTime = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'timingAge', {
            enumerable: true,
            get: () => this.__data.timingAge,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.timingAge = new Quantity(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'timingPeriod', {
            enumerable: true,
            get: () => this.__data.timingPeriod,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.timingPeriod = new Period(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Range|undefined}
        */
        Object.defineProperty(this, 'timingRange', {
            enumerable: true,
            get: () => this.__data.timingRange,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Range = require('../complex_types/range.js');
                this.__data.timingRange = new Range(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'timingDuration', {
            enumerable: true,
            get: () => this.__data.timingDuration,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.timingDuration = new Quantity(valueProvided);
            }
        });

        /**
         * @description Identifies the facility where the activity will occur; e.g. home, hospital,
    specific clinic, etc.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'location', {
            enumerable: true,
            get: () => this.__data.location,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.location = new Reference(valueProvided);
            }
        });

        /**
         * @description Indicates who should participate in performing the action described.
         * @property {ActivityDefinitionParticipant[]|undefined}
        */
        Object.defineProperty(this, 'participant', {
            enumerable: true,
            get: () => this.__data.participant,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ActivityDefinitionParticipant = require('../backbone_elements/activityDefinitionParticipant.js');
                this.__data.participant = Array.isArray(valueProvided) ? valueProvided.map(v => new ActivityDefinitionParticipant(v)) : [new ActivityDefinitionParticipant(valueProvided)];
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'productReference', {
            enumerable: true,
            get: () => this.__data.productReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.productReference = new Reference(valueProvided);
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'productCodeableConcept', {
            enumerable: true,
            get: () => this.__data.productCodeableConcept,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.productCodeableConcept = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description Identifies the quantity expected to be consumed at once (per dose, per meal,
    etc.).
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'quantity', {
            enumerable: true,
            get: () => this.__data.quantity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.quantity = new Quantity(valueProvided);
            }
        });

        /**
         * @description Provides detailed dosage instructions in the same way that they are described
    for MedicationRequest resources.
         * @property {Dosage[]|undefined}
        */
        Object.defineProperty(this, 'dosage', {
            enumerable: true,
            get: () => this.__data.dosage,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Dosage = require('../backbone_elements/dosage.js');
                this.__data.dosage = Array.isArray(valueProvided) ? valueProvided.map(v => new Dosage(v)) : [new Dosage(valueProvided)];
            }
        });

        /**
         * @description Indicates the sites on the subject's body where the procedure should be
    performed (I.e. the target sites).
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'bodySite', {
            enumerable: true,
            get: () => this.__data.bodySite,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.bodySite = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Defines specimen requirements for the action to be performed, such as required
    specimens for a lab test.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'specimenRequirement', {
            enumerable: true,
            get: () => this.__data.specimenRequirement,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.specimenRequirement = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description Defines observation requirements for the action to be performed, such as body
    weight or surface area.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'observationRequirement', {
            enumerable: true,
            get: () => this.__data.observationRequirement,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.observationRequirement = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description Defines the observations that are expected to be produced by the action.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'observationResultRequirement', {
            enumerable: true,
            get: () => this.__data.observationResultRequirement,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.observationResultRequirement = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description A reference to a StructureMap resource that defines a transform that can be
    executed to produce the intent resource using the ActivityDefinition instance
    as the input.
         * @property {canonical|undefined}
        */
        Object.defineProperty(this, 'transform', {
            enumerable: true,
            get: () => this.__data.transform,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.transform = valueProvided;
            }
        });

        /**
         * @description Dynamic values that will be evaluated to produce values for elements of the
    resulting resource. For example, if the dosage of a medication must be
    computed based on the patient's weight, a dynamic value would be used to
    specify an expression that calculated the weight, and the path on the request
    resource that would contain the result.
         * @property {ActivityDefinitionDynamicValue[]|undefined}
        */
        Object.defineProperty(this, 'dynamicValue', {
            enumerable: true,
            get: () => this.__data.dynamicValue,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ActivityDefinitionDynamicValue = require('../backbone_elements/activityDefinitionDynamicValue.js');
                this.__data.dynamicValue = Array.isArray(valueProvided) ? valueProvided.map(v => new ActivityDefinitionDynamicValue(v)) : [new ActivityDefinitionDynamicValue(valueProvided)];
            }
        });

        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            identifier,
            version,
            name,
            title,
            subtitle,
            status,
            experimental,
            subjectCodeableConcept,
            subjectReference,
            date,
            publisher,
            contact,
            description,
            useContext,
            jurisdiction,
            purpose,
            usage,
            copyright,
            approvalDate,
            lastReviewDate,
            effectivePeriod,
            topic,
            author,
            editor,
            reviewer,
            endorser,
            relatedArtifact,
            library,
            kind,
            profile,
            code,
            intent,
            priority,
            doNotPerform,
            timingTiming,
            timingDateTime,
            timingAge,
            timingPeriod,
            timingRange,
            timingDuration,
            location,
            participant,
            productReference,
            productCodeableConcept,
            quantity,
            dosage,
            bodySite,
            specimenRequirement,
            observationRequirement,
            observationResultRequirement,
            transform,
            dynamicValue,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ActivityDefinition',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ActivityDefinition';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            url: this.url,
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            version: this.version,
            name: this.name,
            title: this.title,
            subtitle: this.subtitle,
            status: this.status,
            experimental: this.experimental,
            subjectCodeableConcept: this.subjectCodeableConcept && this.subjectCodeableConcept.toJSON(),
            subjectReference: this.subjectReference && this.subjectReference.toJSON(),
            date: this.date,
            publisher: this.publisher,
            contact: this.contact && this.contact.map(v => v.toJSON()),
            description: this.description,
            useContext: this.useContext && this.useContext.map(v => v.toJSON()),
            jurisdiction: this.jurisdiction && this.jurisdiction.map(v => v.toJSON()),
            purpose: this.purpose,
            usage: this.usage,
            copyright: this.copyright,
            approvalDate: this.approvalDate,
            lastReviewDate: this.lastReviewDate,
            effectivePeriod: this.effectivePeriod && this.effectivePeriod.toJSON(),
            topic: this.topic && this.topic.map(v => v.toJSON()),
            author: this.author && this.author.map(v => v.toJSON()),
            editor: this.editor && this.editor.map(v => v.toJSON()),
            reviewer: this.reviewer && this.reviewer.map(v => v.toJSON()),
            endorser: this.endorser && this.endorser.map(v => v.toJSON()),
            relatedArtifact: this.relatedArtifact && this.relatedArtifact.map(v => v.toJSON()),
            library: this.library,
            kind: this.kind,
            profile: this.profile,
            code: this.code && this.code.toJSON(),
            intent: this.intent,
            priority: this.priority,
            doNotPerform: this.doNotPerform,
            timingTiming: this.timingTiming && this.timingTiming.toJSON(),
            timingDateTime: this.timingDateTime,
            timingAge: this.timingAge && this.timingAge.toJSON(),
            timingPeriod: this.timingPeriod && this.timingPeriod.toJSON(),
            timingRange: this.timingRange && this.timingRange.toJSON(),
            timingDuration: this.timingDuration && this.timingDuration.toJSON(),
            location: this.location && this.location.toJSON(),
            participant: this.participant && this.participant.map(v => v.toJSON()),
            productReference: this.productReference && this.productReference.toJSON(),
            productCodeableConcept: this.productCodeableConcept && this.productCodeableConcept.toJSON(),
            quantity: this.quantity && this.quantity.toJSON(),
            dosage: this.dosage && this.dosage.map(v => v.toJSON()),
            bodySite: this.bodySite && this.bodySite.map(v => v.toJSON()),
            specimenRequirement: this.specimenRequirement && this.specimenRequirement.map(v => v.toJSON()),
            observationRequirement: this.observationRequirement && this.observationRequirement.map(v => v.toJSON()),
            observationResultRequirement: this.observationResultRequirement && this.observationResultRequirement.map(v => v.toJSON()),
            transform: this.transform,
            dynamicValue: this.dynamicValue && this.dynamicValue.map(v => v.toJSON()),
        };
    }
}

module.exports = ActivityDefinition;
