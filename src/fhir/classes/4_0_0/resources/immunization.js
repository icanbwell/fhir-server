/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');


/**
Immunization
    Describes the event of a patient being administered a vaccine or a record of
    an immunization as reported by a patient, a clinician or another party.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class Immunization extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {code} status,
     * @param {CodeableConcept|undefined} [statusReason],
     * @param {CodeableConcept} vaccineCode,
     * @param {Reference} patient,
     * @param {Reference|undefined} [encounter],
     * @param {dateTime|undefined} [occurrenceDateTime],
     * @param {String|undefined} [occurrenceString],
     * @param {dateTime|undefined} [recorded],
     * @param {Boolean|undefined} [primarySource],
     * @param {CodeableConcept|undefined} [reportOrigin],
     * @param {Reference|undefined} [location],
     * @param {Reference|undefined} [manufacturer],
     * @param {String|undefined} [lotNumber],
     * @param {date|undefined} [expirationDate],
     * @param {CodeableConcept|undefined} [site],
     * @param {CodeableConcept|undefined} [route],
     * @param {Quantity|undefined} [doseQuantity],
     * @param {ImmunizationPerformer[]|undefined} [performer],
     * @param {Annotation[]|undefined} [note],
     * @param {CodeableConcept[]|undefined} [reasonCode],
     * @param {Reference[]|undefined} [reasonReference],
     * @param {Boolean|undefined} [isSubpotent],
     * @param {CodeableConcept[]|undefined} [subpotentReason],
     * @param {ImmunizationEducation[]|undefined} [education],
     * @param {CodeableConcept[]|undefined} [programEligibility],
     * @param {CodeableConcept|undefined} [fundingSource],
     * @param {ImmunizationReaction[]|undefined} [reaction],
     * @param {ImmunizationProtocolApplied[]|undefined} [protocolApplied],
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            statusReason,
            vaccineCode,
            patient,
            encounter,
            occurrenceDateTime,
            occurrenceString,
            recorded,
            primarySource,
            reportOrigin,
            location,
            manufacturer,
            lotNumber,
            expirationDate,
            site,
            route,
            doseQuantity,
            performer,
            note,
            reasonCode,
            reasonReference,
            isSubpotent,
            subpotentReason,
            education,
            programEligibility,
            fundingSource,
            reaction,
            protocolApplied,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.contained = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description A unique identifier assigned to this immunization record.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(valueProvided) ? valueProvided.map(v => new Identifier(v)) : [new Identifier(valueProvided)];
            }
        });

        /**
         * @description Indicates the current status of the immunization event.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description Indicates the reason the immunization event was not performed.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'statusReason', {
            enumerable: true,
            get: () => this.__data.statusReason,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.statusReason = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description Vaccine that was administered or was to be administered.
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'vaccineCode', {
            enumerable: true,
            get: () => this.__data.vaccineCode,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.vaccineCode = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description The patient who either received or did not receive the immunization.
         * @property {Reference}
        */
        Object.defineProperty(this, 'patient', {
            enumerable: true,
            get: () => this.__data.patient,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.patient = new Reference(valueProvided);
            }
        });

        /**
         * @description The visit or admission or other contact between patient and health care
    provider the immunization was performed as part of.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'encounter', {
            enumerable: true,
            get: () => this.__data.encounter,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.encounter = new Reference(valueProvided);
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'occurrenceDateTime', {
            enumerable: true,
            get: () => this.__data.occurrenceDateTime,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.occurrenceDateTime = valueProvided;
            }
        });

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'occurrenceString', {
            enumerable: true,
            get: () => this.__data.occurrenceString,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.occurrenceString = valueProvided;
            }
        });

        /**
         * @description The date the occurrence of the immunization was first captured in the record -
    potentially significantly after the occurrence of the event.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'recorded', {
            enumerable: true,
            get: () => this.__data.recorded,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.recorded = valueProvided;
            }
        });

        /**
         * @description An indication that the content of the record is based on information from the
    person who administered the vaccine. This reflects the context under which the
    data was originally recorded.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'primarySource', {
            enumerable: true,
            get: () => this.__data.primarySource,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.primarySource = valueProvided;
            }
        });

        /**
         * @description The source of the data when the report of the immunization event is not based
    on information from the person who administered the vaccine.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'reportOrigin', {
            enumerable: true,
            get: () => this.__data.reportOrigin,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.reportOrigin = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description The service delivery location where the vaccine administration occurred.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'location', {
            enumerable: true,
            get: () => this.__data.location,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.location = new Reference(valueProvided);
            }
        });

        /**
         * @description Name of vaccine manufacturer.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'manufacturer', {
            enumerable: true,
            get: () => this.__data.manufacturer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.manufacturer = new Reference(valueProvided);
            }
        });

        /**
         * @description Lot number of the  vaccine product.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'lotNumber', {
            enumerable: true,
            get: () => this.__data.lotNumber,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.lotNumber = valueProvided;
            }
        });

        /**
         * @description Date vaccine batch expires.
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'expirationDate', {
            enumerable: true,
            get: () => this.__data.expirationDate,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.expirationDate = valueProvided;
            }
        });

        /**
         * @description Body site where vaccine was administered.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'site', {
            enumerable: true,
            get: () => this.__data.site,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.site = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description The path by which the vaccine product is taken into the body.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'route', {
            enumerable: true,
            get: () => this.__data.route,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.route = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description The quantity of vaccine product that was administered.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'doseQuantity', {
            enumerable: true,
            get: () => this.__data.doseQuantity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.doseQuantity = new Quantity(valueProvided);
            }
        });

        /**
         * @description Indicates who performed the immunization event.
         * @property {ImmunizationPerformer[]|undefined}
        */
        Object.defineProperty(this, 'performer', {
            enumerable: true,
            get: () => this.__data.performer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ImmunizationPerformer = require('../backbone_elements/immunizationPerformer.js');
                this.__data.performer = Array.isArray(valueProvided) ? valueProvided.map(v => new ImmunizationPerformer(v)) : [new ImmunizationPerformer(valueProvided)];
            }
        });

        /**
         * @description Extra information about the immunization that is not conveyed by the other
    attributes.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            enumerable: true,
            get: () => this.__data.note,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.note = Array.isArray(valueProvided) ? valueProvided.map(v => new Annotation(v)) : [new Annotation(valueProvided)];
            }
        });

        /**
         * @description Reasons why the vaccine was administered.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'reasonCode', {
            enumerable: true,
            get: () => this.__data.reasonCode,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.reasonCode = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Condition, Observation or DiagnosticReport that supports why the immunization
    was administered.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'reasonReference', {
            enumerable: true,
            get: () => this.__data.reasonReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.reasonReference = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description Indication if a dose is considered to be subpotent. By default, a dose should
    be considered to be potent.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'isSubpotent', {
            enumerable: true,
            get: () => this.__data.isSubpotent,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.isSubpotent = valueProvided;
            }
        });

        /**
         * @description Reason why a dose is considered to be subpotent.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'subpotentReason', {
            enumerable: true,
            get: () => this.__data.subpotentReason,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.subpotentReason = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Educational material presented to the patient (or guardian) at the time of
    vaccine administration.
         * @property {ImmunizationEducation[]|undefined}
        */
        Object.defineProperty(this, 'education', {
            enumerable: true,
            get: () => this.__data.education,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ImmunizationEducation = require('../backbone_elements/immunizationEducation.js');
                this.__data.education = Array.isArray(valueProvided) ? valueProvided.map(v => new ImmunizationEducation(v)) : [new ImmunizationEducation(valueProvided)];
            }
        });

        /**
         * @description Indicates a patient's eligibility for a funding program.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'programEligibility', {
            enumerable: true,
            get: () => this.__data.programEligibility,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.programEligibility = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Indicates the source of the vaccine actually administered. This may be
    different than the patient eligibility (e.g. the patient may be eligible for a
    publically purchased vaccine but due to inventory issues, vaccine purchased
    with private funds was actually administered).
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'fundingSource', {
            enumerable: true,
            get: () => this.__data.fundingSource,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.fundingSource = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description Categorical data indicating that an adverse event is associated in time to an
    immunization.
         * @property {ImmunizationReaction[]|undefined}
        */
        Object.defineProperty(this, 'reaction', {
            enumerable: true,
            get: () => this.__data.reaction,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ImmunizationReaction = require('../backbone_elements/immunizationReaction.js');
                this.__data.reaction = Array.isArray(valueProvided) ? valueProvided.map(v => new ImmunizationReaction(v)) : [new ImmunizationReaction(valueProvided)];
            }
        });

        /**
         * @description The protocol (set of recommendations) being followed by the provider who
    administered the dose.
         * @property {ImmunizationProtocolApplied[]|undefined}
        */
        Object.defineProperty(this, 'protocolApplied', {
            enumerable: true,
            get: () => this.__data.protocolApplied,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let ImmunizationProtocolApplied = require('../backbone_elements/immunizationProtocolApplied.js');
                this.__data.protocolApplied = Array.isArray(valueProvided) ? valueProvided.map(v => new ImmunizationProtocolApplied(v)) : [new ImmunizationProtocolApplied(valueProvided)];
            }
        });

        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            statusReason,
            vaccineCode,
            patient,
            encounter,
            occurrenceDateTime,
            occurrenceString,
            recorded,
            primarySource,
            reportOrigin,
            location,
            manufacturer,
            lotNumber,
            expirationDate,
            site,
            route,
            doseQuantity,
            performer,
            note,
            reasonCode,
            reasonReference,
            isSubpotent,
            subpotentReason,
            education,
            programEligibility,
            fundingSource,
            reaction,
            protocolApplied,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Immunization',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Immunization';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            status: this.status,
            statusReason: this.statusReason && this.statusReason.toJSON(),
            vaccineCode: this.vaccineCode && this.vaccineCode.toJSON(),
            patient: this.patient && this.patient.toJSON(),
            encounter: this.encounter && this.encounter.toJSON(),
            occurrenceDateTime: this.occurrenceDateTime,
            occurrenceString: this.occurrenceString,
            recorded: this.recorded,
            primarySource: this.primarySource,
            reportOrigin: this.reportOrigin && this.reportOrigin.toJSON(),
            location: this.location && this.location.toJSON(),
            manufacturer: this.manufacturer && this.manufacturer.toJSON(),
            lotNumber: this.lotNumber,
            expirationDate: this.expirationDate,
            site: this.site && this.site.toJSON(),
            route: this.route && this.route.toJSON(),
            doseQuantity: this.doseQuantity && this.doseQuantity.toJSON(),
            performer: this.performer && this.performer.map(v => v.toJSON()),
            note: this.note && this.note.map(v => v.toJSON()),
            reasonCode: this.reasonCode && this.reasonCode.map(v => v.toJSON()),
            reasonReference: this.reasonReference && this.reasonReference.map(v => v.toJSON()),
            isSubpotent: this.isSubpotent,
            subpotentReason: this.subpotentReason && this.subpotentReason.map(v => v.toJSON()),
            education: this.education && this.education.map(v => v.toJSON()),
            programEligibility: this.programEligibility && this.programEligibility.map(v => v.toJSON()),
            fundingSource: this.fundingSource && this.fundingSource.toJSON(),
            reaction: this.reaction && this.reaction.map(v => v.toJSON()),
            protocolApplied: this.protocolApplied && this.protocolApplied.map(v => v.toJSON()),
        };
    }
}

module.exports = Immunization;
