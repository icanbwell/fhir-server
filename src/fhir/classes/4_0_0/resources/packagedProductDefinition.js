

// This file is auto-generated by generate_classes so do not edit manually

const { removeNull } = require('../../../../utils/nullRemover');

const Resource = require('../resources/resource');
const async = require('async');

/**
PackagedProductDefinition
    A medically related item or items, in a container or package.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class PackagedProductDefinition extends Resource {
    /**
     * @param {String|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {String|undefined} [name],
     * @param {CodeableConcept|undefined} [type],
     * @param {Reference[]|undefined} [packageFor],
     * @param {CodeableConcept|undefined} [status],
     * @param {dateTime|undefined} [statusDate],
     * @param {Quantity[]|undefined} [containedItemQuantity],
     * @param {markdown|undefined} [description],
     * @param {PackagedProductDefinitionLegalStatusOfSupply[]|undefined} [legalStatusOfSupply],
     * @param {MarketingStatus[]|undefined} [marketingStatus],
     * @param {CodeableConcept[]|undefined} [characteristic],
     * @param {Boolean|undefined} [copackagedIndicator],
     * @param {Reference[]|undefined} [manufacturer],
     * @param {PackagedProductDefinitionPackage|undefined} [package],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
    */
    constructor (
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            name,
            type,
            packageFor,
            status,
            statusDate,
            containedItemQuantity,
            description,
            legalStatusOfSupply,
            marketingStatus,
            characteristic,
            copackagedIndicator,
            manufacturer,
            package: _package,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.meta = undefined;
                    return;
                }
                const Meta = require('../complex_types/meta.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.meta = FhirResourceCreator.create(valueProvided, Meta);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.implicitRules = undefined;
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.language = undefined;
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.text = undefined;
                    return;
                }
                const Narrative = require('../complex_types/narrative.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.text = FhirResourceCreator.create(valueProvided, Narrative);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.contained = undefined;
                    return;
                }
                const ResourceContainer = require('../simple_types/resourceContainer.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.contained = FhirResourceCreator.createArray(valueProvided);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.extension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.modifierExtension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.modifierExtension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description A unique identifier for this package as whole. Unique instance identifiers
    assigned to a package by manufacturers, regulators, drug catalogue custodians
    or other organizations.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.identifier = undefined;
                    return;
                }
                const Identifier = require('../complex_types/identifier.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.identifier = FhirResourceCreator.createArray(valueProvided, Identifier);
            }
        });

        /**
         * @description A name for this package. Typically what it would be listed as in a drug
    formulary or catalogue, inventory etc.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'name', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.name,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.name = undefined;
                    return;
                }
                this.__data.name = valueProvided;
            }
        });

        /**
         * @description A high level category e.g. medicinal product, raw material, shipping/transport
    container, etc.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'type', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.type = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.type = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description The product that this is a pack for.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'packageFor', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.packageFor,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.packageFor = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.packageFor = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description The status within the lifecycle of this item. A high level status, this is not
    intended to duplicate details carried elsewhere such as legal status, or
    authorization or marketing status.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.status = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.status = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description The date at which the given status became applicable.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'statusDate', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.statusDate,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.statusDate = undefined;
                    return;
                }
                this.__data.statusDate = valueProvided;
            }
        });

        /**
         * @description A total of the complete count of contained items of a particular type/form,
    independent of sub-packaging or organization. This can be considered as the
    pack size. This attribute differs from containedItem.amount in that it can
    give a single aggregated count of all tablet types in a pack, even when these
    are different manufactured items. For example a pill pack of 21 tablets plus 7
    sugar tablets, can be denoted here as '28 tablets'. This attribute is
    repeatable so that the different item types in one pack type can be counted
    (e.g. a count of vials and count of syringes). Each repeat must have different
    units, so that it is clear what the different sets of counted items are, and
    it is not intended to allow different counts of similar items (e.g. not '2
    tubes and 3 tubes'). Repeats are not to be used to represent different pack
    sizes (e.g. 20 pack vs. 50 pack) - which would be different instances of this
    resource.
         * @property {Quantity[]|undefined}
        */
        Object.defineProperty(this, 'containedItemQuantity', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.containedItemQuantity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.containedItemQuantity = undefined;
                    return;
                }
                const Quantity = require('../complex_types/quantity.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.containedItemQuantity = FhirResourceCreator.createArray(valueProvided, Quantity);
            }
        });

        /**
         * @description Textual description. Note that this is not the name of the package or product.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'description', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.description = undefined;
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description The legal status of supply of the packaged item as classified by the
    regulator.
         * @property {PackagedProductDefinitionLegalStatusOfSupply[]|undefined}
        */
        Object.defineProperty(this, 'legalStatusOfSupply', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.legalStatusOfSupply,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.legalStatusOfSupply = undefined;
                    return;
                }
                const PackagedProductDefinitionLegalStatusOfSupply = require('../backbone_elements/packagedProductDefinitionLegalStatusOfSupply.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.legalStatusOfSupply = FhirResourceCreator.createArray(valueProvided, PackagedProductDefinitionLegalStatusOfSupply);
            }
        });

        /**
         * @description Allows specifying that an item is on the market for sale, or that it is not
    available, and the dates and locations associated.
         * @property {MarketingStatus[]|undefined}
        */
        Object.defineProperty(this, 'marketingStatus', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.marketingStatus,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.marketingStatus = undefined;
                    return;
                }
                const MarketingStatus = require('../backbone_elements/marketingStatus.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.marketingStatus = FhirResourceCreator.createArray(valueProvided, MarketingStatus);
            }
        });

        /**
         * @description Allows the key features to be recorded, such as "hospital pack", "nurse
    prescribable", "calendar pack".
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'characteristic', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.characteristic,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.characteristic = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.characteristic = FhirResourceCreator.createArray(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description States whether a drug product is supplied with another item such as a diluent
    or adjuvant.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'copackagedIndicator', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.copackagedIndicator,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.copackagedIndicator = undefined;
                    return;
                }
                this.__data.copackagedIndicator = valueProvided;
            }
        });

        /**
         * @description Manufacturer of this package type. When there are multiple it means these are
    all possible manufacturers.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'manufacturer', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.manufacturer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.manufacturer = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.manufacturer = FhirResourceCreator.createArray(valueProvided, Reference);
            }
        });

        /**
         * @description A packaging item, as a container for medically related items, possibly with
    other packaging items within, or a packaging component, such as bottle cap
    (which is not a device or a medication manufactured item).
         * @property {PackagedProductDefinitionPackage|undefined}
        */
        Object.defineProperty(this, 'package', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.package,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.package = undefined;
                    return;
                }
                const PackagedProductDefinitionPackage = require('../backbone_elements/packagedProductDefinitionPackage.js');
                const { FhirResourceCreator } = require('../../../fhirResourceCreator');
                this.__data.package = FhirResourceCreator.create(valueProvided, PackagedProductDefinitionPackage);
            }
        });

        /**
         * @description _access
         * @property {Object|undefined}
         */
        Object.defineProperty(this, '_access', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._access,
            set: valueProvided => {
                this.__data._access = valueProvided;
            }
        });
        /**
         * @description _sourceAssigningAuthority
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceAssigningAuthority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceAssigningAuthority,
            set: valueProvided => {
                this.__data._sourceAssigningAuthority = valueProvided;
            }
        });
        /**
         * @description _uuid
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_uuid', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._uuid,
            set: valueProvided => {
                this.__data._uuid = valueProvided;
            }
        });
        /**
         * @description _sourceId
         * @property {string|undefined}
         */
        Object.defineProperty(this, '_sourceId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data._sourceId,
            set: valueProvided => {
                this.__data._sourceId = valueProvided;
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            name,
            type,
            packageFor,
            status,
            statusDate,
            containedItemQuantity,
            description,
            legalStatusOfSupply,
            marketingStatus,
            characteristic,
            copackagedIndicator,
            manufacturer,
            package: _package,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        });

        /**
         * @description Define a default non-writable resourceType property
         * @property {string|undefined}
         */
        Object.defineProperty(this, 'resourceType', {
            value: 'PackagedProductDefinition',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    /**
     * @description Define a default non-writable resourceType property
     * @property {string|undefined}
     */
    static get resourceType () {
        return 'PackagedProductDefinition';
    }

    /**
     * @description Creates a blank new resource
     * @param {String|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {String|undefined} [name],
     * @param {CodeableConcept|undefined} [type],
     * @param {Reference[]|undefined} [packageFor],
     * @param {CodeableConcept|undefined} [status],
     * @param {dateTime|undefined} [statusDate],
     * @param {Quantity[]|undefined} [containedItemQuantity],
     * @param {markdown|undefined} [description],
     * @param {PackagedProductDefinitionLegalStatusOfSupply[]|undefined} [legalStatusOfSupply],
     * @param {MarketingStatus[]|undefined} [marketingStatus],
     * @param {CodeableConcept[]|undefined} [characteristic],
     * @param {Boolean|undefined} [copackagedIndicator],
     * @param {Reference[]|undefined} [manufacturer],
     * @param {PackagedProductDefinitionPackage|undefined} [package],
     * @param {Object|undefined} [_access]
     * @param {string|undefined} [_sourceAssigningAuthority]
     * @param {string|undefined} [_uuid]
     * @param {string|undefined} [_sourceId]
     * @returns {PackagedProductDefinition}
    */
    create (
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            name,
            type,
            packageFor,
            status,
            statusDate,
            containedItemQuantity,
            description,
            legalStatusOfSupply,
            marketingStatus,
            characteristic,
            copackagedIndicator,
            manufacturer,
            package: _package,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        }
    ) {
        return new PackagedProductDefinition({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            name,
            type,
            packageFor,
            status,
            statusDate,
            containedItemQuantity,
            description,
            legalStatusOfSupply,
            marketingStatus,
            characteristic,
            copackagedIndicator,
            manufacturer,
            package: _package,
            _access,
            _sourceAssigningAuthority,
            _uuid,
            _sourceId
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {PackagedProductDefinition}
    */
    clone () {
        return new PackagedProductDefinition(this.toJSONInternal());
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON () {
        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            name: this.name,
            type: this.type && this.type.toJSON(),
            packageFor: this.packageFor && this.packageFor.map(v => v.toJSON()),
            status: this.status && this.status.toJSON(),
            statusDate: this.statusDate,
            containedItemQuantity: this.containedItemQuantity && this.containedItemQuantity.map(v => v.toJSON()),
            description: this.description,
            legalStatusOfSupply: this.legalStatusOfSupply && this.legalStatusOfSupply.map(v => v.toJSON()),
            marketingStatus: this.marketingStatus && this.marketingStatus.map(v => v.toJSON()),
            characteristic: this.characteristic && this.characteristic.map(v => v.toJSON()),
            copackagedIndicator: this.copackagedIndicator,
            manufacturer: this.manufacturer && this.manufacturer.map(v => v.toJSON()),
            package: this.package && this.package.toJSON()
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync ({ fnUpdateReferenceAsync }) {
            if (this.meta) { await this.meta.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.text) { await this.text.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.contained) { await async.each(this.contained, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.extension) { await async.each(this.extension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.modifierExtension) { await async.each(this.modifierExtension, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.identifier) { await async.each(this.identifier, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.type) { await this.type.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.packageFor) { await async.each(this.packageFor, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.status) { await this.status.updateReferencesAsync({ fnUpdateReferenceAsync }); }
            if (this.containedItemQuantity) { await async.each(this.containedItemQuantity, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.legalStatusOfSupply) { await async.each(this.legalStatusOfSupply, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.marketingStatus) { await async.each(this.marketingStatus, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.characteristic) { await async.each(this.characteristic, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.manufacturer) { await async.each(this.manufacturer, async v => await v.updateReferencesAsync({ fnUpdateReferenceAsync })); }
            if (this.package) { await this.package.updateReferencesAsync({ fnUpdateReferenceAsync }); }
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal () {
        const json = {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSONInternal(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSONInternal(),
            contained: this.contained && this.contained.map(v => v.toJSONInternal()),
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSONInternal()),
            identifier: this.identifier && this.identifier.map(v => v.toJSONInternal()),
            name: this.name,
            type: this.type && this.type.toJSONInternal(),
            packageFor: this.packageFor && this.packageFor.map(v => v.toJSONInternal()),
            status: this.status && this.status.toJSONInternal(),
            statusDate: this.statusDate,
            containedItemQuantity: this.containedItemQuantity && this.containedItemQuantity.map(v => v.toJSONInternal()),
            description: this.description,
            legalStatusOfSupply: this.legalStatusOfSupply && this.legalStatusOfSupply.map(v => v.toJSONInternal()),
            marketingStatus: this.marketingStatus && this.marketingStatus.map(v => v.toJSONInternal()),
            characteristic: this.characteristic && this.characteristic.map(v => v.toJSONInternal()),
            copackagedIndicator: this.copackagedIndicator,
            manufacturer: this.manufacturer && this.manufacturer.map(v => v.toJSONInternal()),
            package: this.package && this.package.toJSONInternal()
        };
        if (this._access) {
            json._access = this._access;
        }
        if (this._sourceAssigningAuthority) {
            json._sourceAssigningAuthority = this._sourceAssigningAuthority;
        }
        if (this._uuid) {
            json._uuid = this._uuid;
        }
        if (this._sourceId) {
            json._sourceId = this._sourceId;
        }

        return removeNull(json);
    }
}

module.exports = PackagedProductDefinition;
