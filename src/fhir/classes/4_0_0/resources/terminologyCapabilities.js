// This file is auto-generated by generate_classes so do not edit manually

/**
TerminologyCapabilities
    A TerminologyCapabilities resource documents a set of capabilities (behaviors)
    of a FHIR Terminology Server that may be used as a statement of actual server
    functionality or a statement of required or desired server implementation.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class TerminologyCapabilities {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.implicitRules = value;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.contained = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description An absolute URI that is used to identify this terminology capabilities when it
    is referenced in a specification, model, design or an instance; also called
    its canonical identifier. This SHOULD be globally unique and SHOULD be a
    literal address at which at which an authoritative instance of this
    terminology capabilities is (or will be) published. This URL can be the target
    of a canonical reference. It SHALL remain the same when the terminology
    capabilities is stored on different servers.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'url', {
            enumerable: true,
            get: () => this.__data.url,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.url = value;
            }
        });

        /**
         * @description The identifier that is used to identify this version of the terminology
    capabilities when it is referenced in a specification, model, design or
    instance. This is an arbitrary value managed by the terminology capabilities
    author and is not expected to be globally unique. For example, it might be a
    timestamp (e.g. yyyymmdd) if a managed version is not available. There is also
    no expectation that versions can be placed in a lexicographical sequence.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'version', {
            enumerable: true,
            get: () => this.__data.version,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.version = value;
            }
        });

        /**
         * @description A natural language name identifying the terminology capabilities. This name
    should be usable as an identifier for the module by machine processing
    applications such as code generation.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'name', {
            enumerable: true,
            get: () => this.__data.name,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.name = value;
            }
        });

        /**
         * @description A short, descriptive, user-friendly title for the terminology capabilities.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'title', {
            enumerable: true,
            get: () => this.__data.title,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.title = value;
            }
        });

        /**
         * @description The status of this terminology capabilities. Enables tracking the life-cycle
    of the content.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.status = value;
            }
        });

        /**
         * @description A Boolean value to indicate that this terminology capabilities is authored for
    testing purposes (or education/evaluation/marketing) and is not intended to be
    used for genuine usage.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'experimental', {
            enumerable: true,
            get: () => this.__data.experimental,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.experimental = value;
            }
        });

        /**
         * @description The date  (and optionally time) when the terminology capabilities was
    published. The date must change when the business version changes and it must
    change if the status code changes. In addition, it should change when the
    substantive content of the terminology capabilities changes.
         * @property {dateTime}
        */
        Object.defineProperty(this, 'date', {
            enumerable: true,
            get: () => this.__data.date,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.date = value;
            }
        });

        /**
         * @description The name of the organization or individual that published the terminology
    capabilities.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'publisher', {
            enumerable: true,
            get: () => this.__data.publisher,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.publisher = value;
            }
        });

        /**
         * @description Contact details to assist a user in finding and communicating with the
    publisher.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'contact', {
            enumerable: true,
            get: () => this.__data.contact,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.contact = Array.isArray(value) ? value.map(v => new ContactDetail(v)) : [new ContactDetail(value)];
            }
        });

        /**
         * @description A free text natural language description of the terminology capabilities from
    a consumer's perspective. Typically, this is used when the capability
    statement describes a desired rather than an actual solution, for example as a
    formal expression of requirements as part of an RFP.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.description = value;
            }
        });

        /**
         * @description The content was developed with a focus and intent of supporting the contexts
    that are listed. These contexts may be general categories (gender, age, ...)
    or may be references to specific programs (insurance plans, studies, ...) and
    may be used to assist with indexing and searching for appropriate terminology
    capabilities instances.
         * @property {UsageContext[]|undefined}
        */
        Object.defineProperty(this, 'useContext', {
            enumerable: true,
            get: () => this.__data.useContext,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let UsageContext = require('../complex_types/usageContext.js');
                this.__data.useContext = Array.isArray(value) ? value.map(v => new UsageContext(v)) : [new UsageContext(value)];
            }
        });

        /**
         * @description A legal or geographic region in which the terminology capabilities is intended
    to be used.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'jurisdiction', {
            enumerable: true,
            get: () => this.__data.jurisdiction,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.jurisdiction = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description Explanation of why this terminology capabilities is needed and why it has been
    designed as it has.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'purpose', {
            enumerable: true,
            get: () => this.__data.purpose,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.purpose = value;
            }
        });

        /**
         * @description A copyright statement relating to the terminology capabilities and/or its
    contents. Copyright statements are generally legal restrictions on the use and
    publishing of the terminology capabilities.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'copyright', {
            enumerable: true,
            get: () => this.__data.copyright,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.copyright = value;
            }
        });

        /**
         * @description The way that this statement is intended to be used, to describe an actual
    running instance of software, a particular product (kind, not instance of
    software) or a class of implementation (e.g. a desired purchase).
         * @property {code}
        */
        Object.defineProperty(this, 'kind', {
            enumerable: true,
            get: () => this.__data.kind,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.kind = value;
            }
        });

        /**
         * @description Software that is covered by this terminology capability statement.  It is used
    when the statement describes the capabilities of a particular software
    version, independent of an installation.
         * @property {TerminologyCapabilitiesSoftware|undefined}
        */
        Object.defineProperty(this, 'software', {
            enumerable: true,
            get: () => this.__data.software,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let TerminologyCapabilitiesSoftware = require('../backbone_elements/terminologyCapabilitiesSoftware.js');
                this.__data.software = new TerminologyCapabilitiesSoftware(value);
            }
        });

        /**
         * @description Identifies a specific implementation instance that is described by the
    terminology capability statement - i.e. a particular installation, rather than
    the capabilities of a software program.
         * @property {TerminologyCapabilitiesImplementation|undefined}
        */
        Object.defineProperty(this, 'implementation', {
            enumerable: true,
            get: () => this.__data.implementation,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let TerminologyCapabilitiesImplementation = require('../backbone_elements/terminologyCapabilitiesImplementation.js');
                this.__data.implementation = new TerminologyCapabilitiesImplementation(value);
            }
        });

        /**
         * @description Whether the server supports lockedDate.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'lockedDate', {
            enumerable: true,
            get: () => this.__data.lockedDate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.lockedDate = value;
            }
        });

        /**
         * @description Identifies a code system that is supported by the server. If there is a no
    code system URL, then this declares the general assumptions a client can make
    about support for any CodeSystem resource.
         * @property {TerminologyCapabilitiesCodeSystem[]|undefined}
        */
        Object.defineProperty(this, 'codeSystem', {
            enumerable: true,
            get: () => this.__data.codeSystem,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let TerminologyCapabilitiesCodeSystem = require('../backbone_elements/terminologyCapabilitiesCodeSystem.js');
                this.__data.codeSystem = Array.isArray(value) ? value.map(v => new TerminologyCapabilitiesCodeSystem(v)) : [new TerminologyCapabilitiesCodeSystem(value)];
            }
        });

        /**
         * @description Information about the [ValueSet/$expand](valueset-operation-expand.html)
    operation.
         * @property {TerminologyCapabilitiesExpansion|undefined}
        */
        Object.defineProperty(this, 'expansion', {
            enumerable: true,
            get: () => this.__data.expansion,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let TerminologyCapabilitiesExpansion = require('../backbone_elements/terminologyCapabilitiesExpansion.js');
                this.__data.expansion = new TerminologyCapabilitiesExpansion(value);
            }
        });

        /**
         * @description The degree to which the server supports the code search parameter on ValueSet,
    if it is supported.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'codeSearch', {
            enumerable: true,
            get: () => this.__data.codeSearch,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.codeSearch = value;
            }
        });

        /**
         * @description Information about the [ValueSet/$validate-code](valueset-operation-validate-
    code.html) operation.
         * @property {TerminologyCapabilitiesValidateCode|undefined}
        */
        Object.defineProperty(this, 'validateCode', {
            enumerable: true,
            get: () => this.__data.validateCode,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let TerminologyCapabilitiesValidateCode = require('../backbone_elements/terminologyCapabilitiesValidateCode.js');
                this.__data.validateCode = new TerminologyCapabilitiesValidateCode(value);
            }
        });

        /**
         * @description Information about the [ConceptMap/$translate](conceptmap-operation-
    translate.html) operation.
         * @property {TerminologyCapabilitiesTranslation|undefined}
        */
        Object.defineProperty(this, 'translation', {
            enumerable: true,
            get: () => this.__data.translation,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let TerminologyCapabilitiesTranslation = require('../backbone_elements/terminologyCapabilitiesTranslation.js');
                this.__data.translation = new TerminologyCapabilitiesTranslation(value);
            }
        });

        /**
         * @description Whether the $closure operation is supported.
         * @property {TerminologyCapabilitiesClosure|undefined}
        */
        Object.defineProperty(this, 'closure', {
            enumerable: true,
            get: () => this.__data.closure,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let TerminologyCapabilitiesClosure = require('../backbone_elements/terminologyCapabilitiesClosure.js');
                this.__data.closure = new TerminologyCapabilitiesClosure(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'TerminologyCapabilities',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'TerminologyCapabilities';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            url: this.url,
            version: this.version,
            name: this.name,
            title: this.title,
            status: this.status,
            experimental: this.experimental,
            date: this.date,
            publisher: this.publisher,
            contact: this.contact && this.contact.map(v => v.toJSON()),
            description: this.description,
            useContext: this.useContext && this.useContext.map(v => v.toJSON()),
            jurisdiction: this.jurisdiction && this.jurisdiction.map(v => v.toJSON()),
            purpose: this.purpose,
            copyright: this.copyright,
            kind: this.kind,
            software: this.software && this.software.toJSON(),
            implementation: this.implementation && this.implementation.toJSON(),
            lockedDate: this.lockedDate,
            codeSystem: this.codeSystem && this.codeSystem.map(v => v.toJSON()),
            expansion: this.expansion && this.expansion.toJSON(),
            codeSearch: this.codeSearch,
            validateCode: this.validateCode && this.validateCode.toJSON(),
            translation: this.translation && this.translation.toJSON(),
            closure: this.closure && this.closure.toJSON(),
        };
    }
}

module.exports = TerminologyCapabilities;
