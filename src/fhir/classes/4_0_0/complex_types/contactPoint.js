/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');


/**
ContactPoint
    Details for all kinds of technology mediated contact points for a person or
    organization, including telephone, email, etc.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class ContactPoint extends Element {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {code|undefined} [system],
     * @param {String|undefined} [value],
     * @param {code|undefined} [use],
     * @param {Int|undefined} [rank],
     * @param {Period|undefined} [period],
    */
    constructor(
        {
            id,
            extension,
            system,
            value,
            use,
            rank,
            period,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description Telecommunications form for contact point - what communications system is
    required to make use of the contact.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'system', {
            enumerable: true,
            get: () => this.__data.system,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.system = valueProvided;
            }
        });

        /**
         * @description The actual contact point details, in a form that is meaningful to the
    designated communication system (i.e. phone number or email address).
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'value', {
            enumerable: true,
            get: () => this.__data.value,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.value = valueProvided;
            }
        });

        /**
         * @description Identifies the purpose for the contact point.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'use', {
            enumerable: true,
            get: () => this.__data.use,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.use = valueProvided;
            }
        });

        /**
         * @description Specifies a preferred order in which to use a set of contacts. ContactPoints
    with lower rank values are more preferred than those with higher rank values.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'rank', {
            enumerable: true,
            get: () => this.__data.rank,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.rank = valueProvided;
            }
        });

        /**
         * @description Time period when the contact point was/is in use.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'period', {
            enumerable: true,
            get: () => this.__data.period,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.period = new Period(valueProvided);
            }
        });

        Object.assign(this, {
            id,
            extension,
            system,
            value,
            use,
            rank,
            period,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ContactPoint',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ContactPoint';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            system: this.system,
            value: this.value,
            use: this.use,
            rank: this.rank,
            period: this.period && this.period.toJSON(),
        };
    }
}

module.exports = ContactPoint;
