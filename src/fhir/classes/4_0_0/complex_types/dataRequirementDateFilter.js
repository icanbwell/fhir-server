// This file is auto-generated by generate_classes so do not edit manually

/**
DataRequirement.DateFilter
    Describes a required data item for evaluation in terms of the type of data,
    and optional code or date-based filters of the data.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class DataRequirementDateFilter {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description The date-valued attribute of the filter. The specified path SHALL be a
    FHIRPath resolveable on the specified type of the DataRequirement, and SHALL
    consist only of identifiers, constant indexers, and .resolve(). The path is
    allowed to contain qualifiers (.) to traverse sub-elements, as well as
    indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple
    FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index
    must be an integer constant. The path must resolve to an element of type date,
    dateTime, Period, Schedule, or Timing.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'path', {
            enumerable: true,
            get: () => this.__data.path,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.path = value;
            }
        });

        /**
         * @description A date parameter that refers to a search parameter defined on the specified
    type of the DataRequirement, and which searches on elements of type date,
    dateTime, Period, Schedule, or Timing.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'searchParam', {
            enumerable: true,
            get: () => this.__data.searchParam,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.searchParam = value;
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'valueDateTime', {
            enumerable: true,
            get: () => this.__data.valueDateTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.valueDateTime = value;
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'valuePeriod', {
            enumerable: true,
            get: () => this.__data.valuePeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.valuePeriod = new Period(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'valueDuration', {
            enumerable: true,
            get: () => this.__data.valueDuration,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.valueDuration = new Quantity(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'DataRequirementDateFilter',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'DataRequirementDateFilter';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            path: this.path,
            searchParam: this.searchParam,
            valueDateTime: this.valueDateTime,
            valuePeriod: this.valuePeriod && this.valuePeriod.toJSON(),
            valueDuration: this.valueDuration && this.valueDuration.toJSON(),
        };
    }
}

module.exports = DataRequirementDateFilter;
