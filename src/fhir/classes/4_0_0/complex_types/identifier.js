/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');


/**
Identifier
    An identifier - identifies some entity uniquely and unambiguously. Typically
    this is used for business identifiers.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class Identifier extends Element {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {code|undefined} [use],
     * @param {CodeableConcept|undefined} [type],
     * @param {uri|undefined} [system],
     * @param {String|undefined} [value],
     * @param {Period|undefined} [period],
     * @param {Reference|undefined} [assigner],
    */
    constructor(
        {
            id,
            extension,
            use,
            type,
            system,
            value,
            period,
            assigner,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description The purpose of this identifier.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'use', {
            enumerable: true,
            get: () => this.__data.use,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.use = valueProvided;
            }
        });

        /**
         * @description A coded type for the identifier that can be used to determine which identifier
    to use for a specific purpose.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.type = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description Establishes the namespace for the value - that is, a URL that describes a set
    values that are unique.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'system', {
            enumerable: true,
            get: () => this.__data.system,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.system = valueProvided;
            }
        });

        /**
         * @description The portion of the identifier typically relevant to the user and which is
    unique within the context of the system.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'value', {
            enumerable: true,
            get: () => this.__data.value,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.value = valueProvided;
            }
        });

        /**
         * @description Time period during which identifier is/was valid for use.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'period', {
            enumerable: true,
            get: () => this.__data.period,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.period = new Period(valueProvided);
            }
        });

        /**
         * @description Organization that issued/manages the identifier.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'assigner', {
            enumerable: true,
            get: () => this.__data.assigner,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.assigner = new Reference(valueProvided);
            }
        });

        Object.assign(this, {
            id,
            extension,
            use,
            type,
            system,
            value,
            period,
            assigner,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Identifier',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Identifier';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            use: this.use,
            type: this.type && this.type.toJSON(),
            system: this.system,
            value: this.value,
            period: this.period && this.period.toJSON(),
            assigner: this.assigner && this.assigner.toJSON(),
        };
    }
}

module.exports = Identifier;
