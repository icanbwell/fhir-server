/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');


/**
SampledData
    A series of measurements taken by a device, with upper and lower limits. There
    may be more than one dimension in the data.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class SampledData extends Element {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Quantity} origin,
     * @param {decimal} period,
     * @param {decimal|undefined} [factor],
     * @param {decimal|undefined} [lowerLimit],
     * @param {decimal|undefined} [upperLimit],
     * @param {Int} dimensions,
     * @param {String|undefined} [data],
    */
    constructor(
        {
            id,
            extension,
            origin,
            period,
            factor,
            lowerLimit,
            upperLimit,
            dimensions,
            data,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description The base quantity that a measured value of zero represents. In addition, this
    provides the units of the entire measurement series.
         * @property {Quantity}
        */
        Object.defineProperty(this, 'origin', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.origin,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.origin = new Quantity(valueProvided);
            }
        });

        /**
         * @description The length of time between sampling times, measured in milliseconds.
         * @property {decimal}
        */
        Object.defineProperty(this, 'period', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.period,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.period = valueProvided;
            }
        });

        /**
         * @description A correction factor that is applied to the sampled data points before they are
    added to the origin.
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'factor', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.factor,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.factor = valueProvided;
            }
        });

        /**
         * @description The lower limit of detection of the measured points. This is needed if any of
    the data points have the value "L" (lower than detection limit).
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'lowerLimit', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.lowerLimit,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.lowerLimit = valueProvided;
            }
        });

        /**
         * @description The upper limit of detection of the measured points. This is needed if any of
    the data points have the value "U" (higher than detection limit).
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'upperLimit', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.upperLimit,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.upperLimit = valueProvided;
            }
        });

        /**
         * @description The number of sample points at each time point. If this value is greater than
    one, then the dimensions will be interlaced - all the sample points for a
    point in time will be recorded at once.
         * @property {Int}
        */
        Object.defineProperty(this, 'dimensions', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.dimensions,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.dimensions = valueProvided;
            }
        });

        /**
         * @description A series of data points which are decimal values separated by a single space
    (character u20). The special values "E" (error), "L" (below detection limit)
    and "U" (above detection limit) can also be used in place of a decimal value.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'data', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.data,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.data = valueProvided;
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            origin,
            period,
            factor,
            lowerLimit,
            upperLimit,
            dimensions,
            data,
        });

    }



    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            origin: this.origin && this.origin.toJSON(),
            period: this.period,
            factor: this.factor,
            lowerLimit: this.lowerLimit,
            upperLimit: this.upperLimit,
            dimensions: this.dimensions,
            data: this.data,
        });
    }
}

module.exports = SampledData;
