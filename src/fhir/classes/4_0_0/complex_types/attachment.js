// This file is auto-generated by generate_classes so do not edit manually

/**
Attachment
    For referring to data content defined in other formats.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class Attachment {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description Identifies the type of the data in the attachment and allows a method to be
    chosen to interpret or render the data. Includes mime type parameters such as
    charset where appropriate.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'contentType', {
            enumerable: true,
            get: () => this.__data.contentType,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.contentType = value;
            }
        });

        /**
         * @description The human language of the content. The value can be any valid value according
    to BCP 47.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description The actual data of the attachment - a sequence of bytes, base64 encoded.
         * @property {base64Binary|undefined}
        */
        Object.defineProperty(this, 'data', {
            enumerable: true,
            get: () => this.__data.data,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.data = value;
            }
        });

        /**
         * @description A location where the data can be accessed.
         * @property {url|undefined}
        */
        Object.defineProperty(this, 'url', {
            enumerable: true,
            get: () => this.__data.url,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.url = value;
            }
        });

        /**
         * @description The number of bytes of data that make up this attachment (before base64
    encoding, if that is done).
         * @property {unsignedInt|undefined}
        */
        Object.defineProperty(this, 'size', {
            enumerable: true,
            get: () => this.__data.size,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.size = value;
            }
        });

        /**
         * @description The calculated hash of the data using SHA-1. Represented using base64.
         * @property {base64Binary|undefined}
        */
        Object.defineProperty(this, 'hash', {
            enumerable: true,
            get: () => this.__data.hash,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.hash = value;
            }
        });

        /**
         * @description A label or set of text to display in place of the data.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'title', {
            enumerable: true,
            get: () => this.__data.title,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.title = value;
            }
        });

        /**
         * @description The date that the attachment was first created.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'creation', {
            enumerable: true,
            get: () => this.__data.creation,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.creation = value;
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Attachment',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Attachment';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            contentType: this.contentType,
            language: this.language,
            data: this.data,
            url: this.url,
            size: this.size,
            hash: this.hash,
            title: this.title,
            creation: this.creation,
        };
    }
}

module.exports = Attachment;
