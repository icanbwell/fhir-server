/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

/**
Quantity
    A measured amount (or an amount that can potentially be measured). Note that
    measured amounts include amounts that are not precisely quantified, including
    amounts involving arbitrary units and floating currencies.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class Quantity {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {decimal|undefined} [value],
     * @param {code|undefined} [comparator],
     * @param {String|undefined} [unit],
     * @param {uri|undefined} [system],
     * @param {code|undefined} [code],
    */
    constructor(
        {
            id,
            extension,
            value,
            comparator,
            unit,
            system,
            code,
        }
    ) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description The value of the measured amount. The value includes an implicit precision in
    the presentation of the value.
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'value', {
            enumerable: true,
            get: () => this.__data.value,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.value = valueProvided;
            }
        });

        /**
         * @description How the value should be understood and represented - whether the actual value
    is greater or less than the stated value due to measurement issues; e.g. if
    the comparator is "<" , then the real value is < stated value.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'comparator', {
            enumerable: true,
            get: () => this.__data.comparator,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.comparator = valueProvided;
            }
        });

        /**
         * @description A human-readable form of the unit.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'unit', {
            enumerable: true,
            get: () => this.__data.unit,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.unit = valueProvided;
            }
        });

        /**
         * @description The identification of the system that provides the coded form of the unit.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'system', {
            enumerable: true,
            get: () => this.__data.system,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.system = valueProvided;
            }
        });

        /**
         * @description A computer processable form of the unit in some unit representation system.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            get: () => this.__data.code,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.code = valueProvided;
            }
        });

        Object.assign(this, {
            id,
            extension,
            value,
            comparator,
            unit,
            system,
            code,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Quantity',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Quantity';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            value: this.value,
            comparator: this.comparator,
            unit: this.unit,
            system: this.system,
            code: this.code,
        };
    }
}

module.exports = Quantity;
