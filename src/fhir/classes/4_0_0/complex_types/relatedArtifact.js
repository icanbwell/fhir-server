// This file is auto-generated by generate_classes so do not edit manually

/**
RelatedArtifact
    Related artifacts such as additional documentation, justification, or
    bibliographic references.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class RelatedArtifact {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description The type of relationship to the related artifact.
         * @property {code}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.type = value;
            }
        });

        /**
         * @description A short label that can be used to reference the citation from elsewhere in the
    containing artifact, such as a footnote index.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'label', {
            enumerable: true,
            get: () => this.__data.label,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.label = value;
            }
        });

        /**
         * @description A brief description of the document or knowledge resource being referenced,
    suitable for display to a consumer.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'display', {
            enumerable: true,
            get: () => this.__data.display,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.display = value;
            }
        });

        /**
         * @description A bibliographic citation for the related artifact. This text SHOULD be
    formatted according to an accepted citation format.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'citation', {
            enumerable: true,
            get: () => this.__data.citation,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.citation = value;
            }
        });

        /**
         * @description A url for the artifact that can be followed to access the actual content.
         * @property {url|undefined}
        */
        Object.defineProperty(this, 'url', {
            enumerable: true,
            get: () => this.__data.url,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.url = value;
            }
        });

        /**
         * @description The document being referenced, represented as an attachment. This is exclusive
    with the resource element.
         * @property {Attachment|undefined}
        */
        Object.defineProperty(this, 'document', {
            enumerable: true,
            get: () => this.__data.document,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Attachment = require('../complex_types/attachment.js');
                this.__data.document = new Attachment(value);
            }
        });

        /**
         * @description The related resource, such as a library, value set, profile, or other
    knowledge resource.
         * @property {canonical|undefined}
        */
        Object.defineProperty(this, 'resource', {
            enumerable: true,
            get: () => this.__data.resource,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.resource = value;
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'RelatedArtifact',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'RelatedArtifact';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            type: this.type,
            label: this.label,
            display: this.display,
            citation: this.citation,
            url: this.url,
            document: this.document && this.document.toJSON(),
            resource: this.resource,
        };
    }
}

module.exports = RelatedArtifact;
