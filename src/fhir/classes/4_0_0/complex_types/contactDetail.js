// This file is auto-generated by generate_classes so do not edit manually

/**
ContactDetail
    Specifies contact information for a person or organization.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class ContactDetail {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description The name of an individual to contact.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'name', {
            enumerable: true,
            get: () => this.__data.name,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.name = value;
            }
        });

        /**
         * @description The contact details for the individual (if a name was provided) or the
    organization.
         * @property {ContactPoint[]|undefined}
        */
        Object.defineProperty(this, 'telecom', {
            enumerable: true,
            get: () => this.__data.telecom,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContactPoint = require('../complex_types/contactPoint.js');
                this.__data.telecom = Array.isArray(value) ? value.map(v => new ContactPoint(v)) : [new ContactPoint(value)];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ContactDetail',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ContactDetail';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            name: this.name,
            telecom: this.telecom && this.telecom.map(v => v.toJSON()),
        };
    }
}

module.exports = ContactDetail;
