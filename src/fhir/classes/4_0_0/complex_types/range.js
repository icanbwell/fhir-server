/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

/**
Range
    A set of ordered Quantities defined by a low and high limit.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class Range {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Quantity|undefined} [low],
     * @param {Quantity|undefined} [high],
    */
    constructor(
        {
            id,
            extension,
            low,
            high,
        }
    ) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description The low limit. The boundary is inclusive.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'low', {
            enumerable: true,
            get: () => this.__data.low,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.low = new Quantity(valueProvided);
            }
        });

        /**
         * @description The high limit. The boundary is inclusive.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'high', {
            enumerable: true,
            get: () => this.__data.high,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.high = new Quantity(valueProvided);
            }
        });

        Object.assign(this, {
            id,
            extension,
            low,
            high,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Range',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Range';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            low: this.low && this.low.toJSON(),
            high: this.high && this.high.toJSON(),
        };
    }
}

module.exports = Range;
