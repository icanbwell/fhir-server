/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

/**
Annotation
    A  text note which also  contains information about who made the statement and
    when.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class Annotation {
    constructor(
        {
            id,
            extension,
            authorReference,
            authorString,
            time,
            text,
        }
    ) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'authorReference', {
            enumerable: true,
            get: () => this.__data.authorReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.authorReference = new Reference(valueProvided);
            }
        });

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'authorString', {
            enumerable: true,
            get: () => this.__data.authorString,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.authorString = valueProvided;
            }
        });

        /**
         * @description Indicates when this particular annotation was made.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'time', {
            enumerable: true,
            get: () => this.__data.time,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.time = valueProvided;
            }
        });

        /**
         * @description The text of the annotation in markdown format.
         * @property {markdown}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.text = valueProvided;
            }
        });

        Object.assign(this, {
            id,
            extension,
            authorReference,
            authorString,
            time,
            text,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Annotation',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Annotation';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            authorReference: this.authorReference && this.authorReference.toJSON(),
            authorString: this.authorString,
            time: this.time,
            text: this.text,
        };
    }
}

module.exports = Annotation;
