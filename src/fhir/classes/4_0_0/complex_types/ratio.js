/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const {Resource} = require('../resources/resource');


/**
Ratio
    A relationship of two Quantity values - expressed as a numerator and a
    denominator.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class Ratio extends Resource {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Quantity|undefined} [numerator],
     * @param {Quantity|undefined} [denominator],
    */
    constructor(
        {
            id,
            extension,
            numerator,
            denominator,
        }
    ) {
        super({});
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description The value of the numerator.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'numerator', {
            enumerable: true,
            get: () => this.__data.numerator,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.numerator = new Quantity(valueProvided);
            }
        });

        /**
         * @description The value of the denominator.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'denominator', {
            enumerable: true,
            get: () => this.__data.denominator,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.denominator = new Quantity(valueProvided);
            }
        });

        Object.assign(this, {
            id,
            extension,
            numerator,
            denominator,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Ratio',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Ratio';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            numerator: this.numerator && this.numerator.toJSON(),
            denominator: this.denominator && this.denominator.toJSON(),
        };
    }
}

module.exports = Ratio;
