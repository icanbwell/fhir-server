/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

/**
TriggerDefinition
    A description of a triggering event. Triggering events can be named events,
    data events, or periodic, as determined by the type element.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class TriggerDefinition {
    constructor(
        {
            id,
            extension,
            type,
            name,
            timingTiming,
            timingReference,
            timingDate,
            timingDateTime,
            data,
            condition,
        }
    ) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description The type of triggering event.
         * @property {code}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.type = valueProvided;
            }
        });

        /**
         * @description A formal name for the event. This may be an absolute URI that identifies the
    event formally (e.g. from a trigger registry), or a simple relative URI that
    identifies the event in a local context.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'name', {
            enumerable: true,
            get: () => this.__data.name,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.name = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Timing|undefined}
        */
        Object.defineProperty(this, 'timingTiming', {
            enumerable: true,
            get: () => this.__data.timingTiming,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Timing = require('../backbone_elements/timing.js');
                this.__data.timingTiming = new Timing(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'timingReference', {
            enumerable: true,
            get: () => this.__data.timingReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.timingReference = new Reference(valueProvided);
            }
        });

        /**
         * @description None
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'timingDate', {
            enumerable: true,
            get: () => this.__data.timingDate,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.timingDate = valueProvided;
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'timingDateTime', {
            enumerable: true,
            get: () => this.__data.timingDateTime,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.timingDateTime = valueProvided;
            }
        });

        /**
         * @description The triggering data of the event (if this is a data trigger). If more than one
    data is requirement is specified, then all the data requirements must be true.
         * @property {DataRequirement[]|undefined}
        */
        Object.defineProperty(this, 'data', {
            enumerable: true,
            get: () => this.__data.data,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let DataRequirement = require('../complex_types/dataRequirement.js');
                this.__data.data = Array.isArray(valueProvided) ? valueProvided.map(v => new DataRequirement(v)) : [new DataRequirement(valueProvided)];
            }
        });

        /**
         * @description A boolean-valued expression that is evaluated in the context of the container
    of the trigger definition and returns whether or not the trigger fires.
         * @property {Expression|undefined}
        */
        Object.defineProperty(this, 'condition', {
            enumerable: true,
            get: () => this.__data.condition,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Expression = require('../complex_types/expression.js');
                this.__data.condition = new Expression(valueProvided);
            }
        });

        Object.assign(this, {
            id,
            extension,
            type,
            name,
            timingTiming,
            timingReference,
            timingDate,
            timingDateTime,
            data,
            condition,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'TriggerDefinition',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'TriggerDefinition';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            type: this.type,
            name: this.name,
            timingTiming: this.timingTiming && this.timingTiming.toJSON(),
            timingReference: this.timingReference && this.timingReference.toJSON(),
            timingDate: this.timingDate,
            timingDateTime: this.timingDateTime,
            data: this.data && this.data.map(v => v.toJSON()),
            condition: this.condition && this.condition.toJSON(),
        };
    }
}

module.exports = TriggerDefinition;
