/* eslint-disable no-unused-vars */
/* eslint-disable no-trailing-spaces */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');
const Resource = require('../resources/resource');
const async = require('async');


/**
DataRequirement
    Describes a required data item for evaluation in terms of the type of data,
    and optional code or date-based filters of the data.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class DataRequirement extends Element {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {code} type,
     * @param {canonical[]|undefined} [profile],
     * @param {CodeableConcept|undefined} [subjectCodeableConcept],
     * @param {Reference|undefined} [subjectReference],
     * @param {String[]|undefined} [mustSupport],
     * @param {DataRequirementCodeFilter[]|undefined} [codeFilter],
     * @param {DataRequirementDateFilter[]|undefined} [dateFilter],
     * @param {Int|undefined} [limit],
     * @param {DataRequirementSort[]|undefined} [sort],
    */
    constructor(
        {
            id,
            extension,
            type,
            profile,
            subjectCodeableConcept,
            subjectReference,
            mustSupport,
            codeFilter,
            dateFilter,
            limit,
            sort
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.id = undefined;
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.extension = undefined;
                    return;
                }
                const Extension = require('../complex_types/extension.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.extension = FhirResourceCreator.createArray(valueProvided, Extension);
            }
        });

        /**
         * @description The type of the required data, specified as the type name of a resource. For
    profiles, this value is set to the type of the base resource of the profile.
         * @property {code}
        */
        Object.defineProperty(this, 'type', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.type = undefined;
                    return;
                }
                this.__data.type = valueProvided;
            }
        });

        /**
         * @description The profile of the required data, specified as the uri of the profile
    definition.
         * @property {canonical[]|undefined}
        */
        Object.defineProperty(this, 'profile', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.profile,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.profile = undefined;
                    return;
                }
                this.__data.profile = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => v) : [valueProvided];
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'subjectCodeableConcept', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.subjectCodeableConcept,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.subjectCodeableConcept = undefined;
                    return;
                }
                const CodeableConcept = require('../complex_types/codeableConcept.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.subjectCodeableConcept = FhirResourceCreator.create(valueProvided, CodeableConcept);
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'subjectReference', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.subjectReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.subjectReference = undefined;
                    return;
                }
                const Reference = require('../complex_types/reference.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.subjectReference = FhirResourceCreator.create(valueProvided, Reference);
            }
        });

        /**
         * @description Indicates that specific elements of the type are referenced by the knowledge
    module and must be supported by the consumer in order to obtain an effective
    evaluation. This does not mean that a value is required for this element, only
    that the consuming system must understand the element and be able to provide
    values for it if they are available.
    
    The value of mustSupport SHALL be a FHIRPath resolveable on the type of the
    DataRequirement. The path SHALL consist only of identifiers, constant
    indexers, and .resolve() (see the [Simple FHIRPath
    Profile](fhirpath.html#simple) for full details).
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'mustSupport', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.mustSupport,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.mustSupport = undefined;
                    return;
                }
                this.__data.mustSupport = Array.isArray(valueProvided) ? valueProvided.filter(v => v).map(v => v) : [valueProvided];
            }
        });

        /**
         * @description Code filters specify additional constraints on the data, specifying the value
    set of interest for a particular element of the data. Each code filter defines
    an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
         * @property {DataRequirementCodeFilter[]|undefined}
        */
        Object.defineProperty(this, 'codeFilter', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.codeFilter,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.codeFilter = undefined;
                    return;
                }
                const DataRequirementCodeFilter = require('../complex_types/dataRequirementCodeFilter.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.codeFilter = FhirResourceCreator.createArray(valueProvided, DataRequirementCodeFilter);
            }
        });

        /**
         * @description Date filters specify additional constraints on the data in terms of the
    applicable date range for specific elements. Each date filter specifies an
    additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
         * @property {DataRequirementDateFilter[]|undefined}
        */
        Object.defineProperty(this, 'dateFilter', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.dateFilter,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.dateFilter = undefined;
                    return;
                }
                const DataRequirementDateFilter = require('../complex_types/dataRequirementDateFilter.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.dateFilter = FhirResourceCreator.createArray(valueProvided, DataRequirementDateFilter);
            }
        });

        /**
         * @description Specifies a maximum number of results that are required (uses the _count
    search parameter).
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'limit', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.limit,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.limit = undefined;
                    return;
                }
                this.__data.limit = valueProvided;
            }
        });

        /**
         * @description Specifies the order of the results to be returned.
         * @property {DataRequirementSort[]|undefined}
        */
        Object.defineProperty(this, 'sort', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.sort,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    this.__data.sort = undefined;
                    return;
                }
                const DataRequirementSort = require('../complex_types/dataRequirementSort.js');
                const {FhirResourceCreator} = require('../../../fhirResourceCreator');
                this.__data.sort = FhirResourceCreator.createArray(valueProvided, DataRequirementSort);
            }
        });




        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            type,
            profile,
            subjectCodeableConcept,
            subjectReference,
            mustSupport,
            codeFilter,
            dateFilter,
            limit,
            sort
        });

    }



    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            type: this.type,
            profile: this.profile,
            subjectCodeableConcept: this.subjectCodeableConcept && this.subjectCodeableConcept.toJSON(),
            subjectReference: this.subjectReference && this.subjectReference.toJSON(),
            mustSupport: this.mustSupport,
            codeFilter: this.codeFilter && this.codeFilter.map(v => v.toJSON()),
            dateFilter: this.dateFilter && this.dateFilter.map(v => v.toJSON()),
            limit: this.limit,
            sort: this.sort && this.sort.map(v => v.toJSON())
        });
    }

    /**
     * Returns JSON representation of entity
     * @param {function(Reference): Promise<Reference>} fnUpdateReferenceAsync
     * @return {void}
     */
    async updateReferencesAsync({fnUpdateReferenceAsync}) {
            if (this.extension) { await async.each(this.extension, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync})); }
            if (this.subjectCodeableConcept) { await this.subjectCodeableConcept.updateReferencesAsync({fnUpdateReferenceAsync}); }
            if (this.subjectReference) { await this.subjectReference.updateReferencesAsync({fnUpdateReferenceAsync}); }
            if (this.codeFilter) { await async.each(this.codeFilter, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync})); }
            if (this.dateFilter) { await async.each(this.dateFilter, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync})); }
            if (this.sort) { await async.each(this.sort, async v => await v.updateReferencesAsync({fnUpdateReferenceAsync})); }
    }

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSONInternal() {
        const {removeNull} = require('../../../../utils/nullRemover');
        const json = {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSONInternal()),
            type: this.type,
            profile: this.profile,
            subjectCodeableConcept: this.subjectCodeableConcept && this.subjectCodeableConcept.toJSONInternal(),
            subjectReference: this.subjectReference && this.subjectReference.toJSONInternal(),
            mustSupport: this.mustSupport,
            codeFilter: this.codeFilter && this.codeFilter.map(v => v.toJSONInternal()),
            dateFilter: this.dateFilter && this.dateFilter.map(v => v.toJSONInternal()),
            limit: this.limit,
            sort: this.sort && this.sort.map(v => v.toJSONInternal())
        };



        return removeNull(json);
    }
}

module.exports = DataRequirement;
