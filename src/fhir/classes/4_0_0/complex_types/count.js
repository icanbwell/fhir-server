/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

/**
Count
    A measured amount (or an amount that can potentially be measured). Note that
    measured amounts include amounts that are not precisely quantified, including
    amounts involving arbitrary units and floating currencies.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class Count {
    constructor(
        {
            value,
            comparator,
            unit,
            system,
            code,
        }
    ) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The value of the measured amount. The value includes an implicit precision in
    the presentation of the value.
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'value', {
            enumerable: true,
            get: () => this.__data.value,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.value = valueProvided;
            }
        });

        /**
         * @description How the value should be understood and represented - whether the actual value
    is greater or less than the stated value due to measurement issues; e.g. if
    the comparator is "<" , then the real value is < stated value.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'comparator', {
            enumerable: true,
            get: () => this.__data.comparator,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.comparator = valueProvided;
            }
        });

        /**
         * @description A human-readable form of the unit.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'unit', {
            enumerable: true,
            get: () => this.__data.unit,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.unit = valueProvided;
            }
        });

        /**
         * @description The identification of the system that provides the coded form of the unit.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'system', {
            enumerable: true,
            get: () => this.__data.system,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.system = valueProvided;
            }
        });

        /**
         * @description A computer processable form of the unit in some unit representation system.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            get: () => this.__data.code,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.code = valueProvided;
            }
        });

        Object.assign(this, {
            value,
            comparator,
            unit,
            system,
            code,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Count',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Count';
    }

    toJSON() {
        return {
            value: this.value,
            comparator: this.comparator,
            unit: this.unit,
            system: this.system,
            code: this.code,
        };
    }
}

module.exports = Count;
