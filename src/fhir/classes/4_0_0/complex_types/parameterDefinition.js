/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

/**
ParameterDefinition
    The parameters to the module. This collection specifies both the input and
    output parameters. Input parameters are provided by the caller as part of the
    $evaluate operation. Output parameters are included in the GuidanceResponse.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class ParameterDefinition {
    /**
     * @param {String|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {code|undefined} [name],
     * @param {code} use,
     * @param {Int|undefined} [min],
     * @param {String|undefined} [max],
     * @param {String|undefined} [documentation],
     * @param {code} type,
     * @param {canonical|undefined} [profile],
    */
    constructor(
        {
            id,
            extension,
            name,
            use,
            min,
            max,
            documentation,
            type,
            profile,
        }
    ) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description The name of the parameter used to allow access to the value of the parameter
    in evaluation contexts.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'name', {
            enumerable: true,
            get: () => this.__data.name,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.name = valueProvided;
            }
        });

        /**
         * @description Whether the parameter is input or output for the module.
         * @property {code}
        */
        Object.defineProperty(this, 'use', {
            enumerable: true,
            get: () => this.__data.use,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.use = valueProvided;
            }
        });

        /**
         * @description The minimum number of times this parameter SHALL appear in the request or
    response.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'min', {
            enumerable: true,
            get: () => this.__data.min,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.min = valueProvided;
            }
        });

        /**
         * @description The maximum number of times this element is permitted to appear in the request
    or response.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'max', {
            enumerable: true,
            get: () => this.__data.max,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.max = valueProvided;
            }
        });

        /**
         * @description A brief discussion of what the parameter is for and how it is used by the
    module.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'documentation', {
            enumerable: true,
            get: () => this.__data.documentation,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.documentation = valueProvided;
            }
        });

        /**
         * @description The type of the parameter.
         * @property {code}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.type = valueProvided;
            }
        });

        /**
         * @description If specified, this indicates a profile that the input data must conform to, or
    that the output data will conform to.
         * @property {canonical|undefined}
        */
        Object.defineProperty(this, 'profile', {
            enumerable: true,
            get: () => this.__data.profile,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null) {
                    return;
                }
                this.__data.profile = valueProvided;
            }
        });

        Object.assign(this, {
            id,
            extension,
            name,
            use,
            min,
            max,
            documentation,
            type,
            profile,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ParameterDefinition',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ParameterDefinition';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            name: this.name,
            use: this.use,
            min: this.min,
            max: this.max,
            documentation: this.documentation,
            type: this.type,
            profile: this.profile,
        };
    }
}

module.exports = ParameterDefinition;
