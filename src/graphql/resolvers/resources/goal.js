// ------ This code is generated by a code generator.  Do not edit. ------

// noinspection JSUnusedLocalSymbols
module.exports = {
    Query: {
        // noinspection JSUnusedLocalSymbols

        goal: async (parent, args, context, info) => {
            return await context.dataApi.getResourcesBundle(
                parent,
                args,
                context,
                info,
                'Goal'
            );
        }
    },
    GoalSubject: {
        __resolveType(obj, context, info) {
            return context.dataApi.resolveType(obj, context, info);
        }
    },
    GoalExpressedBy: {
        __resolveType(obj, context, info) {
            return context.dataApi.resolveType(obj, context, info);
        }
    },
    GoalAddresses: {
        __resolveType(obj, context, info) {
            return context.dataApi.resolveType(obj, context, info);
        }
    },
    Goal: {
        // noinspection JSUnusedLocalSymbols

        subject: async (parent, args, context, info) => {
            return await context.dataApi.findResourceByReference(
                parent,
                args,
                context,
                info,
                parent.subject);
        },
        // noinspection JSUnusedLocalSymbols

        expressedBy: async (parent, args, context, info) => {
            return await context.dataApi.findResourceByReference(
                parent,
                args,
                context,
                info,
                parent.expressedBy);
        },
        // noinspection JSUnusedLocalSymbols

        addresses: async (parent, args, context, info) => {
            return await context.dataApi.findResourcesByReference(
                parent,
                args,
                context,
                info,
                parent.addresses);
        },
        // noinspection JSUnusedLocalSymbols

        outcomeReference: async (parent, args, context, info) => {
            return await context.dataApi.findResourcesByReference(
                parent,
                args,
                context,
                info,
                parent.outcomeReference);
        }
    }
};
