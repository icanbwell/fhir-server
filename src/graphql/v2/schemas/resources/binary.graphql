# This file is auto-generated by generate_classes so do not edit manually
# import id from "../simple_types/id.graphql"
# import Meta from "../complex_types/meta.graphql"
# import uri from "../simple_types/uri.graphql"
# import code from "../simple_types/code.graphql"
# import Resource from "../resources/resource.graphql"
# import base64Binary from "../simple_types/base64Binary.graphql"



"""
Binary
    A resource that represents the data of a single raw artifact as digital
    content accessible in its native format.  A Binary resource can contain any
    content, whether text, image, pdf, zip archive, etc.
    If the element is present, it must have either a @value, an @id, or extensions
"""
type Binary {
    resourceType: String
    """
    The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
    """
    id: id        
    """
    The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
    """
    meta: Meta        
    """
    A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
    """
    implicitRules: uri        
    """
    The base language in which the resource is written.
    """
    language: code        
    """
    MimeType of the binary content represented as a standard MimeType (BCP 13).
    """
    contentType: code!        
    """
    This element identifies another resource that can be used as a proxy of the
    security sensitivity to use when deciding and enforcing access control rules
    for the Binary resource. Given that the Binary resource contains very few
    elements that can be used to determine the sensitivity of the data and
    relationships to individuals, the referenced resource stands in as a proxy
    equivalent for this purpose. This referenced resource may be related to the
    Binary (e.g. Media, DocumentReference), or may be some non-related Resource
    purely as a security proxy. E.g. to identify that the binary resource relates
    to a patient, and access should only be granted to applications that have
    access to the patient.
    """
    securityContext: Resource        
    """
    The actual content, base64 encoded.
    """
    data: base64Binary        
}

type BinaryBundleEntry {
    """
    None
    """
    id: String
    """
    A series of links that provide context to this entry.
    """
    link: [BundleLink]
    """
    The Absolute URL for the resource.  The fullUrl SHALL NOT disagree with the id
    in the resource - i.e. if the fullUrl is not a urn:uuid, the URL shall be
    version-independent URL consistent with the Resource.id. The fullUrl is a
    version independent reference to the resource. The fullUrl element SHALL have
    a value except that:
    * fullUrl can be empty on a POST (although it does not need to when specifying
    a temporary id for reference in the bundle)
    * Results from operations might involve resources that are not identified.
    """
    fullUrl: uri
    """
    Binary resource
    """
    resource: Binary

    """
    Information about the search process that lead to the creation of this entry.
    """
    search: BundleSearch
    """
    Additional information about how this entry should be processed as part of a
    transaction or batch.  For history, it shows how the entry was processed to
    create the version contained in the entry.
    """
    request: BundleRequest
    """
    Indicates the results of processing the corresponding 'request' entry in the
    batch or transaction being responded to or what the results of an operation
    where when returning history.
    """
    response: BundleResponse
}

type BinaryBundle {
    id: String
    meta: Meta
    identifier: [Identifier]
    type: code
    timestamp: instant
    total: Int
    entry: [BinaryBundleEntry]
}