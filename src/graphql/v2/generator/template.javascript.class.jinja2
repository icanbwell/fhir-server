// This file is auto-generated by generate_classes so do not edit manually
{% macro lower_case_first_letter(text) %}
    {{- text[0]|lower }}{{ text[1:] -}}
{% endmacro %}
{% macro upper_case_first_letter(text) %}
    {{- text[0]|upper }}{{ text[1:] -}}
{% endmacro %}

/**
{{ fhir_entity.fhir_name }}
{% for documentation_item in fhir_entity.documentation %}
    {{ documentation_item | wordwrap(78) | replace('\n', '\n    ') | replace('\r', '\n    ') }}
{% endfor %}
*/
class {{ fhir_entity.cleaned_name }} {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

{% for property in fhir_entity.properties %}
        /**
         * @description {{ property.documentation[0] | wordwrap(78) | replace('\n', '\n    ') | replace('\r', '\n    ') }}
         * @property {{- ' {' -}}
    {% if property.cleaned_type == "Extension" %}
        {{- 'Extension' -}}
    {% elif property.is_code %}
        {{- 'code' -}}
    {% elif property.reference_target_resources -%}
        {% if property.reference_target_resources | length > 1 %}
            {{- fhir_entity.cleaned_name }}{{ upper_case_first_letter(property.name) -}}
        {% else %}
            {{- property.reference_target_resources_names [0] -}}
        {% endif %}
    {% else %}
        {{- property.cleaned_type | replace(".","") -}}
    {% endif %}
    {% if property.is_list -%}
        {{ '[]' -}}
    {% endif -%}
    {% if property.optional -%}
        {{ '|undefined' -}}
    {% endif %}
    {{- '}' }}
        {{ '*/' }}
        Object.defineProperty(this, '{{ property.name -}}', {
            enumerable: true,
            get: () => this.__data.{{ property.name -}},
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
    {% if property.is_basic_type %}
                this.__data.{{ property.name }} = value;
    {%  else %}
        {% if property.is_resource %}
            {%  if property.cleaned_type != fhir_entity.cleaned_name %}
                let {{ property.cleaned_type | replace(".","") }} = require('../resources/{{ lower_case_first_letter(property.type_snake_case) }}.js');
            {%  endif %}
                this.__data.{{ property.name }} = new {{ property.cleaned_type | replace(".","") }}(value);
        {% elif property.is_code %}
                this.__data.{{ property.name }} = value;
        {% elif property.is_extension %}
            {%  if property.cleaned_type != fhir_entity.cleaned_name %}
                let {{ property.cleaned_type | replace(".","") }} = require('../extensions/{{ lower_case_first_letter(property.type_snake_case) }}.js');
            {%  endif %}
                this.__data.{{ property.name }} = new {{ property.cleaned_type | replace(".","") }}(value);
        {% elif property.fhir_type == "BackboneElement" %}
            {%  if property.cleaned_type != fhir_entity.cleaned_name %}
                let {{ property.cleaned_type | replace(".","") }} = require('../backbone_elements/{{ lower_case_first_letter(property.type_snake_case) }}.js');
            {%  endif %}
                this.__data.{{ property.name }} = new {{ property.cleaned_type | replace(".","") }}(value);
        {% elif property.is_complex or property.fhir_type == "Element" %}
            {%  if property.cleaned_type != fhir_entity.cleaned_name %}
                let {{ property.cleaned_type | replace(".","") }} = require('../complex_types/{{ lower_case_first_letter(property.type_snake_case) }}.js');
            {%  endif %}
                this.__data.{{ property.name }} = new {{ property.cleaned_type | replace(".","") }}(value);
        {% elif property.type_snake_case in ["string", "boolean", "integer", "positiveInt"] %}
                this.__data.{{ property.name }} = value;
        {%  else %}
                let {{ property.cleaned_type | replace(".","") }} = require('../simple_types/{{ lower_case_first_letter(property.type_snake_case) }}.js');
                // eslint-disable-next-line new-cap
                this.__data.{{ property.name }} = new {{ property.cleaned_type | replace(".","") }}(value);
    {% endif %}
    {% endif %}
            }
        });

{% endfor %}
        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: '{{ fhir_entity.cleaned_name }}',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return '{{ fhir_entity.cleaned_name }}';
    }

    toJSON() {
        return {
        {% if fhir_entity.is_resource %}
            resourceType: this.resourceType,
        {%  endif %}
{% for property in fhir_entity.properties %}
    {% if property.is_basic_type %}
            {{ property.name -}}: this.{{ property.name -}},
    {%  else %}
            {{ property.name -}}: this.{{ property.name }} && this.{{ property.name -}}.toJSON(),
    {% endif %}
{% endfor %}
        };
    }
}

module.exports = {{ fhir_entity.cleaned_name }};

