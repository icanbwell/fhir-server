/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually
{% macro lower_case_first_letter(text) %}
    {{- text[0]|lower }}{{ text[1:] -}}
{% endmacro %}
{% macro upper_case_first_letter(text) %}
    {{- text[0]|upper }}{{ text[1:] -}}
{% endmacro %}

{% if fhir_entity.cleaned_name == 'Resource' %}
const ResourceContainer = require('../simple_types/resourceContainer');
{%  elif fhir_entity.is_resource %}
const Resource = require('../resources/resource');
{% elif fhir_entity.cleaned_name == 'Element' %}
{%  else %}
const Element = require('../complex_types/element');
{%  endif %}


/**
{{ fhir_entity.fhir_name }}
{% for documentation_item in fhir_entity.documentation %}
    {{ documentation_item | wordwrap(78) | replace('\n', '\n    ') | replace('\r', '\n    ') }}
{% endfor %}
*/
{% if fhir_entity.cleaned_name == 'Resource' %}
class {{ fhir_entity.cleaned_name }} extends ResourceContainer {
{%  elif fhir_entity.is_resource %}
class {{ fhir_entity.cleaned_name }} extends Resource {
{% elif fhir_entity.cleaned_name == 'Element' %}
class {{ fhir_entity.cleaned_name }} {
{%  else %}
class {{ fhir_entity.cleaned_name }} extends Element {
{%  endif %}
    /**
{% for property in fhir_entity.properties %}
     * @param {{- ' {' -}}
    {% if property.cleaned_type == "Extension" %}
        {{- 'Extension' -}}
    {% elif property.is_code %}
        {{- 'code' -}}
    {% else %}
        {{- property.cleaned_type | replace(".","") -}}
    {% endif %}
    {% if property.is_list -%}
        {{ '[]' -}}
    {% endif -%}
    {% if property.optional -%}
        {{ '|undefined' -}}
    {% endif %}
    {{- '} ' -}}
    {% if property.optional -%}
        {{ '[' -}}
    {% endif %}
    {{- property.javascript_clean_name -}}
    {% if property.optional -%}
        {{ ']' -}}
    {% endif %},
{%  endfor %}
    */
    constructor(
        {
{% for property in fhir_entity.properties %}
    {%  if property.name != property.javascript_clean_name %}
            '{{ property.name -}}': {{ property.javascript_clean_name -}},
    {%  else %}
            {{ property.name -}},
    {%  endif %}
{% endfor %}
        }
    ) {
{% if fhir_entity.cleaned_name == 'Element' %}
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
            value: {},
        });
{%  else %}
        super({});
{% endif %}

        // ---- Define getters and setters as enumerable ---

{% for property in fhir_entity.properties %}
        /**
         * @description {{ property.documentation[0] | wordwrap(78) | replace('\n', '\n    ') | replace('\r', '\n    ') }}
         * @property {{- ' {' -}}
    {% if property.cleaned_type == "Extension" %}
        {{- 'Extension' -}}
    {% elif property.is_code %}
        {{- 'code' -}}
    {% else %}
        {{- property.cleaned_type | replace(".","") -}}
    {% endif %}
    {% if property.is_list -%}
        {{ '[]' -}}
    {% endif -%}
    {% if property.optional -%}
        {{ '|undefined' -}}
    {% endif %}
    {{- '}' }}
        {{ '*/' }}
        Object.defineProperty(this, '{{ property.name -}}', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.{{ property.name -}},
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
    {% if property.is_resource %}
            {%  if property.cleaned_type != fhir_entity.cleaned_name %}
                let {{ property.cleaned_type | replace(".","") }} = require('../resources/{{ lower_case_first_letter(property.type_snake_case) }}.js');
            {%  endif %}
    {% elif property.is_code %}
    {% elif property.is_extension %}
            {%  if property.cleaned_type != fhir_entity.cleaned_name %}
                let {{ property.cleaned_type | replace(".","") }} = require('../extensions/{{ lower_case_first_letter(property.type_snake_case) }}.js');
            {%  endif %}
    {% elif property.fhir_type == "BackboneElement" %}
            {%  if property.cleaned_type != fhir_entity.cleaned_name %}
                let {{ property.cleaned_type | replace(".","") }} = require('../backbone_elements/{{ lower_case_first_letter(property.type_snake_case) }}.js');
            {%  endif %}
    {% elif property.cleaned_type == "ResourceContainer" %}
            {%  if property.cleaned_type != fhir_entity.cleaned_name %}
                let {{ property.cleaned_type | replace(".","") }} = require('../simple_types/{{ lower_case_first_letter(property.type_snake_case) }}.js');
            {%  endif %}
    {% elif property.is_complex or property.fhir_type == "Element" %}
            {%  if property.cleaned_type != fhir_entity.cleaned_name %}
                let {{ property.cleaned_type | replace(".","") }} = require('../complex_types/{{ lower_case_first_letter(property.type_snake_case) }}.js');
            {%  endif %}
{#        {% elif property.type_snake_case in ["string", "boolean", "integer", "positiveInt"] %}#}
{#                this.__data.{{ property.name }} = value;#}
    {% endif %}
    {%  if property.is_resource or property.is_extension or property.fhir_type == "BackboneElement" or property.is_complex or property.fhir_type == "Element" %}
            {% if property.is_list %}
                this.__data.{{ property.name }} = Array.isArray(valueProvided) ? valueProvided.map(v => new {{ property.cleaned_type | replace(".","") }}(v)) : [new {{ property.cleaned_type | replace(".","") }}(valueProvided)];
            {%  else %}
                this.__data.{{ property.name }} = new {{ property.cleaned_type | replace(".","") }}(valueProvided);
            {% endif %}
    {%  elif property.cleaned_type == "ResourceContainer" %}
                const {getResource} = require('../../../../operations/common/getResource');
            {% if property.is_list %}
                if (Array.isArray(valueProvided)) {
                    this.__data.{{ property.name }} = valueProvided.map(v => {
                        const ResourceCreator = getResource('4_0_0', v.resourceType);
                        return new ResourceCreator(v);
                    })
                } else {
                const ResourceCreator = getResource('4_0_0', valueProvided.resourceType);
                this.__data.{{ property.name }} = [new ResourceCreator(valueProvided)];
                }
            {%  else %}
                const ResourceCreator = getResource('4_0_0', valueProvided.resourceType);
                this.__data.{{ property.name }} = new ResourceCreator(valueProvided);
            {% endif %}
    {%  else %}
            {% if property.is_list %}
                this.__data.{{ property.name }} = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            {%  else %}
                this.__data.{{ property.name }} = valueProvided;
            {% endif %}
    {%  endif %}
            }
        });

{% endfor %}
        // --- Now copy properties from passed in object ----
        Object.assign(this, {
{% for property in fhir_entity.properties %}
    {%  if property.name != property.javascript_clean_name %}
            '{{ property.name -}}': {{ property.javascript_clean_name -}},
    {%  else %}
            {{ property.name -}},
    {%  endif %}
{% endfor %}
        });

{% if fhir_entity.is_resource %}
        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: '{{ fhir_entity.cleaned_name }}',
            enumerable: true,
            writable: false,
            configurable: true
        });
{%  endif %}
    }

{% if fhir_entity.is_resource %}
    static get resourceType() {
        return '{{ fhir_entity.cleaned_name }}';
    }
{%  endif %}

{% if fhir_entity.is_resource %}
    /**
     * @description Creates a blank new resource
     * @returns {{- ' {' -}}{{ fhir_entity.cleaned_name }} {{- '}' }}
{% for property in fhir_entity.properties %}
     * @param {{- ' {' -}}
    {% if property.cleaned_type == "Extension" %}
        {{- 'Extension' -}}
    {% elif property.is_code %}
        {{- 'code' -}}
    {% else %}
        {{- property.cleaned_type | replace(".","") -}}
    {% endif %}
    {% if property.is_list -%}
        {{ '[]' -}}
    {% endif -%}
    {% if property.optional -%}
        {{ '|undefined' -}}
    {% endif %}
    {{- '} ' -}}
    {% if property.optional -%}
        {{ '[' -}}
    {% endif %}
    {{- property.javascript_clean_name -}}
    {% if property.optional -%}
        {{ ']' -}}
    {% endif %},
{%  endfor %}
    */
    create(
            {
{% for property in fhir_entity.properties %}
    {%  if property.name != property.javascript_clean_name %}
            '{{ property.name -}}': {{ property.javascript_clean_name -}},
    {%  else %}
            {{ property.name -}},
    {%  endif %}
{% endfor %}
        }
    ) {
        return new {{ fhir_entity.cleaned_name }}({
{% for property in fhir_entity.properties %}
    {%  if property.name != property.javascript_clean_name %}
            '{{ property.name -}}': {{ property.javascript_clean_name -}},
    {%  else %}
            {{ property.name -}},
    {%  endif %}
{% endfor %}
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {{- ' {' -}}{{ fhir_entity.cleaned_name }} {{- '}' }}
    */
    copy() {
        return new {{ fhir_entity.cleaned_name }}(this.toJSON());
    }

{%  endif %}

    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
        {% if fhir_entity.is_resource %}
            resourceType: this.resourceType,
        {%  endif %}
{% for property in fhir_entity.properties %}
    {%  if property.is_resource or property.is_extension or property.cleaned_type == "ResourceContainer" or property.fhir_type == "BackboneElement" or property.is_complex or property.fhir_type == "Element" %}
        {% if property.is_list %}
            {{ property.name -}}: this.{{ property.name }} && this.{{ property.name -}}.map(v => v.toJSON()),
        {%  else %}
            {{ property.name -}}: this.{{ property.name }} && this.{{ property.name -}}.toJSON(),
        {% endif %}
    {%  else %}
            {{ property.name -}}: this.{{ property.name -}},
    {% endif %}
{% endfor %}
        });
    }
}

module.exports = {{ fhir_entity.cleaned_name }};

