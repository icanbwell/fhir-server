// This file is auto-generated by generate_classes so do not edit manually

/**
Slot
    A slot of time on a schedule that may be available for booking appointments.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class Slot {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.implicitRules = value;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.contained = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description External Ids for this item.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(value) ? value.map(v => new Identifier(v)) : [new Identifier(value)];
            }
        });

        /**
         * @description A broad categorization of the service that is to be performed during this
    appointment.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'serviceCategory', {
            enumerable: true,
            get: () => this.__data.serviceCategory,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.serviceCategory = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description The type of appointments that can be booked into this slot (ideally this would
    be an identifiable service - which is at a location, rather than the location
    itself). If provided then this overrides the value provided on the
    availability resource.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'serviceType', {
            enumerable: true,
            get: () => this.__data.serviceType,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.serviceType = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description The specialty of a practitioner that would be required to perform the service
    requested in this appointment.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'specialty', {
            enumerable: true,
            get: () => this.__data.specialty,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.specialty = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description The style of appointment or patient that may be booked in the slot (not
    service type).
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'appointmentType', {
            enumerable: true,
            get: () => this.__data.appointmentType,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.appointmentType = new CodeableConcept(value);
            }
        });

        /**
         * @description The schedule resource that this slot defines an interval of status
    information.
         * @property {Schedule}
        */
        Object.defineProperty(this, 'schedule', {
            enumerable: true,
            get: () => this.__data.schedule,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.schedule = new Reference(value);
            }
        });

        /**
         * @description busy | free | busy-unavailable | busy-tentative | entered-in-error.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.status = value;
            }
        });

        /**
         * @description Date/Time that the slot is to begin.
         * @property {instant}
        */
        Object.defineProperty(this, 'start', {
            enumerable: true,
            get: () => this.__data.start,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.start = value;
            }
        });

        /**
         * @description Date/Time that the slot is to conclude.
         * @property {instant}
        */
        Object.defineProperty(this, 'end', {
            enumerable: true,
            get: () => this.__data.end,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.end = value;
            }
        });

        /**
         * @description This slot has already been overbooked, appointments are unlikely to be
    accepted for this time.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'overbooked', {
            enumerable: true,
            get: () => this.__data.overbooked,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.overbooked = value;
            }
        });

        /**
         * @description Comments on the slot to describe any extended information. Such as custom
    constraints on the slot.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'comment', {
            enumerable: true,
            get: () => this.__data.comment,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.comment = value;
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Slot',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Slot';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            serviceCategory: this.serviceCategory && this.serviceCategory.map(v => v.toJSON()),
            serviceType: this.serviceType && this.serviceType.map(v => v.toJSON()),
            specialty: this.specialty && this.specialty.map(v => v.toJSON()),
            appointmentType: this.appointmentType && this.appointmentType.toJSON(),
            schedule: this.schedule && this.schedule.toJSON(),
            status: this.status,
            start: this.start,
            end: this.end,
            overbooked: this.overbooked,
            comment: this.comment,
        };
    }
}

module.exports = Slot;
