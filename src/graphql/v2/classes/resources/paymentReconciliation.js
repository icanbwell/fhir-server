// This file is auto-generated by generate_classes so do not edit manually

/**
PaymentReconciliation
    This resource provides the details including amount of a payment and allocates
    the payment items being paid.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class PaymentReconciliation {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.id = new id(value);
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.implicitRules = new uri(value);
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                // eslint-disable-next-line new-cap
                this.__data.contained = new ResourceContainer(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description A unique identifier assigned to this payment reconciliation.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = new Identifier(value);
            }
        });

        /**
         * @description The status of the resource instance.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.status = value;
            }
        });

        /**
         * @description The period of time for which payments have been gathered into this bulk
    payment for settlement.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'period', {
            enumerable: true,
            get: () => this.__data.period,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.period = new Period(value);
            }
        });

        /**
         * @description The date when the resource was created.
         * @property {dateTime}
        */
        Object.defineProperty(this, 'created', {
            enumerable: true,
            get: () => this.__data.created,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let dateTime = require('../simple_types/dateTime.js');
                // eslint-disable-next-line new-cap
                this.__data.created = new dateTime(value);
            }
        });

        /**
         * @description The party who generated the payment.
         * @property {Organization|undefined}
        */
        Object.defineProperty(this, 'paymentIssuer', {
            enumerable: true,
            get: () => this.__data.paymentIssuer,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.paymentIssuer = new Reference(value);
            }
        });

        /**
         * @description Original request resource reference.
         * @property {Task|undefined}
        */
        Object.defineProperty(this, 'request', {
            enumerable: true,
            get: () => this.__data.request,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.request = new Reference(value);
            }
        });

        /**
         * @description The practitioner who is responsible for the services rendered to the patient.
         * @property {PaymentReconciliationRequestor|undefined}
        */
        Object.defineProperty(this, 'requestor', {
            enumerable: true,
            get: () => this.__data.requestor,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.requestor = new Reference(value);
            }
        });

        /**
         * @description The outcome of a request for a reconciliation.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'outcome', {
            enumerable: true,
            get: () => this.__data.outcome,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.outcome = value;
            }
        });

        /**
         * @description A human readable description of the status of the request for the
    reconciliation.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'disposition', {
            enumerable: true,
            get: () => this.__data.disposition,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.disposition = value;
            }
        });

        /**
         * @description The date of payment as indicated on the financial instrument.
         * @property {date}
        */
        Object.defineProperty(this, 'paymentDate', {
            enumerable: true,
            get: () => this.__data.paymentDate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let date = require('../simple_types/date.js');
                // eslint-disable-next-line new-cap
                this.__data.paymentDate = new date(value);
            }
        });

        /**
         * @description Total payment amount as indicated on the financial instrument.
         * @property {Money}
        */
        Object.defineProperty(this, 'paymentAmount', {
            enumerable: true,
            get: () => this.__data.paymentAmount,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Money = require('../complex_types/money.js');
                this.__data.paymentAmount = new Money(value);
            }
        });

        /**
         * @description Issuer's unique identifier for the payment instrument.
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'paymentIdentifier', {
            enumerable: true,
            get: () => this.__data.paymentIdentifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.paymentIdentifier = new Identifier(value);
            }
        });

        /**
         * @description Distribution of the payment amount for a previously acknowledged payable.
         * @property {PaymentReconciliationDetail[]|undefined}
        */
        Object.defineProperty(this, 'detail', {
            enumerable: true,
            get: () => this.__data.detail,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let PaymentReconciliationDetail = require('../backbone_elements/paymentReconciliationDetail.js');
                this.__data.detail = new PaymentReconciliationDetail(value);
            }
        });

        /**
         * @description A code for the form to be used for printing the content.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'formCode', {
            enumerable: true,
            get: () => this.__data.formCode,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.formCode = new CodeableConcept(value);
            }
        });

        /**
         * @description A note that describes or explains the processing in a human readable form.
         * @property {PaymentReconciliationProcessNote[]|undefined}
        */
        Object.defineProperty(this, 'processNote', {
            enumerable: true,
            get: () => this.__data.processNote,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let PaymentReconciliationProcessNote = require('../backbone_elements/paymentReconciliationProcessNote.js');
                this.__data.processNote = new PaymentReconciliationProcessNote(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'PaymentReconciliation',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'PaymentReconciliation';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id && this.id.toJSON(),
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules && this.implicitRules.toJSON(),
            language: this.language && this.language.toJSON(),
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.toJSON(),
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            identifier: this.identifier && this.identifier.toJSON(),
            status: this.status && this.status.toJSON(),
            period: this.period && this.period.toJSON(),
            created: this.created && this.created.toJSON(),
            paymentIssuer: this.paymentIssuer && this.paymentIssuer.toJSON(),
            request: this.request && this.request.toJSON(),
            requestor: this.requestor && this.requestor.toJSON(),
            outcome: this.outcome && this.outcome.toJSON(),
            disposition: this.disposition,
            paymentDate: this.paymentDate && this.paymentDate.toJSON(),
            paymentAmount: this.paymentAmount && this.paymentAmount.toJSON(),
            paymentIdentifier: this.paymentIdentifier && this.paymentIdentifier.toJSON(),
            detail: this.detail && this.detail.toJSON(),
            formCode: this.formCode && this.formCode.toJSON(),
            processNote: this.processNote && this.processNote.toJSON(),
        };
    }
}

module.exports = PaymentReconciliation;
