// This file is auto-generated by generate_classes so do not edit manually

/**
TestScript
    A structured set of tests against a FHIR server or client implementation to
    determine compliance against the FHIR specification.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class TestScript {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.implicitRules = value;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.contained = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description An absolute URI that is used to identify this test script when it is
    referenced in a specification, model, design or an instance; also called its
    canonical identifier. This SHOULD be globally unique and SHOULD be a literal
    address at which at which an authoritative instance of this test script is (or
    will be) published. This URL can be the target of a canonical reference. It
    SHALL remain the same when the test script is stored on different servers.
         * @property {uri}
        */
        Object.defineProperty(this, 'url', {
            enumerable: true,
            get: () => this.__data.url,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.url = value;
            }
        });

        /**
         * @description A formal identifier that is used to identify this test script when it is
    represented in other formats, or referenced in a specification, model, design
    or an instance.
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = new Identifier(value);
            }
        });

        /**
         * @description The identifier that is used to identify this version of the test script when
    it is referenced in a specification, model, design or instance. This is an
    arbitrary value managed by the test script author and is not expected to be
    globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
    managed version is not available. There is also no expectation that versions
    can be placed in a lexicographical sequence.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'version', {
            enumerable: true,
            get: () => this.__data.version,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.version = value;
            }
        });

        /**
         * @description A natural language name identifying the test script. This name should be
    usable as an identifier for the module by machine processing applications such
    as code generation.
         * @property {String}
        */
        Object.defineProperty(this, 'name', {
            enumerable: true,
            get: () => this.__data.name,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.name = value;
            }
        });

        /**
         * @description A short, descriptive, user-friendly title for the test script.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'title', {
            enumerable: true,
            get: () => this.__data.title,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.title = value;
            }
        });

        /**
         * @description The status of this test script. Enables tracking the life-cycle of the
    content.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.status = value;
            }
        });

        /**
         * @description A Boolean value to indicate that this test script is authored for testing
    purposes (or education/evaluation/marketing) and is not intended to be used
    for genuine usage.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'experimental', {
            enumerable: true,
            get: () => this.__data.experimental,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.experimental = value;
            }
        });

        /**
         * @description The date  (and optionally time) when the test script was published. The date
    must change when the business version changes and it must change if the status
    code changes. In addition, it should change when the substantive content of
    the test script changes.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'date', {
            enumerable: true,
            get: () => this.__data.date,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.date = value;
            }
        });

        /**
         * @description The name of the organization or individual that published the test script.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'publisher', {
            enumerable: true,
            get: () => this.__data.publisher,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.publisher = value;
            }
        });

        /**
         * @description Contact details to assist a user in finding and communicating with the
    publisher.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'contact', {
            enumerable: true,
            get: () => this.__data.contact,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.contact = Array.isArray(value) ? value.map(v => new ContactDetail(v)) : [new ContactDetail(value)];
            }
        });

        /**
         * @description A free text natural language description of the test script from a consumer's
    perspective.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.description = value;
            }
        });

        /**
         * @description The content was developed with a focus and intent of supporting the contexts
    that are listed. These contexts may be general categories (gender, age, ...)
    or may be references to specific programs (insurance plans, studies, ...) and
    may be used to assist with indexing and searching for appropriate test script
    instances.
         * @property {UsageContext[]|undefined}
        */
        Object.defineProperty(this, 'useContext', {
            enumerable: true,
            get: () => this.__data.useContext,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let UsageContext = require('../complex_types/usageContext.js');
                this.__data.useContext = Array.isArray(value) ? value.map(v => new UsageContext(v)) : [new UsageContext(value)];
            }
        });

        /**
         * @description A legal or geographic region in which the test script is intended to be used.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'jurisdiction', {
            enumerable: true,
            get: () => this.__data.jurisdiction,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.jurisdiction = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description Explanation of why this test script is needed and why it has been designed as
    it has.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'purpose', {
            enumerable: true,
            get: () => this.__data.purpose,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.purpose = value;
            }
        });

        /**
         * @description A copyright statement relating to the test script and/or its contents.
    Copyright statements are generally legal restrictions on the use and
    publishing of the test script.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'copyright', {
            enumerable: true,
            get: () => this.__data.copyright,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.copyright = value;
            }
        });

        /**
         * @description An abstract server used in operations within this test script in the origin
    element.
         * @property {TestScriptOrigin[]|undefined}
        */
        Object.defineProperty(this, 'origin', {
            enumerable: true,
            get: () => this.__data.origin,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let TestScriptOrigin = require('../backbone_elements/testScriptOrigin.js');
                this.__data.origin = Array.isArray(value) ? value.map(v => new TestScriptOrigin(v)) : [new TestScriptOrigin(value)];
            }
        });

        /**
         * @description An abstract server used in operations within this test script in the
    destination element.
         * @property {TestScriptDestination[]|undefined}
        */
        Object.defineProperty(this, 'destination', {
            enumerable: true,
            get: () => this.__data.destination,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let TestScriptDestination = require('../backbone_elements/testScriptDestination.js');
                this.__data.destination = Array.isArray(value) ? value.map(v => new TestScriptDestination(v)) : [new TestScriptDestination(value)];
            }
        });

        /**
         * @description The required capability must exist and are assumed to function correctly on
    the FHIR server being tested.
         * @property {TestScriptMetadata|undefined}
        */
        Object.defineProperty(this, 'metadata', {
            enumerable: true,
            get: () => this.__data.metadata,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let TestScriptMetadata = require('../backbone_elements/testScriptMetadata.js');
                this.__data.metadata = new TestScriptMetadata(value);
            }
        });

        /**
         * @description Fixture in the test script - by reference (uri). All fixtures are required for
    the test script to execute.
         * @property {TestScriptFixture[]|undefined}
        */
        Object.defineProperty(this, 'fixture', {
            enumerable: true,
            get: () => this.__data.fixture,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let TestScriptFixture = require('../backbone_elements/testScriptFixture.js');
                this.__data.fixture = Array.isArray(value) ? value.map(v => new TestScriptFixture(v)) : [new TestScriptFixture(value)];
            }
        });

        /**
         * @description Reference to the profile to be used for validation.
         * @property {Resource[]|undefined}
        */
        Object.defineProperty(this, 'profile', {
            enumerable: true,
            get: () => this.__data.profile,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.profile = Array.isArray(value) ? value.map(v => new Reference(v)) : [new Reference(value)];
            }
        });

        /**
         * @description Variable is set based either on element value in response body or on header
    field value in the response headers.
         * @property {TestScriptVariable[]|undefined}
        */
        Object.defineProperty(this, 'variable', {
            enumerable: true,
            get: () => this.__data.variable,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let TestScriptVariable = require('../backbone_elements/testScriptVariable.js');
                this.__data.variable = Array.isArray(value) ? value.map(v => new TestScriptVariable(v)) : [new TestScriptVariable(value)];
            }
        });

        /**
         * @description A series of required setup operations before tests are executed.
         * @property {TestScriptSetup|undefined}
        */
        Object.defineProperty(this, 'setup', {
            enumerable: true,
            get: () => this.__data.setup,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let TestScriptSetup = require('../backbone_elements/testScriptSetup.js');
                this.__data.setup = new TestScriptSetup(value);
            }
        });

        /**
         * @description A test in this script.
         * @property {TestScriptTest[]|undefined}
        */
        Object.defineProperty(this, 'test', {
            enumerable: true,
            get: () => this.__data.test,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let TestScriptTest = require('../backbone_elements/testScriptTest.js');
                this.__data.test = Array.isArray(value) ? value.map(v => new TestScriptTest(v)) : [new TestScriptTest(value)];
            }
        });

        /**
         * @description A series of operations required to clean up after all the tests are executed
    (successfully or otherwise).
         * @property {TestScriptTeardown|undefined}
        */
        Object.defineProperty(this, 'teardown', {
            enumerable: true,
            get: () => this.__data.teardown,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let TestScriptTeardown = require('../backbone_elements/testScriptTeardown.js');
                this.__data.teardown = new TestScriptTeardown(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'TestScript',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'TestScript';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            url: this.url,
            identifier: this.identifier && this.identifier.toJSON(),
            version: this.version,
            name: this.name,
            title: this.title,
            status: this.status,
            experimental: this.experimental,
            date: this.date,
            publisher: this.publisher,
            contact: this.contact && this.contact.map(v => v.toJSON()),
            description: this.description,
            useContext: this.useContext && this.useContext.map(v => v.toJSON()),
            jurisdiction: this.jurisdiction && this.jurisdiction.map(v => v.toJSON()),
            purpose: this.purpose,
            copyright: this.copyright,
            origin: this.origin && this.origin.map(v => v.toJSON()),
            destination: this.destination && this.destination.map(v => v.toJSON()),
            metadata: this.metadata && this.metadata.toJSON(),
            fixture: this.fixture && this.fixture.map(v => v.toJSON()),
            profile: this.profile && this.profile.map(v => v.toJSON()),
            variable: this.variable && this.variable.map(v => v.toJSON()),
            setup: this.setup && this.setup.toJSON(),
            test: this.test && this.test.map(v => v.toJSON()),
            teardown: this.teardown && this.teardown.toJSON(),
        };
    }
}

module.exports = TestScript;
