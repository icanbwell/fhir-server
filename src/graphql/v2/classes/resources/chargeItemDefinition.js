// This file is auto-generated by generate_classes so do not edit manually

/**
ChargeItemDefinition
    The ChargeItemDefinition resource provides the properties that apply to the
    (billing) codes necessary to calculate costs and prices. The properties may
    differ largely depending on type and realm, therefore this resource gives only
    a rough structure and requires profiling for each type of billing code system.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class ChargeItemDefinition {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.id = new id(value);
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.implicitRules = new uri(value);
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                // eslint-disable-next-line new-cap
                this.__data.contained = new ResourceContainer(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description An absolute URI that is used to identify this charge item definition when it
    is referenced in a specification, model, design or an instance; also called
    its canonical identifier. This SHOULD be globally unique and SHOULD be a
    literal address at which at which an authoritative instance of this charge
    item definition is (or will be) published. This URL can be the target of a
    canonical reference. It SHALL remain the same when the charge item definition
    is stored on different servers.
         * @property {uri}
        */
        Object.defineProperty(this, 'url', {
            enumerable: true,
            get: () => this.__data.url,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.url = new uri(value);
            }
        });

        /**
         * @description A formal identifier that is used to identify this charge item definition when
    it is represented in other formats, or referenced in a specification, model,
    design or an instance.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = new Identifier(value);
            }
        });

        /**
         * @description The identifier that is used to identify this version of the charge item
    definition when it is referenced in a specification, model, design or
    instance. This is an arbitrary value managed by the charge item definition
    author and is not expected to be globally unique. For example, it might be a
    timestamp (e.g. yyyymmdd) if a managed version is not available. There is also
    no expectation that versions can be placed in a lexicographical sequence. To
    provide a version consistent with the Decision Support Service specification,
    use the format Major.Minor.Revision (e.g. 1.0.0). For more information on
    versioning knowledge assets, refer to the Decision Support Service
    specification. Note that a version is required for non-experimental active
    assets.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'version', {
            enumerable: true,
            get: () => this.__data.version,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.version = value;
            }
        });

        /**
         * @description A short, descriptive, user-friendly title for the charge item definition.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'title', {
            enumerable: true,
            get: () => this.__data.title,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.title = value;
            }
        });

        /**
         * @description The URL pointing to an externally-defined charge item definition that is
    adhered to in whole or in part by this definition.
         * @property {uri[]|undefined}
        */
        Object.defineProperty(this, 'derivedFromUri', {
            enumerable: true,
            get: () => this.__data.derivedFromUri,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.derivedFromUri = new uri(value);
            }
        });

        /**
         * @description A larger definition of which this particular definition is a component or
    step.
         * @property {canonical[]|undefined}
        */
        Object.defineProperty(this, 'partOf', {
            enumerable: true,
            get: () => this.__data.partOf,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let canonical = require('../simple_types/canonical.js');
                // eslint-disable-next-line new-cap
                this.__data.partOf = new canonical(value);
            }
        });

        /**
         * @description As new versions of a protocol or guideline are defined, allows identification
    of what versions are replaced by a new instance.
         * @property {canonical[]|undefined}
        */
        Object.defineProperty(this, 'replaces', {
            enumerable: true,
            get: () => this.__data.replaces,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let canonical = require('../simple_types/canonical.js');
                // eslint-disable-next-line new-cap
                this.__data.replaces = new canonical(value);
            }
        });

        /**
         * @description The current state of the ChargeItemDefinition.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.status = value;
            }
        });

        /**
         * @description A Boolean value to indicate that this charge item definition is authored for
    testing purposes (or education/evaluation/marketing) and is not intended to be
    used for genuine usage.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'experimental', {
            enumerable: true,
            get: () => this.__data.experimental,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.experimental = value;
            }
        });

        /**
         * @description The date  (and optionally time) when the charge item definition was published.
    The date must change when the business version changes and it must change if
    the status code changes. In addition, it should change when the substantive
    content of the charge item definition changes.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'date', {
            enumerable: true,
            get: () => this.__data.date,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let dateTime = require('../simple_types/dateTime.js');
                // eslint-disable-next-line new-cap
                this.__data.date = new dateTime(value);
            }
        });

        /**
         * @description The name of the organization or individual that published the charge item
    definition.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'publisher', {
            enumerable: true,
            get: () => this.__data.publisher,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.publisher = value;
            }
        });

        /**
         * @description Contact details to assist a user in finding and communicating with the
    publisher.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'contact', {
            enumerable: true,
            get: () => this.__data.contact,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.contact = new ContactDetail(value);
            }
        });

        /**
         * @description A free text natural language description of the charge item definition from a
    consumer's perspective.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let markdown = require('../simple_types/markdown.js');
                // eslint-disable-next-line new-cap
                this.__data.description = new markdown(value);
            }
        });

        /**
         * @description The content was developed with a focus and intent of supporting the contexts
    that are listed. These contexts may be general categories (gender, age, ...)
    or may be references to specific programs (insurance plans, studies, ...) and
    may be used to assist with indexing and searching for appropriate charge item
    definition instances.
         * @property {UsageContext[]|undefined}
        */
        Object.defineProperty(this, 'useContext', {
            enumerable: true,
            get: () => this.__data.useContext,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let UsageContext = require('../complex_types/usageContext.js');
                this.__data.useContext = new UsageContext(value);
            }
        });

        /**
         * @description A legal or geographic region in which the charge item definition is intended
    to be used.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'jurisdiction', {
            enumerable: true,
            get: () => this.__data.jurisdiction,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.jurisdiction = new CodeableConcept(value);
            }
        });

        /**
         * @description A copyright statement relating to the charge item definition and/or its
    contents. Copyright statements are generally legal restrictions on the use and
    publishing of the charge item definition.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'copyright', {
            enumerable: true,
            get: () => this.__data.copyright,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let markdown = require('../simple_types/markdown.js');
                // eslint-disable-next-line new-cap
                this.__data.copyright = new markdown(value);
            }
        });

        /**
         * @description The date on which the resource content was approved by the publisher. Approval
    happens once when the content is officially approved for usage.
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'approvalDate', {
            enumerable: true,
            get: () => this.__data.approvalDate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let date = require('../simple_types/date.js');
                // eslint-disable-next-line new-cap
                this.__data.approvalDate = new date(value);
            }
        });

        /**
         * @description The date on which the resource content was last reviewed. Review happens
    periodically after approval but does not change the original approval date.
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'lastReviewDate', {
            enumerable: true,
            get: () => this.__data.lastReviewDate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let date = require('../simple_types/date.js');
                // eslint-disable-next-line new-cap
                this.__data.lastReviewDate = new date(value);
            }
        });

        /**
         * @description The period during which the charge item definition content was or is planned
    to be in active use.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'effectivePeriod', {
            enumerable: true,
            get: () => this.__data.effectivePeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.effectivePeriod = new Period(value);
            }
        });

        /**
         * @description The defined billing details in this resource pertain to the given billing
    code.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            get: () => this.__data.code,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.code = new CodeableConcept(value);
            }
        });

        /**
         * @description The defined billing details in this resource pertain to the given product
    instance(s).
         * @property {ChargeItemDefinitionInstance[]|undefined}
        */
        Object.defineProperty(this, 'instance', {
            enumerable: true,
            get: () => this.__data.instance,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.instance = new Reference(value);
            }
        });

        /**
         * @description Expressions that describe applicability criteria for the billing code.
         * @property {ChargeItemDefinitionApplicability[]|undefined}
        */
        Object.defineProperty(this, 'applicability', {
            enumerable: true,
            get: () => this.__data.applicability,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ChargeItemDefinitionApplicability = require('../backbone_elements/chargeItemDefinitionApplicability.js');
                this.__data.applicability = new ChargeItemDefinitionApplicability(value);
            }
        });

        /**
         * @description Group of properties which are applicable under the same conditions. If no
    applicability rules are established for the group, then all properties always
    apply.
         * @property {ChargeItemDefinitionPropertyGroup[]|undefined}
        */
        Object.defineProperty(this, 'propertyGroup', {
            enumerable: true,
            get: () => this.__data.propertyGroup,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ChargeItemDefinitionPropertyGroup = require('../backbone_elements/chargeItemDefinitionPropertyGroup.js');
                this.__data.propertyGroup = new ChargeItemDefinitionPropertyGroup(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ChargeItemDefinition',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ChargeItemDefinition';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id && this.id.toJSON(),
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules && this.implicitRules.toJSON(),
            language: this.language && this.language.toJSON(),
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.toJSON(),
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            url: this.url && this.url.toJSON(),
            identifier: this.identifier && this.identifier.toJSON(),
            version: this.version,
            title: this.title,
            derivedFromUri: this.derivedFromUri && this.derivedFromUri.toJSON(),
            partOf: this.partOf && this.partOf.toJSON(),
            replaces: this.replaces && this.replaces.toJSON(),
            status: this.status && this.status.toJSON(),
            experimental: this.experimental,
            date: this.date && this.date.toJSON(),
            publisher: this.publisher,
            contact: this.contact && this.contact.toJSON(),
            description: this.description && this.description.toJSON(),
            useContext: this.useContext && this.useContext.toJSON(),
            jurisdiction: this.jurisdiction && this.jurisdiction.toJSON(),
            copyright: this.copyright && this.copyright.toJSON(),
            approvalDate: this.approvalDate && this.approvalDate.toJSON(),
            lastReviewDate: this.lastReviewDate && this.lastReviewDate.toJSON(),
            effectivePeriod: this.effectivePeriod && this.effectivePeriod.toJSON(),
            code: this.code && this.code.toJSON(),
            instance: this.instance && this.instance.toJSON(),
            applicability: this.applicability && this.applicability.toJSON(),
            propertyGroup: this.propertyGroup && this.propertyGroup.toJSON(),
        };
    }
}

module.exports = ChargeItemDefinition;
