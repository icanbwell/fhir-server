// This file is auto-generated by generate_classes so do not edit manually

/**
SubstanceSpecification
    The detailed description of a substance, typically at a level beyond what is
    used for prescribing.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class SubstanceSpecification {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.implicitRules = value;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.contained = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description Identifier by which this substance is known.
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = new Identifier(value);
            }
        });

        /**
         * @description High level categorization, e.g. polymer or nucleic acid.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.type = new CodeableConcept(value);
            }
        });

        /**
         * @description Status of substance within the catalogue e.g. approved.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.status = new CodeableConcept(value);
            }
        });

        /**
         * @description If the substance applies to only human or veterinary use.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'domain', {
            enumerable: true,
            get: () => this.__data.domain,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.domain = new CodeableConcept(value);
            }
        });

        /**
         * @description Textual description of the substance.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.description = value;
            }
        });

        /**
         * @description Supporting literature.
         * @property {DocumentReference[]|undefined}
        */
        Object.defineProperty(this, 'source', {
            enumerable: true,
            get: () => this.__data.source,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.source = Array.isArray(value) ? value.map(v => new Reference(v)) : [new Reference(value)];
            }
        });

        /**
         * @description Textual comment about this record of a substance.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'comment', {
            enumerable: true,
            get: () => this.__data.comment,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.comment = value;
            }
        });

        /**
         * @description Moiety, for structural modifications.
         * @property {SubstanceSpecificationMoiety[]|undefined}
        */
        Object.defineProperty(this, 'moiety', {
            enumerable: true,
            get: () => this.__data.moiety,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let SubstanceSpecificationMoiety = require('../backbone_elements/substanceSpecificationMoiety.js');
                this.__data.moiety = Array.isArray(value) ? value.map(v => new SubstanceSpecificationMoiety(v)) : [new SubstanceSpecificationMoiety(value)];
            }
        });

        /**
         * @description General specifications for this substance, including how it is related to
    other substances.
         * @property {SubstanceSpecificationProperty[]|undefined}
        */
        Object.defineProperty(this, 'property', {
            enumerable: true,
            get: () => this.__data.property,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let SubstanceSpecificationProperty = require('../backbone_elements/substanceSpecificationProperty.js');
                this.__data.property = Array.isArray(value) ? value.map(v => new SubstanceSpecificationProperty(v)) : [new SubstanceSpecificationProperty(value)];
            }
        });

        /**
         * @description General information detailing this substance.
         * @property {SubstanceReferenceInformation|undefined}
        */
        Object.defineProperty(this, 'referenceInformation', {
            enumerable: true,
            get: () => this.__data.referenceInformation,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.referenceInformation = new Reference(value);
            }
        });

        /**
         * @description Structural information.
         * @property {SubstanceSpecificationStructure|undefined}
        */
        Object.defineProperty(this, 'structure', {
            enumerable: true,
            get: () => this.__data.structure,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let SubstanceSpecificationStructure = require('../backbone_elements/substanceSpecificationStructure.js');
                this.__data.structure = new SubstanceSpecificationStructure(value);
            }
        });

        /**
         * @description Codes associated with the substance.
         * @property {SubstanceSpecificationCode[]|undefined}
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            get: () => this.__data.code,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let SubstanceSpecificationCode = require('../backbone_elements/substanceSpecificationCode.js');
                this.__data.code = Array.isArray(value) ? value.map(v => new SubstanceSpecificationCode(v)) : [new SubstanceSpecificationCode(value)];
            }
        });

        /**
         * @description Names applicable to this substance.
         * @property {SubstanceSpecificationName[]|undefined}
        */
        Object.defineProperty(this, 'name', {
            enumerable: true,
            get: () => this.__data.name,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let SubstanceSpecificationName = require('../backbone_elements/substanceSpecificationName.js');
                this.__data.name = Array.isArray(value) ? value.map(v => new SubstanceSpecificationName(v)) : [new SubstanceSpecificationName(value)];
            }
        });

        /**
         * @description The molecular weight or weight range (for proteins, polymers or nucleic
    acids).
         * @property {SubstanceSpecificationMolecularWeight[]|undefined}
        */
        Object.defineProperty(this, 'molecularWeight', {
            enumerable: true,
            get: () => this.__data.molecularWeight,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let SubstanceSpecificationMolecularWeight = require('../backbone_elements/substanceSpecificationMolecularWeight.js');
                this.__data.molecularWeight = Array.isArray(value) ? value.map(v => new SubstanceSpecificationMolecularWeight(v)) : [new SubstanceSpecificationMolecularWeight(value)];
            }
        });

        /**
         * @description A link between this substance and another, with details of the relationship.
         * @property {SubstanceSpecificationRelationship[]|undefined}
        */
        Object.defineProperty(this, 'relationship', {
            enumerable: true,
            get: () => this.__data.relationship,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let SubstanceSpecificationRelationship = require('../backbone_elements/substanceSpecificationRelationship.js');
                this.__data.relationship = Array.isArray(value) ? value.map(v => new SubstanceSpecificationRelationship(v)) : [new SubstanceSpecificationRelationship(value)];
            }
        });

        /**
         * @description Data items specific to nucleic acids.
         * @property {SubstanceNucleicAcid|undefined}
        */
        Object.defineProperty(this, 'nucleicAcid', {
            enumerable: true,
            get: () => this.__data.nucleicAcid,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.nucleicAcid = new Reference(value);
            }
        });

        /**
         * @description Data items specific to polymers.
         * @property {SubstancePolymer|undefined}
        */
        Object.defineProperty(this, 'polymer', {
            enumerable: true,
            get: () => this.__data.polymer,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.polymer = new Reference(value);
            }
        });

        /**
         * @description Data items specific to proteins.
         * @property {SubstanceProtein|undefined}
        */
        Object.defineProperty(this, 'protein', {
            enumerable: true,
            get: () => this.__data.protein,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.protein = new Reference(value);
            }
        });

        /**
         * @description Material or taxonomic/anatomical source for the substance.
         * @property {SubstanceSourceMaterial|undefined}
        */
        Object.defineProperty(this, 'sourceMaterial', {
            enumerable: true,
            get: () => this.__data.sourceMaterial,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.sourceMaterial = new Reference(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'SubstanceSpecification',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'SubstanceSpecification';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.toJSON(),
            type: this.type && this.type.toJSON(),
            status: this.status && this.status.toJSON(),
            domain: this.domain && this.domain.toJSON(),
            description: this.description,
            source: this.source && this.source.map(v => v.toJSON()),
            comment: this.comment,
            moiety: this.moiety && this.moiety.map(v => v.toJSON()),
            property: this.property && this.property.map(v => v.toJSON()),
            referenceInformation: this.referenceInformation && this.referenceInformation.toJSON(),
            structure: this.structure && this.structure.toJSON(),
            code: this.code && this.code.map(v => v.toJSON()),
            name: this.name && this.name.map(v => v.toJSON()),
            molecularWeight: this.molecularWeight && this.molecularWeight.map(v => v.toJSON()),
            relationship: this.relationship && this.relationship.map(v => v.toJSON()),
            nucleicAcid: this.nucleicAcid && this.nucleicAcid.toJSON(),
            polymer: this.polymer && this.polymer.toJSON(),
            protein: this.protein && this.protein.toJSON(),
            sourceMaterial: this.sourceMaterial && this.sourceMaterial.toJSON(),
        };
    }
}

module.exports = SubstanceSpecification;
