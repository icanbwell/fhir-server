// This file is auto-generated by generate_classes so do not edit manually

/**
Communication
    An occurrence of information being transmitted; e.g. an alert that was sent to
    a responsible provider, a public health agency that was notified about a
    reportable condition.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class Communication {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.id = new id(value);
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.implicitRules = new uri(value);
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                // eslint-disable-next-line new-cap
                this.__data.contained = new ResourceContainer(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description Business identifiers assigned to this communication by the performer or other
    systems which remain constant as the resource is updated and propagates from
    server to server.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = new Identifier(value);
            }
        });

        /**
         * @description The URL pointing to a FHIR-defined protocol, guideline, orderset or other
    definition that is adhered to in whole or in part by this Communication.
         * @property {canonical[]|undefined}
        */
        Object.defineProperty(this, 'instantiatesCanonical', {
            enumerable: true,
            get: () => this.__data.instantiatesCanonical,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let canonical = require('../simple_types/canonical.js');
                // eslint-disable-next-line new-cap
                this.__data.instantiatesCanonical = new canonical(value);
            }
        });

        /**
         * @description The URL pointing to an externally maintained protocol, guideline, orderset or
    other definition that is adhered to in whole or in part by this Communication.
         * @property {uri[]|undefined}
        */
        Object.defineProperty(this, 'instantiatesUri', {
            enumerable: true,
            get: () => this.__data.instantiatesUri,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.instantiatesUri = new uri(value);
            }
        });

        /**
         * @description An order, proposal or plan fulfilled in whole or in part by this
    Communication.
         * @property {Resource[]|undefined}
        */
        Object.defineProperty(this, 'basedOn', {
            enumerable: true,
            get: () => this.__data.basedOn,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.basedOn = new Reference(value);
            }
        });

        /**
         * @description Part of this action.
         * @property {Resource[]|undefined}
        */
        Object.defineProperty(this, 'partOf', {
            enumerable: true,
            get: () => this.__data.partOf,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.partOf = new Reference(value);
            }
        });

        /**
         * @description Prior communication that this communication is in response to.
         * @property {Communication[]|undefined}
        */
        Object.defineProperty(this, 'inResponseTo', {
            enumerable: true,
            get: () => this.__data.inResponseTo,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.inResponseTo = new Reference(value);
            }
        });

        /**
         * @description The status of the transmission.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.status = value;
            }
        });

        /**
         * @description Captures the reason for the current state of the Communication.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'statusReason', {
            enumerable: true,
            get: () => this.__data.statusReason,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.statusReason = new CodeableConcept(value);
            }
        });

        /**
         * @description The type of message conveyed such as alert, notification, reminder,
    instruction, etc.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'category', {
            enumerable: true,
            get: () => this.__data.category,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.category = new CodeableConcept(value);
            }
        });

        /**
         * @description Characterizes how quickly the planned or in progress communication must be
    addressed. Includes concepts such as stat, urgent, routine.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'priority', {
            enumerable: true,
            get: () => this.__data.priority,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.priority = value;
            }
        });

        /**
         * @description A channel that was used for this communication (e.g. email, fax).
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'medium', {
            enumerable: true,
            get: () => this.__data.medium,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.medium = new CodeableConcept(value);
            }
        });

        /**
         * @description The patient or group that was the focus of this communication.
         * @property {CommunicationSubject|undefined}
        */
        Object.defineProperty(this, 'subject', {
            enumerable: true,
            get: () => this.__data.subject,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.subject = new Reference(value);
            }
        });

        /**
         * @description Description of the purpose/content, similar to a subject line in an email.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'topic', {
            enumerable: true,
            get: () => this.__data.topic,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.topic = new CodeableConcept(value);
            }
        });

        /**
         * @description Other resources that pertain to this communication and to which this
    communication should be associated.
         * @property {Resource[]|undefined}
        */
        Object.defineProperty(this, 'about', {
            enumerable: true,
            get: () => this.__data.about,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.about = new Reference(value);
            }
        });

        /**
         * @description The Encounter during which this Communication was created or to which the
    creation of this record is tightly associated.
         * @property {Encounter|undefined}
        */
        Object.defineProperty(this, 'encounter', {
            enumerable: true,
            get: () => this.__data.encounter,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.encounter = new Reference(value);
            }
        });

        /**
         * @description The time when this communication was sent.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'sent', {
            enumerable: true,
            get: () => this.__data.sent,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let dateTime = require('../simple_types/dateTime.js');
                // eslint-disable-next-line new-cap
                this.__data.sent = new dateTime(value);
            }
        });

        /**
         * @description The time when this communication arrived at the destination.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'received', {
            enumerable: true,
            get: () => this.__data.received,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let dateTime = require('../simple_types/dateTime.js');
                // eslint-disable-next-line new-cap
                this.__data.received = new dateTime(value);
            }
        });

        /**
         * @description The entity (e.g. person, organization, clinical information system, care team
    or device) which was the target of the communication. If receipts need to be
    tracked by an individual, a separate resource instance will need to be created
    for each recipient.  Multiple recipient communications are intended where
    either receipts are not tracked (e.g. a mass mail-out) or a receipt is
    captured in aggregate (all emails confirmed received by a particular time).
         * @property {CommunicationRecipient[]|undefined}
        */
        Object.defineProperty(this, 'recipient', {
            enumerable: true,
            get: () => this.__data.recipient,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.recipient = new Reference(value);
            }
        });

        /**
         * @description The entity (e.g. person, organization, clinical information system, or device)
    which was the source of the communication.
         * @property {CommunicationSender|undefined}
        */
        Object.defineProperty(this, 'sender', {
            enumerable: true,
            get: () => this.__data.sender,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.sender = new Reference(value);
            }
        });

        /**
         * @description The reason or justification for the communication.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'reasonCode', {
            enumerable: true,
            get: () => this.__data.reasonCode,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.reasonCode = new CodeableConcept(value);
            }
        });

        /**
         * @description Indicates another resource whose existence justifies this communication.
         * @property {CommunicationReasonReference[]|undefined}
        */
        Object.defineProperty(this, 'reasonReference', {
            enumerable: true,
            get: () => this.__data.reasonReference,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.reasonReference = new Reference(value);
            }
        });

        /**
         * @description Text, attachment(s), or resource(s) that was communicated to the recipient.
         * @property {CommunicationPayload[]|undefined}
        */
        Object.defineProperty(this, 'payload', {
            enumerable: true,
            get: () => this.__data.payload,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CommunicationPayload = require('../backbone_elements/communicationPayload.js');
                this.__data.payload = new CommunicationPayload(value);
            }
        });

        /**
         * @description Additional notes or commentary about the communication by the sender, receiver
    or other interested parties.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            enumerable: true,
            get: () => this.__data.note,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.note = new Annotation(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Communication',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Communication';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id && this.id.toJSON(),
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules && this.implicitRules.toJSON(),
            language: this.language && this.language.toJSON(),
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.toJSON(),
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            identifier: this.identifier && this.identifier.toJSON(),
            instantiatesCanonical: this.instantiatesCanonical && this.instantiatesCanonical.toJSON(),
            instantiatesUri: this.instantiatesUri && this.instantiatesUri.toJSON(),
            basedOn: this.basedOn && this.basedOn.toJSON(),
            partOf: this.partOf && this.partOf.toJSON(),
            inResponseTo: this.inResponseTo && this.inResponseTo.toJSON(),
            status: this.status && this.status.toJSON(),
            statusReason: this.statusReason && this.statusReason.toJSON(),
            category: this.category && this.category.toJSON(),
            priority: this.priority && this.priority.toJSON(),
            medium: this.medium && this.medium.toJSON(),
            subject: this.subject && this.subject.toJSON(),
            topic: this.topic && this.topic.toJSON(),
            about: this.about && this.about.toJSON(),
            encounter: this.encounter && this.encounter.toJSON(),
            sent: this.sent && this.sent.toJSON(),
            received: this.received && this.received.toJSON(),
            recipient: this.recipient && this.recipient.toJSON(),
            sender: this.sender && this.sender.toJSON(),
            reasonCode: this.reasonCode && this.reasonCode.toJSON(),
            reasonReference: this.reasonReference && this.reasonReference.toJSON(),
            payload: this.payload && this.payload.toJSON(),
            note: this.note && this.note.toJSON(),
        };
    }
}

module.exports = Communication;
