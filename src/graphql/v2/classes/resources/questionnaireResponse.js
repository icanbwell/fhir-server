// This file is auto-generated by generate_classes so do not edit manually

/**
QuestionnaireResponse
    A structured set of questions and their answers. The questions are ordered and
    grouped into coherent subsets, corresponding to the structure of the grouping
    of the questionnaire being responded to.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class QuestionnaireResponse {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.id = new id(value);
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.implicitRules = new uri(value);
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                // eslint-disable-next-line new-cap
                this.__data.contained = new ResourceContainer(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description A business identifier assigned to a particular completed (or partially
    completed) questionnaire.
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = new Identifier(value);
            }
        });

        /**
         * @description The order, proposal or plan that is fulfilled in whole or in part by this
    QuestionnaireResponse.  For example, a ServiceRequest seeking an intake
    assessment or a decision support recommendation to assess for post-partum
    depression.
         * @property {QuestionnaireResponseBasedOn[]|undefined}
        */
        Object.defineProperty(this, 'basedOn', {
            enumerable: true,
            get: () => this.__data.basedOn,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.basedOn = new Reference(value);
            }
        });

        /**
         * @description A procedure or observation that this questionnaire was performed as part of
    the execution of.  For example, the surgery a checklist was executed as part
    of.
         * @property {QuestionnaireResponsePartOf[]|undefined}
        */
        Object.defineProperty(this, 'partOf', {
            enumerable: true,
            get: () => this.__data.partOf,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.partOf = new Reference(value);
            }
        });

        /**
         * @description The Questionnaire that defines and organizes the questions for which answers
    are being provided.
         * @property {canonical|undefined}
        */
        Object.defineProperty(this, 'questionnaire', {
            enumerable: true,
            get: () => this.__data.questionnaire,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let canonical = require('../simple_types/canonical.js');
                // eslint-disable-next-line new-cap
                this.__data.questionnaire = new canonical(value);
            }
        });

        /**
         * @description The position of the questionnaire response within its overall lifecycle.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.status = value;
            }
        });

        /**
         * @description The subject of the questionnaire response.  This could be a patient,
    organization, practitioner, device, etc.  This is who/what the answers apply
    to, but is not necessarily the source of information.
         * @property {Resource|undefined}
        */
        Object.defineProperty(this, 'subject', {
            enumerable: true,
            get: () => this.__data.subject,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.subject = new Reference(value);
            }
        });

        /**
         * @description The Encounter during which this questionnaire response was created or to which
    the creation of this record is tightly associated.
         * @property {Encounter|undefined}
        */
        Object.defineProperty(this, 'encounter', {
            enumerable: true,
            get: () => this.__data.encounter,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.encounter = new Reference(value);
            }
        });

        /**
         * @description The date and/or time that this set of answers were last changed.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'authored', {
            enumerable: true,
            get: () => this.__data.authored,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let dateTime = require('../simple_types/dateTime.js');
                // eslint-disable-next-line new-cap
                this.__data.authored = new dateTime(value);
            }
        });

        /**
         * @description Person who received the answers to the questions in the QuestionnaireResponse
    and recorded them in the system.
         * @property {QuestionnaireResponseAuthor|undefined}
        */
        Object.defineProperty(this, 'author', {
            enumerable: true,
            get: () => this.__data.author,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.author = new Reference(value);
            }
        });

        /**
         * @description The person who answered the questions about the subject.
         * @property {QuestionnaireResponseSource|undefined}
        */
        Object.defineProperty(this, 'source', {
            enumerable: true,
            get: () => this.__data.source,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.source = new Reference(value);
            }
        });

        /**
         * @description A group or question item from the original questionnaire for which answers are
    provided.
         * @property {QuestionnaireResponseItem[]|undefined}
        */
        Object.defineProperty(this, 'item', {
            enumerable: true,
            get: () => this.__data.item,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let QuestionnaireResponseItem = require('../backbone_elements/questionnaireResponseItem.js');
                this.__data.item = new QuestionnaireResponseItem(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'QuestionnaireResponse',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'QuestionnaireResponse';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id && this.id.toJSON(),
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules && this.implicitRules.toJSON(),
            language: this.language && this.language.toJSON(),
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.toJSON(),
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            identifier: this.identifier && this.identifier.toJSON(),
            basedOn: this.basedOn && this.basedOn.toJSON(),
            partOf: this.partOf && this.partOf.toJSON(),
            questionnaire: this.questionnaire && this.questionnaire.toJSON(),
            status: this.status && this.status.toJSON(),
            subject: this.subject && this.subject.toJSON(),
            encounter: this.encounter && this.encounter.toJSON(),
            authored: this.authored && this.authored.toJSON(),
            author: this.author && this.author.toJSON(),
            source: this.source && this.source.toJSON(),
            item: this.item && this.item.toJSON(),
        };
    }
}

module.exports = QuestionnaireResponse;
