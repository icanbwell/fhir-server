// This file is auto-generated by generate_classes so do not edit manually

/**
Composition
    A set of healthcare-related information that is assembled together into a
    single logical package that provides a single coherent statement of meaning,
    establishes its own context and that has clinical attestation with regard to
    who is making the statement. A Composition defines the structure and narrative
    content necessary for a document. However, a Composition alone does not
    constitute a document. Rather, the Composition must be the first entry in a
    Bundle where Bundle.type=document, and any other resources referenced from
    Composition must be included as subsequent entries in the Bundle (for example
    Patient, Practitioner, Encounter, etc.).
    If the element is present, it must have either a @value, an @id, or extensions
*/
class Composition {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.implicitRules = value;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.contained = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description A version-independent identifier for the Composition. This identifier stays
    constant as the composition is changed over time.
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = new Identifier(value);
            }
        });

        /**
         * @description The workflow/clinical status of this composition. The status is a marker for
    the clinical standing of the document.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.status = value;
            }
        });

        /**
         * @description Specifies the particular kind of composition (e.g. History and Physical,
    Discharge Summary, Progress Note). This usually equates to the purpose of
    making the composition.
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.type = new CodeableConcept(value);
            }
        });

        /**
         * @description A categorization for the type of the composition - helps for indexing and
    searching. This may be implied by or derived from the code specified in the
    Composition Type.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'category', {
            enumerable: true,
            get: () => this.__data.category,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.category = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description Who or what the composition is about. The composition can be about a person,
    (patient or healthcare practitioner), a device (e.g. a machine) or even a
    group of subjects (such as a document about a herd of livestock, or a set of
    patients that share a common exposure).
         * @property {Resource|undefined}
        */
        Object.defineProperty(this, 'subject', {
            enumerable: true,
            get: () => this.__data.subject,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.subject = new Reference(value);
            }
        });

        /**
         * @description Describes the clinical encounter or type of care this documentation is
    associated with.
         * @property {Encounter|undefined}
        */
        Object.defineProperty(this, 'encounter', {
            enumerable: true,
            get: () => this.__data.encounter,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.encounter = new Reference(value);
            }
        });

        /**
         * @description The composition editing time, when the composition was last logically changed
    by the author.
         * @property {dateTime}
        */
        Object.defineProperty(this, 'date', {
            enumerable: true,
            get: () => this.__data.date,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.date = value;
            }
        });

        /**
         * @description Identifies who is responsible for the information in the composition, not
    necessarily who typed it in.
         * @property {CompositionAuthor[]}
        */
        Object.defineProperty(this, 'author', {
            enumerable: true,
            get: () => this.__data.author,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.author = Array.isArray(value) ? value.map(v => new Reference(v)) : [new Reference(value)];
            }
        });

        /**
         * @description Official human-readable label for the composition.
         * @property {String}
        */
        Object.defineProperty(this, 'title', {
            enumerable: true,
            get: () => this.__data.title,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.title = value;
            }
        });

        /**
         * @description The code specifying the level of confidentiality of the Composition.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'confidentiality', {
            enumerable: true,
            get: () => this.__data.confidentiality,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.confidentiality = value;
            }
        });

        /**
         * @description A participant who has attested to the accuracy of the composition/document.
         * @property {CompositionAttester[]|undefined}
        */
        Object.defineProperty(this, 'attester', {
            enumerable: true,
            get: () => this.__data.attester,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CompositionAttester = require('../backbone_elements/compositionAttester.js');
                this.__data.attester = Array.isArray(value) ? value.map(v => new CompositionAttester(v)) : [new CompositionAttester(value)];
            }
        });

        /**
         * @description Identifies the organization or group who is responsible for ongoing
    maintenance of and access to the composition/document information.
         * @property {Organization|undefined}
        */
        Object.defineProperty(this, 'custodian', {
            enumerable: true,
            get: () => this.__data.custodian,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.custodian = new Reference(value);
            }
        });

        /**
         * @description Relationships that this composition has with other compositions or documents
    that already exist.
         * @property {CompositionRelatesTo[]|undefined}
        */
        Object.defineProperty(this, 'relatesTo', {
            enumerable: true,
            get: () => this.__data.relatesTo,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CompositionRelatesTo = require('../backbone_elements/compositionRelatesTo.js');
                this.__data.relatesTo = Array.isArray(value) ? value.map(v => new CompositionRelatesTo(v)) : [new CompositionRelatesTo(value)];
            }
        });

        /**
         * @description The clinical service, such as a colonoscopy or an appendectomy, being
    documented.
         * @property {CompositionEvent[]|undefined}
        */
        Object.defineProperty(this, 'event', {
            enumerable: true,
            get: () => this.__data.event,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CompositionEvent = require('../backbone_elements/compositionEvent.js');
                this.__data.event = Array.isArray(value) ? value.map(v => new CompositionEvent(v)) : [new CompositionEvent(value)];
            }
        });

        /**
         * @description The root of the sections that make up the composition.
         * @property {CompositionSection[]|undefined}
        */
        Object.defineProperty(this, 'section', {
            enumerable: true,
            get: () => this.__data.section,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CompositionSection = require('../backbone_elements/compositionSection.js');
                this.__data.section = Array.isArray(value) ? value.map(v => new CompositionSection(v)) : [new CompositionSection(value)];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Composition',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Composition';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.toJSON(),
            status: this.status,
            type: this.type && this.type.toJSON(),
            category: this.category && this.category.map(v => v.toJSON()),
            subject: this.subject && this.subject.toJSON(),
            encounter: this.encounter && this.encounter.toJSON(),
            date: this.date,
            author: this.author && this.author.map(v => v.toJSON()),
            title: this.title,
            confidentiality: this.confidentiality,
            attester: this.attester && this.attester.map(v => v.toJSON()),
            custodian: this.custodian && this.custodian.toJSON(),
            relatesTo: this.relatesTo && this.relatesTo.map(v => v.toJSON()),
            event: this.event && this.event.map(v => v.toJSON()),
            section: this.section && this.section.map(v => v.toJSON()),
        };
    }
}

module.exports = Composition;
