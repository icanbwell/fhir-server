// This file is auto-generated by generate_classes so do not edit manually

/**
Encounter
    An interaction between a patient and healthcare provider(s) for the purpose of
    providing healthcare service(s) or assessing the health status of a patient.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class Encounter {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.id = new id(value);
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.implicitRules = new uri(value);
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                // eslint-disable-next-line new-cap
                this.__data.contained = new ResourceContainer(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description Identifier(s) by which this encounter is known.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = new Identifier(value);
            }
        });

        /**
         * @description planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.status = value;
            }
        });

        /**
         * @description The status history permits the encounter resource to contain the status
    history without needing to read through the historical versions of the
    resource, or even have the server store them.
         * @property {EncounterStatusHistory[]|undefined}
        */
        Object.defineProperty(this, 'statusHistory', {
            enumerable: true,
            get: () => this.__data.statusHistory,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let EncounterStatusHistory = require('../backbone_elements/encounterStatusHistory.js');
                this.__data.statusHistory = new EncounterStatusHistory(value);
            }
        });

        /**
         * @description Concepts representing classification of patient encounter such as ambulatory
    (outpatient), inpatient, emergency, home health or others due to local
    variations.
         * @property {Coding}
        */
        Object.defineProperty(this, 'class', {
            enumerable: true,
            get: () => this.__data.class,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.class = new Coding(value);
            }
        });

        /**
         * @description The class history permits the tracking of the encounters transitions without
    needing to go  through the resource history.  This would be used for a case
    where an admission starts of as an emergency encounter, then transitions into
    an inpatient scenario. Doing this and not restarting a new encounter ensures
    that any lab/diagnostic results can more easily follow the patient and not
    require re-processing and not get lost or cancelled during a kind of discharge
    from emergency to inpatient.
         * @property {EncounterClassHistory[]|undefined}
        */
        Object.defineProperty(this, 'classHistory', {
            enumerable: true,
            get: () => this.__data.classHistory,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let EncounterClassHistory = require('../backbone_elements/encounterClassHistory.js');
                this.__data.classHistory = new EncounterClassHistory(value);
            }
        });

        /**
         * @description Specific type of encounter (e.g. e-mail consultation, surgical day-care,
    skilled nursing, rehabilitation).
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.type = new CodeableConcept(value);
            }
        });

        /**
         * @description Broad categorization of the service that is to be provided (e.g. cardiology).
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'serviceType', {
            enumerable: true,
            get: () => this.__data.serviceType,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.serviceType = new CodeableConcept(value);
            }
        });

        /**
         * @description Indicates the urgency of the encounter.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'priority', {
            enumerable: true,
            get: () => this.__data.priority,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.priority = new CodeableConcept(value);
            }
        });

        /**
         * @description The patient or group present at the encounter.
         * @property {EncounterSubject|undefined}
        */
        Object.defineProperty(this, 'subject', {
            enumerable: true,
            get: () => this.__data.subject,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.subject = new Reference(value);
            }
        });

        /**
         * @description Where a specific encounter should be classified as a part of a specific
    episode(s) of care this field should be used. This association can facilitate
    grouping of related encounters together for a specific purpose, such as
    government reporting, issue tracking, association via a common problem.  The
    association is recorded on the encounter as these are typically created after
    the episode of care and grouped on entry rather than editing the episode of
    care to append another encounter to it (the episode of care could span years).
         * @property {EpisodeOfCare[]|undefined}
        */
        Object.defineProperty(this, 'episodeOfCare', {
            enumerable: true,
            get: () => this.__data.episodeOfCare,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.episodeOfCare = new Reference(value);
            }
        });

        /**
         * @description The request this encounter satisfies (e.g. incoming referral or procedure
    request).
         * @property {ServiceRequest[]|undefined}
        */
        Object.defineProperty(this, 'basedOn', {
            enumerable: true,
            get: () => this.__data.basedOn,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.basedOn = new Reference(value);
            }
        });

        /**
         * @description The list of people responsible for providing the service.
         * @property {EncounterParticipant[]|undefined}
        */
        Object.defineProperty(this, 'participant', {
            enumerable: true,
            get: () => this.__data.participant,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let EncounterParticipant = require('../backbone_elements/encounterParticipant.js');
                this.__data.participant = new EncounterParticipant(value);
            }
        });

        /**
         * @description The appointment that scheduled this encounter.
         * @property {Appointment[]|undefined}
        */
        Object.defineProperty(this, 'appointment', {
            enumerable: true,
            get: () => this.__data.appointment,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.appointment = new Reference(value);
            }
        });

        /**
         * @description The start and end time of the encounter.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'period', {
            enumerable: true,
            get: () => this.__data.period,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.period = new Period(value);
            }
        });

        /**
         * @description Quantity of time the encounter lasted. This excludes the time during leaves of
    absence.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'length', {
            enumerable: true,
            get: () => this.__data.length,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.length = new Quantity(value);
            }
        });

        /**
         * @description Reason the encounter takes place, expressed as a code. For admissions, this
    can be used for a coded admission diagnosis.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'reasonCode', {
            enumerable: true,
            get: () => this.__data.reasonCode,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.reasonCode = new CodeableConcept(value);
            }
        });

        /**
         * @description Reason the encounter takes place, expressed as a code. For admissions, this
    can be used for a coded admission diagnosis.
         * @property {EncounterReasonReference[]|undefined}
        */
        Object.defineProperty(this, 'reasonReference', {
            enumerable: true,
            get: () => this.__data.reasonReference,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.reasonReference = new Reference(value);
            }
        });

        /**
         * @description The list of diagnosis relevant to this encounter.
         * @property {EncounterDiagnosis[]|undefined}
        */
        Object.defineProperty(this, 'diagnosis', {
            enumerable: true,
            get: () => this.__data.diagnosis,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let EncounterDiagnosis = require('../backbone_elements/encounterDiagnosis.js');
                this.__data.diagnosis = new EncounterDiagnosis(value);
            }
        });

        /**
         * @description The set of accounts that may be used for billing for this Encounter.
         * @property {Account[]|undefined}
        */
        Object.defineProperty(this, 'account', {
            enumerable: true,
            get: () => this.__data.account,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.account = new Reference(value);
            }
        });

        /**
         * @description Details about the admission to a healthcare service.
         * @property {EncounterHospitalization|undefined}
        */
        Object.defineProperty(this, 'hospitalization', {
            enumerable: true,
            get: () => this.__data.hospitalization,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let EncounterHospitalization = require('../backbone_elements/encounterHospitalization.js');
                this.__data.hospitalization = new EncounterHospitalization(value);
            }
        });

        /**
         * @description List of locations where  the patient has been during this encounter.
         * @property {EncounterLocation[]|undefined}
        */
        Object.defineProperty(this, 'location', {
            enumerable: true,
            get: () => this.__data.location,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let EncounterLocation = require('../backbone_elements/encounterLocation.js');
                this.__data.location = new EncounterLocation(value);
            }
        });

        /**
         * @description The organization that is primarily responsible for this Encounter's services.
    This MAY be the same as the organization on the Patient record, however it
    could be different, such as if the actor performing the services was from an
    external organization (which may be billed seperately) for an external
    consultation.  Refer to the example bundle showing an abbreviated set of
    Encounters for a colonoscopy.
         * @property {Organization|undefined}
        */
        Object.defineProperty(this, 'serviceProvider', {
            enumerable: true,
            get: () => this.__data.serviceProvider,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.serviceProvider = new Reference(value);
            }
        });

        /**
         * @description Another Encounter of which this encounter is a part of (administratively or in
    time).
         * @property {Encounter|undefined}
        */
        Object.defineProperty(this, 'partOf', {
            enumerable: true,
            get: () => this.__data.partOf,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.partOf = new Reference(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Encounter',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Encounter';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id && this.id.toJSON(),
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules && this.implicitRules.toJSON(),
            language: this.language && this.language.toJSON(),
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.toJSON(),
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            identifier: this.identifier && this.identifier.toJSON(),
            status: this.status && this.status.toJSON(),
            statusHistory: this.statusHistory && this.statusHistory.toJSON(),
            class: this.class && this.class.toJSON(),
            classHistory: this.classHistory && this.classHistory.toJSON(),
            type: this.type && this.type.toJSON(),
            serviceType: this.serviceType && this.serviceType.toJSON(),
            priority: this.priority && this.priority.toJSON(),
            subject: this.subject && this.subject.toJSON(),
            episodeOfCare: this.episodeOfCare && this.episodeOfCare.toJSON(),
            basedOn: this.basedOn && this.basedOn.toJSON(),
            participant: this.participant && this.participant.toJSON(),
            appointment: this.appointment && this.appointment.toJSON(),
            period: this.period && this.period.toJSON(),
            length: this.length && this.length.toJSON(),
            reasonCode: this.reasonCode && this.reasonCode.toJSON(),
            reasonReference: this.reasonReference && this.reasonReference.toJSON(),
            diagnosis: this.diagnosis && this.diagnosis.toJSON(),
            account: this.account && this.account.toJSON(),
            hospitalization: this.hospitalization && this.hospitalization.toJSON(),
            location: this.location && this.location.toJSON(),
            serviceProvider: this.serviceProvider && this.serviceProvider.toJSON(),
            partOf: this.partOf && this.partOf.toJSON(),
        };
    }
}

module.exports = Encounter;
