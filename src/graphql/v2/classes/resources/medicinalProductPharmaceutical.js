// This file is auto-generated by generate_classes so do not edit manually

/**
MedicinalProductPharmaceutical
    A pharmaceutical product described in terms of its composition and dose form.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class MedicinalProductPharmaceutical {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.implicitRules = value;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.contained = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description An identifier for the pharmaceutical medicinal product.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(value) ? value.map(v => new Identifier(v)) : [new Identifier(value)];
            }
        });

        /**
         * @description The administrable dose form, after necessary reconstitution.
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'administrableDoseForm', {
            enumerable: true,
            get: () => this.__data.administrableDoseForm,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.administrableDoseForm = new CodeableConcept(value);
            }
        });

        /**
         * @description Todo.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'unitOfPresentation', {
            enumerable: true,
            get: () => this.__data.unitOfPresentation,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.unitOfPresentation = new CodeableConcept(value);
            }
        });

        /**
         * @description Ingredient.
         * @property {MedicinalProductIngredient[]|undefined}
        */
        Object.defineProperty(this, 'ingredient', {
            enumerable: true,
            get: () => this.__data.ingredient,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.ingredient = Array.isArray(value) ? value.map(v => new Reference(v)) : [new Reference(value)];
            }
        });

        /**
         * @description Accompanying device.
         * @property {DeviceDefinition[]|undefined}
        */
        Object.defineProperty(this, 'device', {
            enumerable: true,
            get: () => this.__data.device,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.device = Array.isArray(value) ? value.map(v => new Reference(v)) : [new Reference(value)];
            }
        });

        /**
         * @description Characteristics e.g. a products onset of action.
         * @property {MedicinalProductPharmaceuticalCharacteristics[]|undefined}
        */
        Object.defineProperty(this, 'characteristics', {
            enumerable: true,
            get: () => this.__data.characteristics,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let MedicinalProductPharmaceuticalCharacteristics = require('../backbone_elements/medicinalProductPharmaceuticalCharacteristics.js');
                this.__data.characteristics = Array.isArray(value) ? value.map(v => new MedicinalProductPharmaceuticalCharacteristics(v)) : [new MedicinalProductPharmaceuticalCharacteristics(value)];
            }
        });

        /**
         * @description The path by which the pharmaceutical product is taken into or makes contact
    with the body.
         * @property {MedicinalProductPharmaceuticalRouteOfAdministration[]}
        */
        Object.defineProperty(this, 'routeOfAdministration', {
            enumerable: true,
            get: () => this.__data.routeOfAdministration,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let MedicinalProductPharmaceuticalRouteOfAdministration = require('../backbone_elements/medicinalProductPharmaceuticalRouteOfAdministration.js');
                this.__data.routeOfAdministration = Array.isArray(value) ? value.map(v => new MedicinalProductPharmaceuticalRouteOfAdministration(v)) : [new MedicinalProductPharmaceuticalRouteOfAdministration(value)];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'MedicinalProductPharmaceutical',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'MedicinalProductPharmaceutical';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            administrableDoseForm: this.administrableDoseForm && this.administrableDoseForm.toJSON(),
            unitOfPresentation: this.unitOfPresentation && this.unitOfPresentation.toJSON(),
            ingredient: this.ingredient && this.ingredient.map(v => v.toJSON()),
            device: this.device && this.device.map(v => v.toJSON()),
            characteristics: this.characteristics && this.characteristics.map(v => v.toJSON()),
            routeOfAdministration: this.routeOfAdministration && this.routeOfAdministration.map(v => v.toJSON()),
        };
    }
}

module.exports = MedicinalProductPharmaceutical;
