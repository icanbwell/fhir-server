// This file is auto-generated by generate_classes so do not edit manually

/**
MedicationKnowledge
    Information about a medication that is used to support knowledge.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class MedicationKnowledge {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.implicitRules = value;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.contained = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description A code that specifies this medication, or a textual description if no code is
    available. Usage note: This could be a standard medication code such as a code
    from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local
    formulary code, optionally with translations to other code systems.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            get: () => this.__data.code,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.code = new CodeableConcept(value);
            }
        });

        /**
         * @description A code to indicate if the medication is in active use.  The status refers to
    the validity about the information of the medication and not to its medicinal
    properties.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.status = value;
            }
        });

        /**
         * @description Describes the details of the manufacturer of the medication product.  This is
    not intended to represent the distributor of a medication product.
         * @property {Organization|undefined}
        */
        Object.defineProperty(this, 'manufacturer', {
            enumerable: true,
            get: () => this.__data.manufacturer,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.manufacturer = new Reference(value);
            }
        });

        /**
         * @description Describes the form of the item.  Powder; tablets; capsule.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'doseForm', {
            enumerable: true,
            get: () => this.__data.doseForm,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.doseForm = new CodeableConcept(value);
            }
        });

        /**
         * @description Specific amount of the drug in the packaged product.  For example, when
    specifying a product that has the same strength (For example, Insulin glargine
    100 unit per mL solution for injection), this attribute provides additional
    clarification of the package amount (For example, 3 mL, 10mL, etc.).
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'amount', {
            enumerable: true,
            get: () => this.__data.amount,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.amount = new Quantity(value);
            }
        });

        /**
         * @description Additional names for a medication, for example, the name(s) given to a
    medication in different countries.  For example, acetaminophen and paracetamol
    or salbutamol and albuterol.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'synonym', {
            enumerable: true,
            get: () => this.__data.synonym,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.synonym = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description Associated or related knowledge about a medication.
         * @property {MedicationKnowledgeRelatedMedicationKnowledge[]|undefined}
        */
        Object.defineProperty(this, 'relatedMedicationKnowledge', {
            enumerable: true,
            get: () => this.__data.relatedMedicationKnowledge,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let MedicationKnowledgeRelatedMedicationKnowledge = require('../backbone_elements/medicationKnowledgeRelatedMedicationKnowledge.js');
                this.__data.relatedMedicationKnowledge = Array.isArray(value) ? value.map(v => new MedicationKnowledgeRelatedMedicationKnowledge(v)) : [new MedicationKnowledgeRelatedMedicationKnowledge(value)];
            }
        });

        /**
         * @description Associated or related medications.  For example, if the medication is a
    branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g.
    Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin), this
    would link to a branded product (e.g. Crestor).
         * @property {Medication[]|undefined}
        */
        Object.defineProperty(this, 'associatedMedication', {
            enumerable: true,
            get: () => this.__data.associatedMedication,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.associatedMedication = Array.isArray(value) ? value.map(v => new Reference(v)) : [new Reference(value)];
            }
        });

        /**
         * @description Category of the medication or product (e.g. branded product, therapeutic
    moeity, generic product, innovator product, etc.).
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'productType', {
            enumerable: true,
            get: () => this.__data.productType,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.productType = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description Associated documentation about the medication.
         * @property {MedicationKnowledgeMonograph[]|undefined}
        */
        Object.defineProperty(this, 'monograph', {
            enumerable: true,
            get: () => this.__data.monograph,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let MedicationKnowledgeMonograph = require('../backbone_elements/medicationKnowledgeMonograph.js');
                this.__data.monograph = Array.isArray(value) ? value.map(v => new MedicationKnowledgeMonograph(v)) : [new MedicationKnowledgeMonograph(value)];
            }
        });

        /**
         * @description Identifies a particular constituent of interest in the product.
         * @property {MedicationKnowledgeIngredient[]|undefined}
        */
        Object.defineProperty(this, 'ingredient', {
            enumerable: true,
            get: () => this.__data.ingredient,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let MedicationKnowledgeIngredient = require('../backbone_elements/medicationKnowledgeIngredient.js');
                this.__data.ingredient = Array.isArray(value) ? value.map(v => new MedicationKnowledgeIngredient(v)) : [new MedicationKnowledgeIngredient(value)];
            }
        });

        /**
         * @description The instructions for preparing the medication.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'preparationInstruction', {
            enumerable: true,
            get: () => this.__data.preparationInstruction,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.preparationInstruction = value;
            }
        });

        /**
         * @description The intended or approved route of administration.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'intendedRoute', {
            enumerable: true,
            get: () => this.__data.intendedRoute,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.intendedRoute = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description The price of the medication.
         * @property {MedicationKnowledgeCost[]|undefined}
        */
        Object.defineProperty(this, 'cost', {
            enumerable: true,
            get: () => this.__data.cost,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let MedicationKnowledgeCost = require('../backbone_elements/medicationKnowledgeCost.js');
                this.__data.cost = Array.isArray(value) ? value.map(v => new MedicationKnowledgeCost(v)) : [new MedicationKnowledgeCost(value)];
            }
        });

        /**
         * @description The program under which the medication is reviewed.
         * @property {MedicationKnowledgeMonitoringProgram[]|undefined}
        */
        Object.defineProperty(this, 'monitoringProgram', {
            enumerable: true,
            get: () => this.__data.monitoringProgram,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let MedicationKnowledgeMonitoringProgram = require('../backbone_elements/medicationKnowledgeMonitoringProgram.js');
                this.__data.monitoringProgram = Array.isArray(value) ? value.map(v => new MedicationKnowledgeMonitoringProgram(v)) : [new MedicationKnowledgeMonitoringProgram(value)];
            }
        });

        /**
         * @description Guidelines for the administration of the medication.
         * @property {MedicationKnowledgeAdministrationGuidelines[]|undefined}
        */
        Object.defineProperty(this, 'administrationGuidelines', {
            enumerable: true,
            get: () => this.__data.administrationGuidelines,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let MedicationKnowledgeAdministrationGuidelines = require('../backbone_elements/medicationKnowledgeAdministrationGuidelines.js');
                this.__data.administrationGuidelines = Array.isArray(value) ? value.map(v => new MedicationKnowledgeAdministrationGuidelines(v)) : [new MedicationKnowledgeAdministrationGuidelines(value)];
            }
        });

        /**
         * @description Categorization of the medication within a formulary or classification system.
         * @property {MedicationKnowledgeMedicineClassification[]|undefined}
        */
        Object.defineProperty(this, 'medicineClassification', {
            enumerable: true,
            get: () => this.__data.medicineClassification,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let MedicationKnowledgeMedicineClassification = require('../backbone_elements/medicationKnowledgeMedicineClassification.js');
                this.__data.medicineClassification = Array.isArray(value) ? value.map(v => new MedicationKnowledgeMedicineClassification(v)) : [new MedicationKnowledgeMedicineClassification(value)];
            }
        });

        /**
         * @description Information that only applies to packages (not products).
         * @property {MedicationKnowledgePackaging|undefined}
        */
        Object.defineProperty(this, 'packaging', {
            enumerable: true,
            get: () => this.__data.packaging,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let MedicationKnowledgePackaging = require('../backbone_elements/medicationKnowledgePackaging.js');
                this.__data.packaging = new MedicationKnowledgePackaging(value);
            }
        });

        /**
         * @description Specifies descriptive properties of the medicine, such as color, shape,
    imprints, etc.
         * @property {MedicationKnowledgeDrugCharacteristic[]|undefined}
        */
        Object.defineProperty(this, 'drugCharacteristic', {
            enumerable: true,
            get: () => this.__data.drugCharacteristic,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let MedicationKnowledgeDrugCharacteristic = require('../backbone_elements/medicationKnowledgeDrugCharacteristic.js');
                this.__data.drugCharacteristic = Array.isArray(value) ? value.map(v => new MedicationKnowledgeDrugCharacteristic(v)) : [new MedicationKnowledgeDrugCharacteristic(value)];
            }
        });

        /**
         * @description Potential clinical issue with or between medication(s) (for example, drug-drug
    interaction, drug-disease contraindication, drug-allergy interaction, etc.).
         * @property {DetectedIssue[]|undefined}
        */
        Object.defineProperty(this, 'contraindication', {
            enumerable: true,
            get: () => this.__data.contraindication,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.contraindication = Array.isArray(value) ? value.map(v => new Reference(v)) : [new Reference(value)];
            }
        });

        /**
         * @description Regulatory information about a medication.
         * @property {MedicationKnowledgeRegulatory[]|undefined}
        */
        Object.defineProperty(this, 'regulatory', {
            enumerable: true,
            get: () => this.__data.regulatory,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let MedicationKnowledgeRegulatory = require('../backbone_elements/medicationKnowledgeRegulatory.js');
                this.__data.regulatory = Array.isArray(value) ? value.map(v => new MedicationKnowledgeRegulatory(v)) : [new MedicationKnowledgeRegulatory(value)];
            }
        });

        /**
         * @description The time course of drug absorption, distribution, metabolism and excretion of
    a medication from the body.
         * @property {MedicationKnowledgeKinetics[]|undefined}
        */
        Object.defineProperty(this, 'kinetics', {
            enumerable: true,
            get: () => this.__data.kinetics,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let MedicationKnowledgeKinetics = require('../backbone_elements/medicationKnowledgeKinetics.js');
                this.__data.kinetics = Array.isArray(value) ? value.map(v => new MedicationKnowledgeKinetics(v)) : [new MedicationKnowledgeKinetics(value)];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'MedicationKnowledge',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'MedicationKnowledge';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            code: this.code && this.code.toJSON(),
            status: this.status,
            manufacturer: this.manufacturer && this.manufacturer.toJSON(),
            doseForm: this.doseForm && this.doseForm.toJSON(),
            amount: this.amount && this.amount.toJSON(),
            synonym: this.synonym,
            relatedMedicationKnowledge: this.relatedMedicationKnowledge && this.relatedMedicationKnowledge.map(v => v.toJSON()),
            associatedMedication: this.associatedMedication && this.associatedMedication.map(v => v.toJSON()),
            productType: this.productType && this.productType.map(v => v.toJSON()),
            monograph: this.monograph && this.monograph.map(v => v.toJSON()),
            ingredient: this.ingredient && this.ingredient.map(v => v.toJSON()),
            preparationInstruction: this.preparationInstruction,
            intendedRoute: this.intendedRoute && this.intendedRoute.map(v => v.toJSON()),
            cost: this.cost && this.cost.map(v => v.toJSON()),
            monitoringProgram: this.monitoringProgram && this.monitoringProgram.map(v => v.toJSON()),
            administrationGuidelines: this.administrationGuidelines && this.administrationGuidelines.map(v => v.toJSON()),
            medicineClassification: this.medicineClassification && this.medicineClassification.map(v => v.toJSON()),
            packaging: this.packaging && this.packaging.toJSON(),
            drugCharacteristic: this.drugCharacteristic && this.drugCharacteristic.map(v => v.toJSON()),
            contraindication: this.contraindication && this.contraindication.map(v => v.toJSON()),
            regulatory: this.regulatory && this.regulatory.map(v => v.toJSON()),
            kinetics: this.kinetics && this.kinetics.map(v => v.toJSON()),
        };
    }
}

module.exports = MedicationKnowledge;
