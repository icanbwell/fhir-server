// This file is auto-generated by generate_classes so do not edit manually

/**
Provenance
    Provenance of a resource is a record that describes entities and processes
    involved in producing and delivering or otherwise influencing that resource.
    Provenance provides a critical foundation for assessing authenticity, enabling
    trust, and allowing reproducibility. Provenance assertions are a form of
    contextual metadata and can themselves become important records with their own
    provenance. Provenance statement indicates clinical significance in terms of
    confidence in authenticity, reliability, and trustworthiness, integrity, and
    stage in lifecycle (e.g. Document Completion - has the artifact been legally
    authenticated), all of which may impact security, privacy, and trust policies.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class Provenance {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.id = new id(value);
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.implicitRules = new uri(value);
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                // eslint-disable-next-line new-cap
                this.__data.contained = new ResourceContainer(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description The Reference(s) that were generated or updated by  the activity described in
    this resource. A provenance can point to more than one target if multiple
    resources were created/updated by the same activity.
         * @property {Resource[]}
        */
        Object.defineProperty(this, 'target', {
            enumerable: true,
            get: () => this.__data.target,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.target = new Reference(value);
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'occurredPeriod', {
            enumerable: true,
            get: () => this.__data.occurredPeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.occurredPeriod = new Period(value);
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'occurredDateTime', {
            enumerable: true,
            get: () => this.__data.occurredDateTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let dateTime = require('../simple_types/dateTime.js');
                // eslint-disable-next-line new-cap
                this.__data.occurredDateTime = new dateTime(value);
            }
        });

        /**
         * @description The instant of time at which the activity was recorded.
         * @property {instant}
        */
        Object.defineProperty(this, 'recorded', {
            enumerable: true,
            get: () => this.__data.recorded,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let instant = require('../simple_types/instant.js');
                // eslint-disable-next-line new-cap
                this.__data.recorded = new instant(value);
            }
        });

        /**
         * @description Policy or plan the activity was defined by. Typically, a single activity may
    have multiple applicable policy documents, such as patient consent, guarantor
    funding, etc.
         * @property {uri[]|undefined}
        */
        Object.defineProperty(this, 'policy', {
            enumerable: true,
            get: () => this.__data.policy,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.policy = new uri(value);
            }
        });

        /**
         * @description Where the activity occurred, if relevant.
         * @property {Location|undefined}
        */
        Object.defineProperty(this, 'location', {
            enumerable: true,
            get: () => this.__data.location,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.location = new Reference(value);
            }
        });

        /**
         * @description The reason that the activity was taking place.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'reason', {
            enumerable: true,
            get: () => this.__data.reason,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.reason = new CodeableConcept(value);
            }
        });

        /**
         * @description An activity is something that occurs over a period of time and acts upon or
    with entities; it may include consuming, processing, transforming, modifying,
    relocating, using, or generating entities.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'activity', {
            enumerable: true,
            get: () => this.__data.activity,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.activity = new CodeableConcept(value);
            }
        });

        /**
         * @description An actor taking a role in an activity  for which it can be assigned some
    degree of responsibility for the activity taking place.
         * @property {ProvenanceAgent[]}
        */
        Object.defineProperty(this, 'agent', {
            enumerable: true,
            get: () => this.__data.agent,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ProvenanceAgent = require('../backbone_elements/provenanceAgent.js');
                this.__data.agent = new ProvenanceAgent(value);
            }
        });

        /**
         * @description An entity used in this activity.
         * @property {ProvenanceEntity[]|undefined}
        */
        Object.defineProperty(this, 'entity', {
            enumerable: true,
            get: () => this.__data.entity,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ProvenanceEntity = require('../backbone_elements/provenanceEntity.js');
                this.__data.entity = new ProvenanceEntity(value);
            }
        });

        /**
         * @description A digital signature on the target Reference(s). The signer should match a
    Provenance.agent. The purpose of the signature is indicated.
         * @property {Signature[]|undefined}
        */
        Object.defineProperty(this, 'signature', {
            enumerable: true,
            get: () => this.__data.signature,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Signature = require('../complex_types/signature.js');
                this.__data.signature = new Signature(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Provenance',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Provenance';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id && this.id.toJSON(),
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules && this.implicitRules.toJSON(),
            language: this.language && this.language.toJSON(),
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.toJSON(),
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            target: this.target && this.target.toJSON(),
            occurredPeriod: this.occurredPeriod && this.occurredPeriod.toJSON(),
            occurredDateTime: this.occurredDateTime && this.occurredDateTime.toJSON(),
            recorded: this.recorded && this.recorded.toJSON(),
            policy: this.policy && this.policy.toJSON(),
            location: this.location && this.location.toJSON(),
            reason: this.reason && this.reason.toJSON(),
            activity: this.activity && this.activity.toJSON(),
            agent: this.agent && this.agent.toJSON(),
            entity: this.entity && this.entity.toJSON(),
            signature: this.signature && this.signature.toJSON(),
        };
    }
}

module.exports = Provenance;
