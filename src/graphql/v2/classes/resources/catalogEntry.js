// This file is auto-generated by generate_classes so do not edit manually

/**
CatalogEntry
    Catalog entries are wrappers that contextualize items included in a catalog.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class CatalogEntry {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.id = new id(value);
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.implicitRules = new uri(value);
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                // eslint-disable-next-line new-cap
                this.__data.contained = new ResourceContainer(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description Used in supporting different identifiers for the same product, e.g.
    manufacturer code and retailer code.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = new Identifier(value);
            }
        });

        /**
         * @description The type of item - medication, device, service, protocol or other.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.type = new CodeableConcept(value);
            }
        });

        /**
         * @description Whether the entry represents an orderable item.
         * @property {Boolean}
        */
        Object.defineProperty(this, 'orderable', {
            enumerable: true,
            get: () => this.__data.orderable,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.orderable = value;
            }
        });

        /**
         * @description The item in a catalog or definition.
         * @property {CatalogEntryReferencedItem}
        */
        Object.defineProperty(this, 'referencedItem', {
            enumerable: true,
            get: () => this.__data.referencedItem,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.referencedItem = new Reference(value);
            }
        });

        /**
         * @description Used in supporting related concepts, e.g. NDC to RxNorm.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'additionalIdentifier', {
            enumerable: true,
            get: () => this.__data.additionalIdentifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.additionalIdentifier = new Identifier(value);
            }
        });

        /**
         * @description Classes of devices, or ATC for medication.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'classification', {
            enumerable: true,
            get: () => this.__data.classification,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.classification = new CodeableConcept(value);
            }
        });

        /**
         * @description Used to support catalog exchange even for unsupported products, e.g. getting
    list of medications even if not prescribable.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.status = value;
            }
        });

        /**
         * @description The time period in which this catalog entry is expected to be active.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'validityPeriod', {
            enumerable: true,
            get: () => this.__data.validityPeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.validityPeriod = new Period(value);
            }
        });

        /**
         * @description The date until which this catalog entry is expected to be active.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'validTo', {
            enumerable: true,
            get: () => this.__data.validTo,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let dateTime = require('../simple_types/dateTime.js');
                // eslint-disable-next-line new-cap
                this.__data.validTo = new dateTime(value);
            }
        });

        /**
         * @description Typically date of issue is different from the beginning of the validity. This
    can be used to see when an item was last updated.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'lastUpdated', {
            enumerable: true,
            get: () => this.__data.lastUpdated,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let dateTime = require('../simple_types/dateTime.js');
                // eslint-disable-next-line new-cap
                this.__data.lastUpdated = new dateTime(value);
            }
        });

        /**
         * @description Used for examplefor Out of Formulary, or any specifics.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'additionalCharacteristic', {
            enumerable: true,
            get: () => this.__data.additionalCharacteristic,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.additionalCharacteristic = new CodeableConcept(value);
            }
        });

        /**
         * @description User for example for ATC classification, or.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'additionalClassification', {
            enumerable: true,
            get: () => this.__data.additionalClassification,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.additionalClassification = new CodeableConcept(value);
            }
        });

        /**
         * @description Used for example, to point to a substance, or to a device used to administer a
    medication.
         * @property {CatalogEntryRelatedEntry[]|undefined}
        */
        Object.defineProperty(this, 'relatedEntry', {
            enumerable: true,
            get: () => this.__data.relatedEntry,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CatalogEntryRelatedEntry = require('../backbone_elements/catalogEntryRelatedEntry.js');
                this.__data.relatedEntry = new CatalogEntryRelatedEntry(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'CatalogEntry',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'CatalogEntry';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id && this.id.toJSON(),
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules && this.implicitRules.toJSON(),
            language: this.language && this.language.toJSON(),
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.toJSON(),
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            identifier: this.identifier && this.identifier.toJSON(),
            type: this.type && this.type.toJSON(),
            orderable: this.orderable,
            referencedItem: this.referencedItem && this.referencedItem.toJSON(),
            additionalIdentifier: this.additionalIdentifier && this.additionalIdentifier.toJSON(),
            classification: this.classification && this.classification.toJSON(),
            status: this.status && this.status.toJSON(),
            validityPeriod: this.validityPeriod && this.validityPeriod.toJSON(),
            validTo: this.validTo && this.validTo.toJSON(),
            lastUpdated: this.lastUpdated && this.lastUpdated.toJSON(),
            additionalCharacteristic: this.additionalCharacteristic && this.additionalCharacteristic.toJSON(),
            additionalClassification: this.additionalClassification && this.additionalClassification.toJSON(),
            relatedEntry: this.relatedEntry && this.relatedEntry.toJSON(),
        };
    }
}

module.exports = CatalogEntry;
