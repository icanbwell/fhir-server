// This file is auto-generated by generate_classes so do not edit manually

/**
ImagingStudy
    Representation of the content produced in a DICOM imaging study. A study
    comprises a set of series, each of which includes a set of Service-Object Pair
    Instances (SOP Instances - images or other data) acquired or produced in a
    common context.  A series is of only one modality (e.g. X-ray, CT, MR,
    ultrasound), but a study may have multiple series of different modalities.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class ImagingStudy {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.id = new id(value);
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.implicitRules = new uri(value);
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                // eslint-disable-next-line new-cap
                this.__data.contained = new ResourceContainer(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description Identifiers for the ImagingStudy such as DICOM Study Instance UID, and
    Accession Number.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = new Identifier(value);
            }
        });

        /**
         * @description The current state of the ImagingStudy.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.status = value;
            }
        });

        /**
         * @description A list of all the series.modality values that are actual acquisition
    modalities, i.e. those in the DICOM Context Group 29 (value set OID
    1.2.840.10008.6.1.19).
         * @property {Coding[]|undefined}
        */
        Object.defineProperty(this, 'modality', {
            enumerable: true,
            get: () => this.__data.modality,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.modality = new Coding(value);
            }
        });

        /**
         * @description The subject, typically a patient, of the imaging study.
         * @property {ImagingStudySubject}
        */
        Object.defineProperty(this, 'subject', {
            enumerable: true,
            get: () => this.__data.subject,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.subject = new Reference(value);
            }
        });

        /**
         * @description The healthcare event (e.g. a patient and healthcare provider interaction)
    during which this ImagingStudy is made.
         * @property {Encounter|undefined}
        */
        Object.defineProperty(this, 'encounter', {
            enumerable: true,
            get: () => this.__data.encounter,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.encounter = new Reference(value);
            }
        });

        /**
         * @description Date and time the study started.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'started', {
            enumerable: true,
            get: () => this.__data.started,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let dateTime = require('../simple_types/dateTime.js');
                // eslint-disable-next-line new-cap
                this.__data.started = new dateTime(value);
            }
        });

        /**
         * @description A list of the diagnostic requests that resulted in this imaging study being
    performed.
         * @property {ImagingStudyBasedOn[]|undefined}
        */
        Object.defineProperty(this, 'basedOn', {
            enumerable: true,
            get: () => this.__data.basedOn,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.basedOn = new Reference(value);
            }
        });

        /**
         * @description The requesting/referring physician.
         * @property {ImagingStudyReferrer|undefined}
        */
        Object.defineProperty(this, 'referrer', {
            enumerable: true,
            get: () => this.__data.referrer,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.referrer = new Reference(value);
            }
        });

        /**
         * @description Who read the study and interpreted the images or other content.
         * @property {ImagingStudyInterpreter[]|undefined}
        */
        Object.defineProperty(this, 'interpreter', {
            enumerable: true,
            get: () => this.__data.interpreter,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.interpreter = new Reference(value);
            }
        });

        /**
         * @description The network service providing access (e.g., query, view, or retrieval) for the
    study. See implementation notes for information about using DICOM endpoints. A
    study-level endpoint applies to each series in the study, unless overridden by
    a series-level endpoint with the same Endpoint.connectionType.
         * @property {Endpoint[]|undefined}
        */
        Object.defineProperty(this, 'endpoint', {
            enumerable: true,
            get: () => this.__data.endpoint,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.endpoint = new Reference(value);
            }
        });

        /**
         * @description Number of Series in the Study. This value given may be larger than the number
    of series elements this Resource contains due to resource availability,
    security, or other factors. This element should be present if any series
    elements are present.
         * @property {unsignedInt|undefined}
        */
        Object.defineProperty(this, 'numberOfSeries', {
            enumerable: true,
            get: () => this.__data.numberOfSeries,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let unsignedInt = require('../simple_types/unsignedInt.js');
                // eslint-disable-next-line new-cap
                this.__data.numberOfSeries = new unsignedInt(value);
            }
        });

        /**
         * @description Number of SOP Instances in Study. This value given may be larger than the
    number of instance elements this resource contains due to resource
    availability, security, or other factors. This element should be present if
    any instance elements are present.
         * @property {unsignedInt|undefined}
        */
        Object.defineProperty(this, 'numberOfInstances', {
            enumerable: true,
            get: () => this.__data.numberOfInstances,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let unsignedInt = require('../simple_types/unsignedInt.js');
                // eslint-disable-next-line new-cap
                this.__data.numberOfInstances = new unsignedInt(value);
            }
        });

        /**
         * @description The procedure which this ImagingStudy was part of.
         * @property {Procedure|undefined}
        */
        Object.defineProperty(this, 'procedureReference', {
            enumerable: true,
            get: () => this.__data.procedureReference,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.procedureReference = new Reference(value);
            }
        });

        /**
         * @description The code for the performed procedure type.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'procedureCode', {
            enumerable: true,
            get: () => this.__data.procedureCode,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.procedureCode = new CodeableConcept(value);
            }
        });

        /**
         * @description The principal physical location where the ImagingStudy was performed.
         * @property {Location|undefined}
        */
        Object.defineProperty(this, 'location', {
            enumerable: true,
            get: () => this.__data.location,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.location = new Reference(value);
            }
        });

        /**
         * @description Description of clinical condition indicating why the ImagingStudy was
    requested.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'reasonCode', {
            enumerable: true,
            get: () => this.__data.reasonCode,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.reasonCode = new CodeableConcept(value);
            }
        });

        /**
         * @description Indicates another resource whose existence justifies this Study.
         * @property {ImagingStudyReasonReference[]|undefined}
        */
        Object.defineProperty(this, 'reasonReference', {
            enumerable: true,
            get: () => this.__data.reasonReference,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.reasonReference = new Reference(value);
            }
        });

        /**
         * @description Per the recommended DICOM mapping, this element is derived from the Study
    Description attribute (0008,1030). Observations or findings about the imaging
    study should be recorded in another resource, e.g. Observation, and not in
    this element.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            enumerable: true,
            get: () => this.__data.note,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.note = new Annotation(value);
            }
        });

        /**
         * @description The Imaging Manager description of the study. Institution-generated
    description or classification of the Study (component) performed.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.description = value;
            }
        });

        /**
         * @description Each study has one or more series of images or other content.
         * @property {ImagingStudySeries[]|undefined}
        */
        Object.defineProperty(this, 'series', {
            enumerable: true,
            get: () => this.__data.series,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ImagingStudySeries = require('../backbone_elements/imagingStudySeries.js');
                this.__data.series = new ImagingStudySeries(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ImagingStudy',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ImagingStudy';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id && this.id.toJSON(),
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules && this.implicitRules.toJSON(),
            language: this.language && this.language.toJSON(),
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.toJSON(),
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            identifier: this.identifier && this.identifier.toJSON(),
            status: this.status && this.status.toJSON(),
            modality: this.modality && this.modality.toJSON(),
            subject: this.subject && this.subject.toJSON(),
            encounter: this.encounter && this.encounter.toJSON(),
            started: this.started && this.started.toJSON(),
            basedOn: this.basedOn && this.basedOn.toJSON(),
            referrer: this.referrer && this.referrer.toJSON(),
            interpreter: this.interpreter && this.interpreter.toJSON(),
            endpoint: this.endpoint && this.endpoint.toJSON(),
            numberOfSeries: this.numberOfSeries && this.numberOfSeries.toJSON(),
            numberOfInstances: this.numberOfInstances && this.numberOfInstances.toJSON(),
            procedureReference: this.procedureReference && this.procedureReference.toJSON(),
            procedureCode: this.procedureCode && this.procedureCode.toJSON(),
            location: this.location && this.location.toJSON(),
            reasonCode: this.reasonCode && this.reasonCode.toJSON(),
            reasonReference: this.reasonReference && this.reasonReference.toJSON(),
            note: this.note && this.note.toJSON(),
            description: this.description,
            series: this.series && this.series.toJSON(),
        };
    }
}

module.exports = ImagingStudy;
