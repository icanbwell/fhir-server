// This file is auto-generated by generate_classes so do not edit manually

/**
Patient
    Demographics and other administrative information about an individual or
    animal receiving care or other health-related services.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class Patient {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.id = new id(value);
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.implicitRules = new uri(value);
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                // eslint-disable-next-line new-cap
                this.__data.contained = new ResourceContainer(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description An identifier for this patient.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = new Identifier(value);
            }
        });

        /**
         * @description Whether this patient record is in active use.
    Many systems use this property to mark as non-current patients, such as those
    that have not been seen for a period of time based on an organization's
    business rules.

    It is often used to filter patient lists to exclude inactive patients

    Deceased patients may also be marked as inactive for the same reasons, but may
    be active for some time after death.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'active', {
            enumerable: true,
            get: () => this.__data.active,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.active = value;
            }
        });

        /**
         * @description A name associated with the individual.
         * @property {HumanName[]|undefined}
        */
        Object.defineProperty(this, 'name', {
            enumerable: true,
            get: () => this.__data.name,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let HumanName = require('../complex_types/humanName.js');
                this.__data.name = new HumanName(value);
            }
        });

        /**
         * @description A contact detail (e.g. a telephone number or an email address) by which the
    individual may be contacted.
         * @property {ContactPoint[]|undefined}
        */
        Object.defineProperty(this, 'telecom', {
            enumerable: true,
            get: () => this.__data.telecom,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContactPoint = require('../complex_types/contactPoint.js');
                this.__data.telecom = new ContactPoint(value);
            }
        });

        /**
         * @description Administrative Gender - the gender that the patient is considered to have for
    administration and record keeping purposes.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'gender', {
            enumerable: true,
            get: () => this.__data.gender,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.gender = value;
            }
        });

        /**
         * @description The date of birth for the individual.
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'birthDate', {
            enumerable: true,
            get: () => this.__data.birthDate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let date = require('../simple_types/date.js');
                // eslint-disable-next-line new-cap
                this.__data.birthDate = new date(value);
            }
        });

        /**
         * @description None
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'deceasedBoolean', {
            enumerable: true,
            get: () => this.__data.deceasedBoolean,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.deceasedBoolean = value;
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'deceasedDateTime', {
            enumerable: true,
            get: () => this.__data.deceasedDateTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let dateTime = require('../simple_types/dateTime.js');
                // eslint-disable-next-line new-cap
                this.__data.deceasedDateTime = new dateTime(value);
            }
        });

        /**
         * @description An address for the individual.
         * @property {Address[]|undefined}
        */
        Object.defineProperty(this, 'address', {
            enumerable: true,
            get: () => this.__data.address,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Address = require('../complex_types/address.js');
                this.__data.address = new Address(value);
            }
        });

        /**
         * @description This field contains a patient's most recent marital (civil) status.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'maritalStatus', {
            enumerable: true,
            get: () => this.__data.maritalStatus,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.maritalStatus = new CodeableConcept(value);
            }
        });

        /**
         * @description None
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'multipleBirthBoolean', {
            enumerable: true,
            get: () => this.__data.multipleBirthBoolean,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.multipleBirthBoolean = value;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'multipleBirthInteger', {
            enumerable: true,
            get: () => this.__data.multipleBirthInteger,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.multipleBirthInteger = value;
            }
        });

        /**
         * @description Image of the patient.
         * @property {Attachment[]|undefined}
        */
        Object.defineProperty(this, 'photo', {
            enumerable: true,
            get: () => this.__data.photo,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Attachment = require('../complex_types/attachment.js');
                this.__data.photo = new Attachment(value);
            }
        });

        /**
         * @description A contact party (e.g. guardian, partner, friend) for the patient.
         * @property {PatientContact[]|undefined}
        */
        Object.defineProperty(this, 'contact', {
            enumerable: true,
            get: () => this.__data.contact,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let PatientContact = require('../backbone_elements/patientContact.js');
                this.__data.contact = new PatientContact(value);
            }
        });

        /**
         * @description A language which may be used to communicate with the patient about his or her
    health.
         * @property {PatientCommunication[]|undefined}
        */
        Object.defineProperty(this, 'communication', {
            enumerable: true,
            get: () => this.__data.communication,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let PatientCommunication = require('../backbone_elements/patientCommunication.js');
                this.__data.communication = new PatientCommunication(value);
            }
        });

        /**
         * @description Patient's nominated care provider.
         * @property {PatientGeneralPractitioner[]|undefined}
        */
        Object.defineProperty(this, 'generalPractitioner', {
            enumerable: true,
            get: () => this.__data.generalPractitioner,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.generalPractitioner = new Reference(value);
            }
        });

        /**
         * @description Organization that is the custodian of the patient record.
         * @property {Organization|undefined}
        */
        Object.defineProperty(this, 'managingOrganization', {
            enumerable: true,
            get: () => this.__data.managingOrganization,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.managingOrganization = new Reference(value);
            }
        });

        /**
         * @description Link to another patient resource that concerns the same actual patient.
         * @property {PatientLink[]|undefined}
        */
        Object.defineProperty(this, 'link', {
            enumerable: true,
            get: () => this.__data.link,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let PatientLink = require('../backbone_elements/patientLink.js');
                this.__data.link = new PatientLink(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Patient',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Patient';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id && this.id.toJSON(),
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules && this.implicitRules.toJSON(),
            language: this.language && this.language.toJSON(),
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.toJSON(),
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            identifier: this.identifier && this.identifier.toJSON(),
            active: this.active,
            name: this.name && this.name.toJSON(),
            telecom: this.telecom && this.telecom.toJSON(),
            gender: this.gender && this.gender.toJSON(),
            birthDate: this.birthDate && this.birthDate.toJSON(),
            deceasedBoolean: this.deceasedBoolean,
            deceasedDateTime: this.deceasedDateTime && this.deceasedDateTime.toJSON(),
            address: this.address && this.address.toJSON(),
            maritalStatus: this.maritalStatus && this.maritalStatus.toJSON(),
            multipleBirthBoolean: this.multipleBirthBoolean,
            multipleBirthInteger: this.multipleBirthInteger,
            photo: this.photo && this.photo.toJSON(),
            contact: this.contact && this.contact.toJSON(),
            communication: this.communication && this.communication.toJSON(),
            generalPractitioner: this.generalPractitioner && this.generalPractitioner.toJSON(),
            managingOrganization: this.managingOrganization && this.managingOrganization.toJSON(),
            link: this.link && this.link.toJSON(),
        };
    }
}

module.exports = Patient;
