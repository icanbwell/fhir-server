// This file is auto-generated by generate_classes so do not edit manually

/**
Device
    A type of a manufactured item that is used in the provision of healthcare
    without being substantially changed through that activity. The device may be a
    medical or non-medical device.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class Device {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.id = new id(value);
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.implicitRules = new uri(value);
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                // eslint-disable-next-line new-cap
                this.__data.contained = new ResourceContainer(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description Unique instance identifiers assigned to a device by manufacturers other
    organizations or owners.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = new Identifier(value);
            }
        });

        /**
         * @description The reference to the definition for the device.
         * @property {DeviceDefinition|undefined}
        */
        Object.defineProperty(this, 'definition', {
            enumerable: true,
            get: () => this.__data.definition,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.definition = new Reference(value);
            }
        });

        /**
         * @description Unique device identifier (UDI) assigned to device label or package.  Note that
    the Device may include multiple udiCarriers as it either may include just the
    udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it
    could have been sold.
         * @property {DeviceUdiCarrier[]|undefined}
        */
        Object.defineProperty(this, 'udiCarrier', {
            enumerable: true,
            get: () => this.__data.udiCarrier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let DeviceUdiCarrier = require('../backbone_elements/deviceUdiCarrier.js');
                this.__data.udiCarrier = new DeviceUdiCarrier(value);
            }
        });

        /**
         * @description Status of the Device availability.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.status = value;
            }
        });

        /**
         * @description Reason for the dtatus of the Device availability.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'statusReason', {
            enumerable: true,
            get: () => this.__data.statusReason,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.statusReason = new CodeableConcept(value);
            }
        });

        /**
         * @description The distinct identification string as required by regulation for a human cell,
    tissue, or cellular and tissue-based product.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'distinctIdentifier', {
            enumerable: true,
            get: () => this.__data.distinctIdentifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.distinctIdentifier = value;
            }
        });

        /**
         * @description A name of the manufacturer.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'manufacturer', {
            enumerable: true,
            get: () => this.__data.manufacturer,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.manufacturer = value;
            }
        });

        /**
         * @description The date and time when the device was manufactured.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'manufactureDate', {
            enumerable: true,
            get: () => this.__data.manufactureDate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let dateTime = require('../simple_types/dateTime.js');
                // eslint-disable-next-line new-cap
                this.__data.manufactureDate = new dateTime(value);
            }
        });

        /**
         * @description The date and time beyond which this device is no longer valid or should not be
    used (if applicable).
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'expirationDate', {
            enumerable: true,
            get: () => this.__data.expirationDate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let dateTime = require('../simple_types/dateTime.js');
                // eslint-disable-next-line new-cap
                this.__data.expirationDate = new dateTime(value);
            }
        });

        /**
         * @description Lot number assigned by the manufacturer.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'lotNumber', {
            enumerable: true,
            get: () => this.__data.lotNumber,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.lotNumber = value;
            }
        });

        /**
         * @description The serial number assigned by the organization when the device was
    manufactured.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'serialNumber', {
            enumerable: true,
            get: () => this.__data.serialNumber,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.serialNumber = value;
            }
        });

        /**
         * @description This represents the manufacturer's name of the device as provided by the
    device, from a UDI label, or by a person describing the Device.  This
    typically would be used when a person provides the name(s) or when the device
    represents one of the names available from DeviceDefinition.
         * @property {DeviceDeviceName[]|undefined}
        */
        Object.defineProperty(this, 'deviceName', {
            enumerable: true,
            get: () => this.__data.deviceName,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let DeviceDeviceName = require('../backbone_elements/deviceDeviceName.js');
                this.__data.deviceName = new DeviceDeviceName(value);
            }
        });

        /**
         * @description The model number for the device.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'modelNumber', {
            enumerable: true,
            get: () => this.__data.modelNumber,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.modelNumber = value;
            }
        });

        /**
         * @description The part number of the device.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'partNumber', {
            enumerable: true,
            get: () => this.__data.partNumber,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.partNumber = value;
            }
        });

        /**
         * @description The kind or type of device.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.type = new CodeableConcept(value);
            }
        });

        /**
         * @description The capabilities supported on a  device, the standards to which the device
    conforms for a particular purpose, and used for the communication.
         * @property {DeviceSpecialization[]|undefined}
        */
        Object.defineProperty(this, 'specialization', {
            enumerable: true,
            get: () => this.__data.specialization,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let DeviceSpecialization = require('../backbone_elements/deviceSpecialization.js');
                this.__data.specialization = new DeviceSpecialization(value);
            }
        });

        /**
         * @description The actual design of the device or software version running on the device.
         * @property {DeviceVersion[]|undefined}
        */
        Object.defineProperty(this, 'version', {
            enumerable: true,
            get: () => this.__data.version,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let DeviceVersion = require('../backbone_elements/deviceVersion.js');
                this.__data.version = new DeviceVersion(value);
            }
        });

        /**
         * @description The actual configuration settings of a device as it actually operates, e.g.,
    regulation status, time properties.
         * @property {DeviceProperty[]|undefined}
        */
        Object.defineProperty(this, 'property', {
            enumerable: true,
            get: () => this.__data.property,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let DeviceProperty = require('../backbone_elements/deviceProperty.js');
                this.__data.property = new DeviceProperty(value);
            }
        });

        /**
         * @description Patient information, If the device is affixed to a person.
         * @property {Patient|undefined}
        */
        Object.defineProperty(this, 'patient', {
            enumerable: true,
            get: () => this.__data.patient,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.patient = new Reference(value);
            }
        });

        /**
         * @description An organization that is responsible for the provision and ongoing maintenance
    of the device.
         * @property {Organization|undefined}
        */
        Object.defineProperty(this, 'owner', {
            enumerable: true,
            get: () => this.__data.owner,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.owner = new Reference(value);
            }
        });

        /**
         * @description Contact details for an organization or a particular human that is responsible
    for the device.
         * @property {ContactPoint[]|undefined}
        */
        Object.defineProperty(this, 'contact', {
            enumerable: true,
            get: () => this.__data.contact,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContactPoint = require('../complex_types/contactPoint.js');
                this.__data.contact = new ContactPoint(value);
            }
        });

        /**
         * @description The place where the device can be found.
         * @property {Location|undefined}
        */
        Object.defineProperty(this, 'location', {
            enumerable: true,
            get: () => this.__data.location,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.location = new Reference(value);
            }
        });

        /**
         * @description A network address on which the device may be contacted directly.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'url', {
            enumerable: true,
            get: () => this.__data.url,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.url = new uri(value);
            }
        });

        /**
         * @description Descriptive information, usage information or implantation information that is
    not captured in an existing element.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            enumerable: true,
            get: () => this.__data.note,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.note = new Annotation(value);
            }
        });

        /**
         * @description Provides additional safety characteristics about a medical device.  For
    example devices containing latex.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'safety', {
            enumerable: true,
            get: () => this.__data.safety,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.safety = new CodeableConcept(value);
            }
        });

        /**
         * @description The parent device.
         * @property {Device|undefined}
        */
        Object.defineProperty(this, 'parent', {
            enumerable: true,
            get: () => this.__data.parent,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.parent = new Reference(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Device',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Device';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id && this.id.toJSON(),
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules && this.implicitRules.toJSON(),
            language: this.language && this.language.toJSON(),
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.toJSON(),
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            identifier: this.identifier && this.identifier.toJSON(),
            definition: this.definition && this.definition.toJSON(),
            udiCarrier: this.udiCarrier && this.udiCarrier.toJSON(),
            status: this.status && this.status.toJSON(),
            statusReason: this.statusReason && this.statusReason.toJSON(),
            distinctIdentifier: this.distinctIdentifier,
            manufacturer: this.manufacturer,
            manufactureDate: this.manufactureDate && this.manufactureDate.toJSON(),
            expirationDate: this.expirationDate && this.expirationDate.toJSON(),
            lotNumber: this.lotNumber,
            serialNumber: this.serialNumber,
            deviceName: this.deviceName && this.deviceName.toJSON(),
            modelNumber: this.modelNumber,
            partNumber: this.partNumber,
            type: this.type && this.type.toJSON(),
            specialization: this.specialization && this.specialization.toJSON(),
            version: this.version && this.version.toJSON(),
            property: this.property && this.property.toJSON(),
            patient: this.patient && this.patient.toJSON(),
            owner: this.owner && this.owner.toJSON(),
            contact: this.contact && this.contact.toJSON(),
            location: this.location && this.location.toJSON(),
            url: this.url && this.url.toJSON(),
            note: this.note && this.note.toJSON(),
            safety: this.safety && this.safety.toJSON(),
            parent: this.parent && this.parent.toJSON(),
        };
    }
}

module.exports = Device;
