// This file is auto-generated by generate_classes so do not edit manually

/**
EpisodeOfCare
    An association between a patient and an organization / healthcare provider(s)
    during which time encounters may occur. The managing organization assumes a
    level of responsibility for the patient during this time.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class EpisodeOfCare {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.implicitRules = value;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.contained = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description The EpisodeOfCare may be known by different identifiers for different contexts
    of use, such as when an external agency is tracking the Episode for funding
    purposes.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(value) ? value.map(v => new Identifier(v)) : [new Identifier(value)];
            }
        });

        /**
         * @description planned | waitlist | active | onhold | finished | cancelled.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.status = value;
            }
        });

        /**
         * @description The history of statuses that the EpisodeOfCare has been through (without
    requiring processing the history of the resource).
         * @property {EpisodeOfCareStatusHistory[]|undefined}
        */
        Object.defineProperty(this, 'statusHistory', {
            enumerable: true,
            get: () => this.__data.statusHistory,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let EpisodeOfCareStatusHistory = require('../backbone_elements/episodeOfCareStatusHistory.js');
                this.__data.statusHistory = Array.isArray(value) ? value.map(v => new EpisodeOfCareStatusHistory(v)) : [new EpisodeOfCareStatusHistory(value)];
            }
        });

        /**
         * @description A classification of the type of episode of care; e.g. specialist referral,
    disease management, type of funded care.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.type = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description The list of diagnosis relevant to this episode of care.
         * @property {EpisodeOfCareDiagnosis[]|undefined}
        */
        Object.defineProperty(this, 'diagnosis', {
            enumerable: true,
            get: () => this.__data.diagnosis,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let EpisodeOfCareDiagnosis = require('../backbone_elements/episodeOfCareDiagnosis.js');
                this.__data.diagnosis = Array.isArray(value) ? value.map(v => new EpisodeOfCareDiagnosis(v)) : [new EpisodeOfCareDiagnosis(value)];
            }
        });

        /**
         * @description The patient who is the focus of this episode of care.
         * @property {Patient}
        */
        Object.defineProperty(this, 'patient', {
            enumerable: true,
            get: () => this.__data.patient,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.patient = new Reference(value);
            }
        });

        /**
         * @description The organization that has assumed the specific responsibilities for the
    specified duration.
         * @property {Organization|undefined}
        */
        Object.defineProperty(this, 'managingOrganization', {
            enumerable: true,
            get: () => this.__data.managingOrganization,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.managingOrganization = new Reference(value);
            }
        });

        /**
         * @description The interval during which the managing organization assumes the defined
    responsibility.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'period', {
            enumerable: true,
            get: () => this.__data.period,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.period = new Period(value);
            }
        });

        /**
         * @description Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming
    referrals.
         * @property {ServiceRequest[]|undefined}
        */
        Object.defineProperty(this, 'referralRequest', {
            enumerable: true,
            get: () => this.__data.referralRequest,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.referralRequest = Array.isArray(value) ? value.map(v => new Reference(v)) : [new Reference(value)];
            }
        });

        /**
         * @description The practitioner that is the care manager/care coordinator for this patient.
         * @property {EpisodeOfCareCareManager|undefined}
        */
        Object.defineProperty(this, 'careManager', {
            enumerable: true,
            get: () => this.__data.careManager,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.careManager = new Reference(value);
            }
        });

        /**
         * @description The list of practitioners that may be facilitating this episode of care for
    specific purposes.
         * @property {CareTeam[]|undefined}
        */
        Object.defineProperty(this, 'team', {
            enumerable: true,
            get: () => this.__data.team,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.team = Array.isArray(value) ? value.map(v => new Reference(v)) : [new Reference(value)];
            }
        });

        /**
         * @description The set of accounts that may be used for billing for this EpisodeOfCare.
         * @property {Account[]|undefined}
        */
        Object.defineProperty(this, 'account', {
            enumerable: true,
            get: () => this.__data.account,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.account = Array.isArray(value) ? value.map(v => new Reference(v)) : [new Reference(value)];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'EpisodeOfCare',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'EpisodeOfCare';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            status: this.status,
            statusHistory: this.statusHistory && this.statusHistory.map(v => v.toJSON()),
            type: this.type && this.type.map(v => v.toJSON()),
            diagnosis: this.diagnosis && this.diagnosis.map(v => v.toJSON()),
            patient: this.patient && this.patient.toJSON(),
            managingOrganization: this.managingOrganization && this.managingOrganization.toJSON(),
            period: this.period && this.period.toJSON(),
            referralRequest: this.referralRequest && this.referralRequest.map(v => v.toJSON()),
            careManager: this.careManager && this.careManager.toJSON(),
            team: this.team && this.team.map(v => v.toJSON()),
            account: this.account && this.account.map(v => v.toJSON()),
        };
    }
}

module.exports = EpisodeOfCare;
