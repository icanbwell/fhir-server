// This file is auto-generated by generate_classes so do not edit manually

/**
EffectEvidenceSynthesis
    The EffectEvidenceSynthesis resource describes the difference in an outcome
    between exposures states in a population where the effect estimate is derived
    from a combination of research studies.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class EffectEvidenceSynthesis {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.implicitRules = value;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.contained = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description An absolute URI that is used to identify this effect evidence synthesis when
    it is referenced in a specification, model, design or an instance; also called
    its canonical identifier. This SHOULD be globally unique and SHOULD be a
    literal address at which at which an authoritative instance of this effect
    evidence synthesis is (or will be) published. This URL can be the target of a
    canonical reference. It SHALL remain the same when the effect evidence
    synthesis is stored on different servers.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'url', {
            enumerable: true,
            get: () => this.__data.url,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.url = value;
            }
        });

        /**
         * @description A formal identifier that is used to identify this effect evidence synthesis
    when it is represented in other formats, or referenced in a specification,
    model, design or an instance.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(value) ? value.map(v => new Identifier(v)) : [new Identifier(value)];
            }
        });

        /**
         * @description The identifier that is used to identify this version of the effect evidence
    synthesis when it is referenced in a specification, model, design or instance.
    This is an arbitrary value managed by the effect evidence synthesis author and
    is not expected to be globally unique. For example, it might be a timestamp
    (e.g. yyyymmdd) if a managed version is not available. There is also no
    expectation that versions can be placed in a lexicographical sequence.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'version', {
            enumerable: true,
            get: () => this.__data.version,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.version = value;
            }
        });

        /**
         * @description A natural language name identifying the effect evidence synthesis. This name
    should be usable as an identifier for the module by machine processing
    applications such as code generation.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'name', {
            enumerable: true,
            get: () => this.__data.name,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.name = value;
            }
        });

        /**
         * @description A short, descriptive, user-friendly title for the effect evidence synthesis.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'title', {
            enumerable: true,
            get: () => this.__data.title,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.title = value;
            }
        });

        /**
         * @description The status of this effect evidence synthesis. Enables tracking the life-cycle
    of the content.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.status = value;
            }
        });

        /**
         * @description The date  (and optionally time) when the effect evidence synthesis was
    published. The date must change when the business version changes and it must
    change if the status code changes. In addition, it should change when the
    substantive content of the effect evidence synthesis changes.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'date', {
            enumerable: true,
            get: () => this.__data.date,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.date = value;
            }
        });

        /**
         * @description The name of the organization or individual that published the effect evidence
    synthesis.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'publisher', {
            enumerable: true,
            get: () => this.__data.publisher,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.publisher = value;
            }
        });

        /**
         * @description Contact details to assist a user in finding and communicating with the
    publisher.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'contact', {
            enumerable: true,
            get: () => this.__data.contact,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.contact = Array.isArray(value) ? value.map(v => new ContactDetail(v)) : [new ContactDetail(value)];
            }
        });

        /**
         * @description A free text natural language description of the effect evidence synthesis from
    a consumer's perspective.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.description = value;
            }
        });

        /**
         * @description A human-readable string to clarify or explain concepts about the resource.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            enumerable: true,
            get: () => this.__data.note,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.note = Array.isArray(value) ? value.map(v => new Annotation(v)) : [new Annotation(value)];
            }
        });

        /**
         * @description The content was developed with a focus and intent of supporting the contexts
    that are listed. These contexts may be general categories (gender, age, ...)
    or may be references to specific programs (insurance plans, studies, ...) and
    may be used to assist with indexing and searching for appropriate effect
    evidence synthesis instances.
         * @property {UsageContext[]|undefined}
        */
        Object.defineProperty(this, 'useContext', {
            enumerable: true,
            get: () => this.__data.useContext,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let UsageContext = require('../complex_types/usageContext.js');
                this.__data.useContext = Array.isArray(value) ? value.map(v => new UsageContext(v)) : [new UsageContext(value)];
            }
        });

        /**
         * @description A legal or geographic region in which the effect evidence synthesis is
    intended to be used.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'jurisdiction', {
            enumerable: true,
            get: () => this.__data.jurisdiction,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.jurisdiction = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description A copyright statement relating to the effect evidence synthesis and/or its
    contents. Copyright statements are generally legal restrictions on the use and
    publishing of the effect evidence synthesis.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'copyright', {
            enumerable: true,
            get: () => this.__data.copyright,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.copyright = value;
            }
        });

        /**
         * @description The date on which the resource content was approved by the publisher. Approval
    happens once when the content is officially approved for usage.
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'approvalDate', {
            enumerable: true,
            get: () => this.__data.approvalDate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.approvalDate = value;
            }
        });

        /**
         * @description The date on which the resource content was last reviewed. Review happens
    periodically after approval but does not change the original approval date.
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'lastReviewDate', {
            enumerable: true,
            get: () => this.__data.lastReviewDate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.lastReviewDate = value;
            }
        });

        /**
         * @description The period during which the effect evidence synthesis content was or is
    planned to be in active use.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'effectivePeriod', {
            enumerable: true,
            get: () => this.__data.effectivePeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.effectivePeriod = new Period(value);
            }
        });

        /**
         * @description Descriptive topics related to the content of the EffectEvidenceSynthesis.
    Topics provide a high-level categorization grouping types of
    EffectEvidenceSynthesiss that can be useful for filtering and searching.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'topic', {
            enumerable: true,
            get: () => this.__data.topic,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.topic = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description An individiual or organization primarily involved in the creation and
    maintenance of the content.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'author', {
            enumerable: true,
            get: () => this.__data.author,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.author = Array.isArray(value) ? value.map(v => new ContactDetail(v)) : [new ContactDetail(value)];
            }
        });

        /**
         * @description An individual or organization primarily responsible for internal coherence of
    the content.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'editor', {
            enumerable: true,
            get: () => this.__data.editor,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.editor = Array.isArray(value) ? value.map(v => new ContactDetail(v)) : [new ContactDetail(value)];
            }
        });

        /**
         * @description An individual or organization primarily responsible for review of some aspect
    of the content.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'reviewer', {
            enumerable: true,
            get: () => this.__data.reviewer,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.reviewer = Array.isArray(value) ? value.map(v => new ContactDetail(v)) : [new ContactDetail(value)];
            }
        });

        /**
         * @description An individual or organization responsible for officially endorsing the content
    for use in some setting.
         * @property {ContactDetail[]|undefined}
        */
        Object.defineProperty(this, 'endorser', {
            enumerable: true,
            get: () => this.__data.endorser,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.endorser = Array.isArray(value) ? value.map(v => new ContactDetail(v)) : [new ContactDetail(value)];
            }
        });

        /**
         * @description Related artifacts such as additional documentation, justification, or
    bibliographic references.
         * @property {RelatedArtifact[]|undefined}
        */
        Object.defineProperty(this, 'relatedArtifact', {
            enumerable: true,
            get: () => this.__data.relatedArtifact,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let RelatedArtifact = require('../complex_types/relatedArtifact.js');
                this.__data.relatedArtifact = Array.isArray(value) ? value.map(v => new RelatedArtifact(v)) : [new RelatedArtifact(value)];
            }
        });

        /**
         * @description Type of synthesis eg meta-analysis.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'synthesisType', {
            enumerable: true,
            get: () => this.__data.synthesisType,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.synthesisType = new CodeableConcept(value);
            }
        });

        /**
         * @description Type of study eg randomized trial.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'studyType', {
            enumerable: true,
            get: () => this.__data.studyType,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.studyType = new CodeableConcept(value);
            }
        });

        /**
         * @description A reference to a EvidenceVariable resource that defines the population for the
    research.
         * @property {EvidenceVariable}
        */
        Object.defineProperty(this, 'population', {
            enumerable: true,
            get: () => this.__data.population,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.population = new Reference(value);
            }
        });

        /**
         * @description A reference to a EvidenceVariable resource that defines the exposure for the
    research.
         * @property {EvidenceVariable}
        */
        Object.defineProperty(this, 'exposure', {
            enumerable: true,
            get: () => this.__data.exposure,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.exposure = new Reference(value);
            }
        });

        /**
         * @description A reference to a EvidenceVariable resource that defines the comparison
    exposure for the research.
         * @property {EvidenceVariable}
        */
        Object.defineProperty(this, 'exposureAlternative', {
            enumerable: true,
            get: () => this.__data.exposureAlternative,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.exposureAlternative = new Reference(value);
            }
        });

        /**
         * @description A reference to a EvidenceVariable resomece that defines the outcome for the
    research.
         * @property {EvidenceVariable}
        */
        Object.defineProperty(this, 'outcome', {
            enumerable: true,
            get: () => this.__data.outcome,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.outcome = new Reference(value);
            }
        });

        /**
         * @description A description of the size of the sample involved in the synthesis.
         * @property {EffectEvidenceSynthesisSampleSize|undefined}
        */
        Object.defineProperty(this, 'sampleSize', {
            enumerable: true,
            get: () => this.__data.sampleSize,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let EffectEvidenceSynthesisSampleSize = require('../backbone_elements/effectEvidenceSynthesisSampleSize.js');
                this.__data.sampleSize = new EffectEvidenceSynthesisSampleSize(value);
            }
        });

        /**
         * @description A description of the results for each exposure considered in the effect
    estimate.
         * @property {EffectEvidenceSynthesisResultsByExposure[]|undefined}
        */
        Object.defineProperty(this, 'resultsByExposure', {
            enumerable: true,
            get: () => this.__data.resultsByExposure,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let EffectEvidenceSynthesisResultsByExposure = require('../backbone_elements/effectEvidenceSynthesisResultsByExposure.js');
                this.__data.resultsByExposure = Array.isArray(value) ? value.map(v => new EffectEvidenceSynthesisResultsByExposure(v)) : [new EffectEvidenceSynthesisResultsByExposure(value)];
            }
        });

        /**
         * @description The estimated effect of the exposure variant.
         * @property {EffectEvidenceSynthesisEffectEstimate[]|undefined}
        */
        Object.defineProperty(this, 'effectEstimate', {
            enumerable: true,
            get: () => this.__data.effectEstimate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let EffectEvidenceSynthesisEffectEstimate = require('../backbone_elements/effectEvidenceSynthesisEffectEstimate.js');
                this.__data.effectEstimate = Array.isArray(value) ? value.map(v => new EffectEvidenceSynthesisEffectEstimate(v)) : [new EffectEvidenceSynthesisEffectEstimate(value)];
            }
        });

        /**
         * @description A description of the certainty of the effect estimate.
         * @property {EffectEvidenceSynthesisCertainty[]|undefined}
        */
        Object.defineProperty(this, 'certainty', {
            enumerable: true,
            get: () => this.__data.certainty,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let EffectEvidenceSynthesisCertainty = require('../backbone_elements/effectEvidenceSynthesisCertainty.js');
                this.__data.certainty = Array.isArray(value) ? value.map(v => new EffectEvidenceSynthesisCertainty(v)) : [new EffectEvidenceSynthesisCertainty(value)];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'EffectEvidenceSynthesis',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'EffectEvidenceSynthesis';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            url: this.url,
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            version: this.version,
            name: this.name,
            title: this.title,
            status: this.status,
            date: this.date,
            publisher: this.publisher,
            contact: this.contact && this.contact.map(v => v.toJSON()),
            description: this.description,
            note: this.note && this.note.map(v => v.toJSON()),
            useContext: this.useContext && this.useContext.map(v => v.toJSON()),
            jurisdiction: this.jurisdiction && this.jurisdiction.map(v => v.toJSON()),
            copyright: this.copyright,
            approvalDate: this.approvalDate,
            lastReviewDate: this.lastReviewDate,
            effectivePeriod: this.effectivePeriod && this.effectivePeriod.toJSON(),
            topic: this.topic && this.topic.map(v => v.toJSON()),
            author: this.author && this.author.map(v => v.toJSON()),
            editor: this.editor && this.editor.map(v => v.toJSON()),
            reviewer: this.reviewer && this.reviewer.map(v => v.toJSON()),
            endorser: this.endorser && this.endorser.map(v => v.toJSON()),
            relatedArtifact: this.relatedArtifact && this.relatedArtifact.map(v => v.toJSON()),
            synthesisType: this.synthesisType && this.synthesisType.toJSON(),
            studyType: this.studyType && this.studyType.toJSON(),
            population: this.population && this.population.toJSON(),
            exposure: this.exposure && this.exposure.toJSON(),
            exposureAlternative: this.exposureAlternative && this.exposureAlternative.toJSON(),
            outcome: this.outcome && this.outcome.toJSON(),
            sampleSize: this.sampleSize && this.sampleSize.toJSON(),
            resultsByExposure: this.resultsByExposure && this.resultsByExposure.map(v => v.toJSON()),
            effectEstimate: this.effectEstimate && this.effectEstimate.map(v => v.toJSON()),
            certainty: this.certainty && this.certainty.map(v => v.toJSON()),
        };
    }
}

module.exports = EffectEvidenceSynthesis;
