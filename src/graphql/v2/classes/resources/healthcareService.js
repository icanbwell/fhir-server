// This file is auto-generated by generate_classes so do not edit manually

/**
HealthcareService
    The details of a healthcare service available at a location.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class HealthcareService {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.id = new id(value);
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            enumerable: true,
            get: () => this.__data.meta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(value);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            enumerable: true,
            get: () => this.__data.implicitRules,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.implicitRules = new uri(value);
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(value);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            enumerable: true,
            get: () => this.__data.contained,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                // eslint-disable-next-line new-cap
                this.__data.contained = new ResourceContainer(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description External identifiers for this item.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = new Identifier(value);
            }
        });

        /**
         * @description This flag is used to mark the record to not be used. This is not used when a
    center is closed for maintenance, or for holidays, the notAvailable period is
    to be used for this.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'active', {
            enumerable: true,
            get: () => this.__data.active,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.active = value;
            }
        });

        /**
         * @description The organization that provides this healthcare service.
         * @property {Organization|undefined}
        */
        Object.defineProperty(this, 'providedBy', {
            enumerable: true,
            get: () => this.__data.providedBy,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.providedBy = new Reference(value);
            }
        });

        /**
         * @description Identifies the broad category of service being performed or delivered.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'category', {
            enumerable: true,
            get: () => this.__data.category,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.category = new CodeableConcept(value);
            }
        });

        /**
         * @description The specific type of service that may be delivered or performed.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.type = new CodeableConcept(value);
            }
        });

        /**
         * @description Collection of specialties handled by the service site. This is more of a
    medical term.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'specialty', {
            enumerable: true,
            get: () => this.__data.specialty,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.specialty = new CodeableConcept(value);
            }
        });

        /**
         * @description The location(s) where this healthcare service may be provided.
         * @property {Location[]|undefined}
        */
        Object.defineProperty(this, 'location', {
            enumerable: true,
            get: () => this.__data.location,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.location = new Reference(value);
            }
        });

        /**
         * @description Further description of the service as it would be presented to a consumer
    while searching.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'name', {
            enumerable: true,
            get: () => this.__data.name,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.name = value;
            }
        });

        /**
         * @description Any additional description of the service and/or any specific issues not
    covered by the other attributes, which can be displayed as further detail
    under the serviceName.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'comment', {
            enumerable: true,
            get: () => this.__data.comment,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.comment = value;
            }
        });

        /**
         * @description Extra details about the service that can't be placed in the other fields.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'extraDetails', {
            enumerable: true,
            get: () => this.__data.extraDetails,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let markdown = require('../simple_types/markdown.js');
                // eslint-disable-next-line new-cap
                this.__data.extraDetails = new markdown(value);
            }
        });

        /**
         * @description If there is a photo/symbol associated with this HealthcareService, it may be
    included here to facilitate quick identification of the service in a list.
         * @property {Attachment|undefined}
        */
        Object.defineProperty(this, 'photo', {
            enumerable: true,
            get: () => this.__data.photo,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Attachment = require('../complex_types/attachment.js');
                this.__data.photo = new Attachment(value);
            }
        });

        /**
         * @description List of contacts related to this specific healthcare service.
         * @property {ContactPoint[]|undefined}
        */
        Object.defineProperty(this, 'telecom', {
            enumerable: true,
            get: () => this.__data.telecom,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContactPoint = require('../complex_types/contactPoint.js');
                this.__data.telecom = new ContactPoint(value);
            }
        });

        /**
         * @description The location(s) that this service is available to (not where the service is
    provided).
         * @property {Location[]|undefined}
        */
        Object.defineProperty(this, 'coverageArea', {
            enumerable: true,
            get: () => this.__data.coverageArea,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.coverageArea = new Reference(value);
            }
        });

        /**
         * @description The code(s) that detail the conditions under which the healthcare service is
    available/offered.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'serviceProvisionCode', {
            enumerable: true,
            get: () => this.__data.serviceProvisionCode,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.serviceProvisionCode = new CodeableConcept(value);
            }
        });

        /**
         * @description Does this service have specific eligibility requirements that need to be met
    in order to use the service?
         * @property {HealthcareServiceEligibility[]|undefined}
        */
        Object.defineProperty(this, 'eligibility', {
            enumerable: true,
            get: () => this.__data.eligibility,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let HealthcareServiceEligibility = require('../backbone_elements/healthcareServiceEligibility.js');
                this.__data.eligibility = new HealthcareServiceEligibility(value);
            }
        });

        /**
         * @description Programs that this service is applicable to.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'program', {
            enumerable: true,
            get: () => this.__data.program,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.program = new CodeableConcept(value);
            }
        });

        /**
         * @description Collection of characteristics (attributes).
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'characteristic', {
            enumerable: true,
            get: () => this.__data.characteristic,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.characteristic = new CodeableConcept(value);
            }
        });

        /**
         * @description Some services are specifically made available in multiple languages, this
    property permits a directory to declare the languages this is offered in.
    Typically this is only provided where a service operates in communities with
    mixed languages used.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'communication', {
            enumerable: true,
            get: () => this.__data.communication,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.communication = new CodeableConcept(value);
            }
        });

        /**
         * @description Ways that the service accepts referrals, if this is not provided then it is
    implied that no referral is required.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'referralMethod', {
            enumerable: true,
            get: () => this.__data.referralMethod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.referralMethod = new CodeableConcept(value);
            }
        });

        /**
         * @description Indicates whether or not a prospective consumer will require an appointment
    for a particular service at a site to be provided by the Organization.
    Indicates if an appointment is required for access to this service.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'appointmentRequired', {
            enumerable: true,
            get: () => this.__data.appointmentRequired,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.appointmentRequired = value;
            }
        });

        /**
         * @description A collection of times that the Service Site is available.
         * @property {HealthcareServiceAvailableTime[]|undefined}
        */
        Object.defineProperty(this, 'availableTime', {
            enumerable: true,
            get: () => this.__data.availableTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let HealthcareServiceAvailableTime = require('../backbone_elements/healthcareServiceAvailableTime.js');
                this.__data.availableTime = new HealthcareServiceAvailableTime(value);
            }
        });

        /**
         * @description The HealthcareService is not available during this period of time due to the
    provided reason.
         * @property {HealthcareServiceNotAvailable[]|undefined}
        */
        Object.defineProperty(this, 'notAvailable', {
            enumerable: true,
            get: () => this.__data.notAvailable,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let HealthcareServiceNotAvailable = require('../backbone_elements/healthcareServiceNotAvailable.js');
                this.__data.notAvailable = new HealthcareServiceNotAvailable(value);
            }
        });

        /**
         * @description A description of site availability exceptions, e.g. public holiday
    availability. Succinctly describing all possible exceptions to normal site
    availability as details in the available Times and not available Times.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'availabilityExceptions', {
            enumerable: true,
            get: () => this.__data.availabilityExceptions,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.availabilityExceptions = value;
            }
        });

        /**
         * @description Technical endpoints providing access to services operated for the specific
    healthcare services defined at this resource.
         * @property {Endpoint[]|undefined}
        */
        Object.defineProperty(this, 'endpoint', {
            enumerable: true,
            get: () => this.__data.endpoint,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.endpoint = new Reference(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'HealthcareService',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'HealthcareService';
    }

    toJSON() {
        return {
            resourceType: this.resourceType,
            id: this.id && this.id.toJSON(),
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules && this.implicitRules.toJSON(),
            language: this.language && this.language.toJSON(),
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.toJSON(),
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            identifier: this.identifier && this.identifier.toJSON(),
            active: this.active,
            providedBy: this.providedBy && this.providedBy.toJSON(),
            category: this.category && this.category.toJSON(),
            type: this.type && this.type.toJSON(),
            specialty: this.specialty && this.specialty.toJSON(),
            location: this.location && this.location.toJSON(),
            name: this.name,
            comment: this.comment,
            extraDetails: this.extraDetails && this.extraDetails.toJSON(),
            photo: this.photo && this.photo.toJSON(),
            telecom: this.telecom && this.telecom.toJSON(),
            coverageArea: this.coverageArea && this.coverageArea.toJSON(),
            serviceProvisionCode: this.serviceProvisionCode && this.serviceProvisionCode.toJSON(),
            eligibility: this.eligibility && this.eligibility.toJSON(),
            program: this.program && this.program.toJSON(),
            characteristic: this.characteristic && this.characteristic.toJSON(),
            communication: this.communication && this.communication.toJSON(),
            referralMethod: this.referralMethod && this.referralMethod.toJSON(),
            appointmentRequired: this.appointmentRequired,
            availableTime: this.availableTime && this.availableTime.toJSON(),
            notAvailable: this.notAvailable && this.notAvailable.toJSON(),
            availabilityExceptions: this.availabilityExceptions,
            endpoint: this.endpoint && this.endpoint.toJSON(),
        };
    }
}

module.exports = HealthcareService;
