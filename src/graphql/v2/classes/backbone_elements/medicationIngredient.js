// This file is auto-generated by generate_classes so do not edit manually

/**
Medication.Ingredient
    This resource is primarily used for the identification and definition of a
    medication for the purposes of prescribing, dispensing, and administering a
    medication as well as for making statements about medication use.
*/
class MedicationIngredient {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'itemCodeableConcept', {
            enumerable: true,
            get: () => this.__data.itemCodeableConcept,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.itemCodeableConcept = new CodeableConcept(value);
            }
        });

        /**
         * @description None
         * @property {MedicationIngredientItemReference|undefined}
        */
        Object.defineProperty(this, 'itemReference', {
            enumerable: true,
            get: () => this.__data.itemReference,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.itemReference = new Reference(value);
            }
        });

        /**
         * @description Indication of whether this ingredient affects the therapeutic action of the
    drug.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'isActive', {
            enumerable: true,
            get: () => this.__data.isActive,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.isActive = value;
            }
        });

        /**
         * @description Specifies how many (or how much) of the items there are in this Medication.
    For example, 250 mg per tablet.  This is expressed as a ratio where the
    numerator is 250mg and the denominator is 1 tablet.
         * @property {Ratio|undefined}
        */
        Object.defineProperty(this, 'strength', {
            enumerable: true,
            get: () => this.__data.strength,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Ratio = require('../complex_types/ratio.js');
                this.__data.strength = new Ratio(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'MedicationIngredient',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'MedicationIngredient';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            itemCodeableConcept: this.itemCodeableConcept && this.itemCodeableConcept.toJSON(),
            itemReference: this.itemReference && this.itemReference.toJSON(),
            isActive: this.isActive,
            strength: this.strength && this.strength.toJSON(),
        };
    }
}

module.exports = MedicationIngredient;
