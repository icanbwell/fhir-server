// This file is auto-generated by generate_classes so do not edit manually

/**
TestScript.Assert
    A structured set of tests against a FHIR server or client implementation to
    determine compliance against the FHIR specification.
*/
class TestScriptAssert {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description The label would be used for tracking/logging purposes by test engines.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'label', {
            enumerable: true,
            get: () => this.__data.label,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.label = value;
            }
        });

        /**
         * @description The description would be used by test engines for tracking and reporting
    purposes.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.description = value;
            }
        });

        /**
         * @description The direction to use for the assertion.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'direction', {
            enumerable: true,
            get: () => this.__data.direction,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.direction = value;
            }
        });

        /**
         * @description Id of the source fixture used as the contents to be evaluated by either the
    "source/expression" or "sourceId/path" definition.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'compareToSourceId', {
            enumerable: true,
            get: () => this.__data.compareToSourceId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.compareToSourceId = value;
            }
        });

        /**
         * @description The FHIRPath expression to evaluate against the source fixture. When
    compareToSourceId is defined, either compareToSourceExpression or
    compareToSourcePath must be defined, but not both.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'compareToSourceExpression', {
            enumerable: true,
            get: () => this.__data.compareToSourceExpression,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.compareToSourceExpression = value;
            }
        });

        /**
         * @description XPath or JSONPath expression to evaluate against the source fixture. When
    compareToSourceId is defined, either compareToSourceExpression or
    compareToSourcePath must be defined, but not both.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'compareToSourcePath', {
            enumerable: true,
            get: () => this.__data.compareToSourcePath,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.compareToSourcePath = value;
            }
        });

        /**
         * @description The mime-type contents to compare against the request or response message
    'Content-Type' header.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'contentType', {
            enumerable: true,
            get: () => this.__data.contentType,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.contentType = value;
            }
        });

        /**
         * @description The FHIRPath expression to be evaluated against the request or response
    message contents - HTTP headers and payload.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'expression', {
            enumerable: true,
            get: () => this.__data.expression,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.expression = value;
            }
        });

        /**
         * @description The HTTP header field name e.g. 'Location'.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'headerField', {
            enumerable: true,
            get: () => this.__data.headerField,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.headerField = value;
            }
        });

        /**
         * @description The ID of a fixture.  Asserts that the response contains at a minimum the
    fixture specified by minimumId.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'minimumId', {
            enumerable: true,
            get: () => this.__data.minimumId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.minimumId = value;
            }
        });

        /**
         * @description Whether or not the test execution performs validation on the bundle navigation
    links.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'navigationLinks', {
            enumerable: true,
            get: () => this.__data.navigationLinks,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.navigationLinks = value;
            }
        });

        /**
         * @description The operator type defines the conditional behavior of the assert. If not
    defined, the default is equals.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'operator', {
            enumerable: true,
            get: () => this.__data.operator,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.operator = value;
            }
        });

        /**
         * @description The XPath or JSONPath expression to be evaluated against the fixture
    representing the response received from server.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'path', {
            enumerable: true,
            get: () => this.__data.path,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.path = value;
            }
        });

        /**
         * @description The request method or HTTP operation code to compare against that used by the
    client system under test.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'requestMethod', {
            enumerable: true,
            get: () => this.__data.requestMethod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.requestMethod = value;
            }
        });

        /**
         * @description The value to use in a comparison against the request URL path string.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'requestURL', {
            enumerable: true,
            get: () => this.__data.requestURL,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.requestURL = value;
            }
        });

        /**
         * @description The type of the resource.  See http://build.fhir.org/resourcelist.html.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'resource', {
            enumerable: true,
            get: () => this.__data.resource,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.resource = value;
            }
        });

        /**
         * @description okay | created | noContent | notModified | bad | forbidden | notFound |
    methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'response', {
            enumerable: true,
            get: () => this.__data.response,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.response = value;
            }
        });

        /**
         * @description The value of the HTTP response code to be tested.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'responseCode', {
            enumerable: true,
            get: () => this.__data.responseCode,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.responseCode = value;
            }
        });

        /**
         * @description Fixture to evaluate the XPath/JSONPath expression or the headerField  against.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'sourceId', {
            enumerable: true,
            get: () => this.__data.sourceId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.sourceId = value;
            }
        });

        /**
         * @description The ID of the Profile to validate against.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'validateProfileId', {
            enumerable: true,
            get: () => this.__data.validateProfileId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.validateProfileId = value;
            }
        });

        /**
         * @description The value to compare to.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'value', {
            enumerable: true,
            get: () => this.__data.value,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.value = value;
            }
        });

        /**
         * @description Whether or not the test execution will produce a warning only on error for
    this assert.
         * @property {Boolean}
        */
        Object.defineProperty(this, 'warningOnly', {
            enumerable: true,
            get: () => this.__data.warningOnly,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.warningOnly = value;
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'TestScriptAssert',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'TestScriptAssert';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            label: this.label,
            description: this.description,
            direction: this.direction,
            compareToSourceId: this.compareToSourceId,
            compareToSourceExpression: this.compareToSourceExpression,
            compareToSourcePath: this.compareToSourcePath,
            contentType: this.contentType,
            expression: this.expression,
            headerField: this.headerField,
            minimumId: this.minimumId,
            navigationLinks: this.navigationLinks,
            operator: this.operator,
            path: this.path,
            requestMethod: this.requestMethod,
            requestURL: this.requestURL,
            resource: this.resource,
            response: this.response,
            responseCode: this.responseCode,
            sourceId: this.sourceId,
            validateProfileId: this.validateProfileId,
            value: this.value,
            warningOnly: this.warningOnly,
        };
    }
}

module.exports = TestScriptAssert;
