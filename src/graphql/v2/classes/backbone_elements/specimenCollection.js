// This file is auto-generated by generate_classes so do not edit manually

/**
Specimen.Collection
    A sample to be used for analysis.
*/
class SpecimenCollection {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description Person who collected the specimen.
         * @property {SpecimenCollectionCollector|undefined}
        */
        Object.defineProperty(this, 'collector', {
            enumerable: true,
            get: () => this.__data.collector,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.collector = new Reference(value);
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'collectedDateTime', {
            enumerable: true,
            get: () => this.__data.collectedDateTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let dateTime = require('../simple_types/dateTime.js');
                // eslint-disable-next-line new-cap
                this.__data.collectedDateTime = new dateTime(value);
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'collectedPeriod', {
            enumerable: true,
            get: () => this.__data.collectedPeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.collectedPeriod = new Period(value);
            }
        });

        /**
         * @description The span of time over which the collection of a specimen occurred.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'duration', {
            enumerable: true,
            get: () => this.__data.duration,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.duration = new Quantity(value);
            }
        });

        /**
         * @description The quantity of specimen collected; for instance the volume of a blood sample,
    or the physical measurement of an anatomic pathology sample.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'quantity', {
            enumerable: true,
            get: () => this.__data.quantity,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.quantity = new Quantity(value);
            }
        });

        /**
         * @description A coded value specifying the technique that is used to perform the procedure.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'method', {
            enumerable: true,
            get: () => this.__data.method,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.method = new CodeableConcept(value);
            }
        });

        /**
         * @description Anatomical location from which the specimen was collected (if subject is a
    patient). This is the target site.  This element is not used for environmental
    specimens.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'bodySite', {
            enumerable: true,
            get: () => this.__data.bodySite,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.bodySite = new CodeableConcept(value);
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'fastingStatusCodeableConcept', {
            enumerable: true,
            get: () => this.__data.fastingStatusCodeableConcept,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.fastingStatusCodeableConcept = new CodeableConcept(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'fastingStatusDuration', {
            enumerable: true,
            get: () => this.__data.fastingStatusDuration,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.fastingStatusDuration = new Quantity(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'SpecimenCollection',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'SpecimenCollection';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            collector: this.collector && this.collector.toJSON(),
            collectedDateTime: this.collectedDateTime && this.collectedDateTime.toJSON(),
            collectedPeriod: this.collectedPeriod && this.collectedPeriod.toJSON(),
            duration: this.duration && this.duration.toJSON(),
            quantity: this.quantity && this.quantity.toJSON(),
            method: this.method && this.method.toJSON(),
            bodySite: this.bodySite && this.bodySite.toJSON(),
            fastingStatusCodeableConcept: this.fastingStatusCodeableConcept && this.fastingStatusCodeableConcept.toJSON(),
            fastingStatusDuration: this.fastingStatusDuration && this.fastingStatusDuration.toJSON(),
        };
    }
}

module.exports = SpecimenCollection;
