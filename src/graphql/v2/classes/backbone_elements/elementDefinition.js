// This file is auto-generated by generate_classes so do not edit manually

/**
ElementDefinition
    Captures constraints on each element within the resource, profile, or
    extension.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class ElementDefinition {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description The path identifies the element and is expressed as a "."-separated list of
    ancestor elements, beginning with the name of the resource or extension.
         * @property {String}
        */
        Object.defineProperty(this, 'path', {
            enumerable: true,
            get: () => this.__data.path,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.path = value;
            }
        });

        /**
         * @description Codes that define how this element is represented in instances, when the
    deviation varies from the normal case.
         * @property {code[]|undefined}
        */
        Object.defineProperty(this, 'representation', {
            enumerable: true,
            get: () => this.__data.representation,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.representation = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description The name of this element definition slice, when slicing is working. The name
    must be a token with no dots or spaces. This is a unique name referring to a
    specific set of constraints applied to this element, used to provide a name to
    different slices of the same element.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'sliceName', {
            enumerable: true,
            get: () => this.__data.sliceName,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.sliceName = value;
            }
        });

        /**
         * @description If true, indicates that this slice definition is constraining a slice
    definition with the same name in an inherited profile. If false, the slice is
    not overriding any slice in an inherited profile. If missing, the slice might
    or might not be overriding a slice in an inherited profile, depending on the
    sliceName.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'sliceIsConstraining', {
            enumerable: true,
            get: () => this.__data.sliceIsConstraining,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.sliceIsConstraining = value;
            }
        });

        /**
         * @description A single preferred label which is the text to display beside the element
    indicating its meaning or to use to prompt for the element in a user display
    or form.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'label', {
            enumerable: true,
            get: () => this.__data.label,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.label = value;
            }
        });

        /**
         * @description A code that has the same meaning as the element in a particular terminology.
         * @property {Coding[]|undefined}
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            get: () => this.__data.code,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.code = Array.isArray(value) ? value.map(v => new Coding(v)) : [new Coding(value)];
            }
        });

        /**
         * @description Indicates that the element is sliced into a set of alternative definitions
    (i.e. in a structure definition, there are multiple different constraints on a
    single element in the base resource). Slicing can be used in any resource that
    has cardinality ..* on the base resource, or any resource with a choice of
    types. The set of slices is any elements that come after this in the element
    sequence that have the same path, until a shorter path occurs (the shorter
    path terminates the set).
         * @property {ElementDefinitionSlicing|undefined}
        */
        Object.defineProperty(this, 'slicing', {
            enumerable: true,
            get: () => this.__data.slicing,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ElementDefinitionSlicing = require('../backbone_elements/elementDefinitionSlicing.js');
                this.__data.slicing = new ElementDefinitionSlicing(value);
            }
        });

        /**
         * @description A concise description of what this element means (e.g. for use in
    autogenerated summaries).
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'short', {
            enumerable: true,
            get: () => this.__data.short,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.short = value;
            }
        });

        /**
         * @description Provides a complete explanation of the meaning of the data element for human
    readability.  For the case of elements derived from existing elements (e.g.
    constraints), the definition SHALL be consistent with the base definition, but
    convey the meaning of the element in the particular context of use of the
    resource. (Note: The text you are reading is specified in
    ElementDefinition.definition).
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'definition', {
            enumerable: true,
            get: () => this.__data.definition,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.definition = value;
            }
        });

        /**
         * @description Explanatory notes and implementation guidance about the data element,
    including notes about how to use the data properly, exceptions to proper use,
    etc. (Note: The text you are reading is specified in
    ElementDefinition.comment).
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'comment', {
            enumerable: true,
            get: () => this.__data.comment,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.comment = value;
            }
        });

        /**
         * @description This element is for traceability of why the element was created and why the
    constraints exist as they do. This may be used to point to source materials or
    specifications that drove the structure of this element.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'requirements', {
            enumerable: true,
            get: () => this.__data.requirements,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.requirements = value;
            }
        });

        /**
         * @description Identifies additional names by which this element might also be known.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'alias', {
            enumerable: true,
            get: () => this.__data.alias,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.alias = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description The minimum number of times this element SHALL appear in the instance.
         * @property {unsignedInt|undefined}
        */
        Object.defineProperty(this, 'min', {
            enumerable: true,
            get: () => this.__data.min,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.min = value;
            }
        });

        /**
         * @description The maximum number of times this element is permitted to appear in the
    instance.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'max', {
            enumerable: true,
            get: () => this.__data.max,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.max = value;
            }
        });

        /**
         * @description Information about the base definition of the element, provided to make it
    unnecessary for tools to trace the deviation of the element through the
    derived and related profiles. When the element definition is not the original
    definition of an element - i.g. either in a constraint on another type, or for
    elements from a super type in a snap shot - then the information in provided
    in the element definition may be different to the base definition. On the
    original definition of the element, it will be same.
         * @property {ElementDefinitionBase|undefined}
        */
        Object.defineProperty(this, 'base', {
            enumerable: true,
            get: () => this.__data.base,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ElementDefinitionBase = require('../backbone_elements/elementDefinitionBase.js');
                this.__data.base = new ElementDefinitionBase(value);
            }
        });

        /**
         * @description Identifies an element defined elsewhere in the definition whose content rules
    should be applied to the current element. ContentReferences bring across all
    the rules that are in the ElementDefinition for the element, including
    definitions, cardinality constraints, bindings, invariants etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'contentReference', {
            enumerable: true,
            get: () => this.__data.contentReference,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.contentReference = value;
            }
        });

        /**
         * @description The data type or resource that the value of this element is permitted to be.
         * @property {ElementDefinitionType[]|undefined}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ElementDefinitionType = require('../backbone_elements/elementDefinitionType.js');
                this.__data.type = Array.isArray(value) ? value.map(v => new ElementDefinitionType(v)) : [new ElementDefinitionType(value)];
            }
        });

        /**
         * @description None
         * @property {base64Binary|undefined}
        */
        Object.defineProperty(this, 'defaultValueBase64Binary', {
            enumerable: true,
            get: () => this.__data.defaultValueBase64Binary,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueBase64Binary = value;
            }
        });

        /**
         * @description None
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'defaultValueBoolean', {
            enumerable: true,
            get: () => this.__data.defaultValueBoolean,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueBoolean = value;
            }
        });

        /**
         * @description None
         * @property {canonical|undefined}
        */
        Object.defineProperty(this, 'defaultValueCanonical', {
            enumerable: true,
            get: () => this.__data.defaultValueCanonical,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueCanonical = value;
            }
        });

        /**
         * @description None
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'defaultValueCode', {
            enumerable: true,
            get: () => this.__data.defaultValueCode,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueCode = value;
            }
        });

        /**
         * @description None
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'defaultValueDate', {
            enumerable: true,
            get: () => this.__data.defaultValueDate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueDate = value;
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'defaultValueDateTime', {
            enumerable: true,
            get: () => this.__data.defaultValueDateTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueDateTime = value;
            }
        });

        /**
         * @description None
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'defaultValueDecimal', {
            enumerable: true,
            get: () => this.__data.defaultValueDecimal,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueDecimal = value;
            }
        });

        /**
         * @description None
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'defaultValueId', {
            enumerable: true,
            get: () => this.__data.defaultValueId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueId = value;
            }
        });

        /**
         * @description None
         * @property {instant|undefined}
        */
        Object.defineProperty(this, 'defaultValueInstant', {
            enumerable: true,
            get: () => this.__data.defaultValueInstant,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueInstant = value;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'defaultValueInteger', {
            enumerable: true,
            get: () => this.__data.defaultValueInteger,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueInteger = value;
            }
        });

        /**
         * @description None
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'defaultValueMarkdown', {
            enumerable: true,
            get: () => this.__data.defaultValueMarkdown,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueMarkdown = value;
            }
        });

        /**
         * @description None
         * @property {oid|undefined}
        */
        Object.defineProperty(this, 'defaultValueOid', {
            enumerable: true,
            get: () => this.__data.defaultValueOid,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueOid = value;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'defaultValuePositiveInt', {
            enumerable: true,
            get: () => this.__data.defaultValuePositiveInt,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValuePositiveInt = value;
            }
        });

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'defaultValueString', {
            enumerable: true,
            get: () => this.__data.defaultValueString,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueString = value;
            }
        });

        /**
         * @description None
         * @property {time|undefined}
        */
        Object.defineProperty(this, 'defaultValueTime', {
            enumerable: true,
            get: () => this.__data.defaultValueTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueTime = value;
            }
        });

        /**
         * @description None
         * @property {unsignedInt|undefined}
        */
        Object.defineProperty(this, 'defaultValueUnsignedInt', {
            enumerable: true,
            get: () => this.__data.defaultValueUnsignedInt,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueUnsignedInt = value;
            }
        });

        /**
         * @description None
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'defaultValueUri', {
            enumerable: true,
            get: () => this.__data.defaultValueUri,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueUri = value;
            }
        });

        /**
         * @description None
         * @property {url|undefined}
        */
        Object.defineProperty(this, 'defaultValueUrl', {
            enumerable: true,
            get: () => this.__data.defaultValueUrl,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueUrl = value;
            }
        });

        /**
         * @description None
         * @property {uuid|undefined}
        */
        Object.defineProperty(this, 'defaultValueUuid', {
            enumerable: true,
            get: () => this.__data.defaultValueUuid,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueUuid = value;
            }
        });

        /**
         * @description None
         * @property {Address|undefined}
        */
        Object.defineProperty(this, 'defaultValueAddress', {
            enumerable: true,
            get: () => this.__data.defaultValueAddress,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Address = require('../complex_types/address.js');
                this.__data.defaultValueAddress = new Address(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'defaultValueAge', {
            enumerable: true,
            get: () => this.__data.defaultValueAge,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.defaultValueAge = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Annotation|undefined}
        */
        Object.defineProperty(this, 'defaultValueAnnotation', {
            enumerable: true,
            get: () => this.__data.defaultValueAnnotation,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.defaultValueAnnotation = new Annotation(value);
            }
        });

        /**
         * @description None
         * @property {Attachment|undefined}
        */
        Object.defineProperty(this, 'defaultValueAttachment', {
            enumerable: true,
            get: () => this.__data.defaultValueAttachment,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Attachment = require('../complex_types/attachment.js');
                this.__data.defaultValueAttachment = new Attachment(value);
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'defaultValueCodeableConcept', {
            enumerable: true,
            get: () => this.__data.defaultValueCodeableConcept,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.defaultValueCodeableConcept = new CodeableConcept(value);
            }
        });

        /**
         * @description None
         * @property {Coding|undefined}
        */
        Object.defineProperty(this, 'defaultValueCoding', {
            enumerable: true,
            get: () => this.__data.defaultValueCoding,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.defaultValueCoding = new Coding(value);
            }
        });

        /**
         * @description None
         * @property {ContactPoint|undefined}
        */
        Object.defineProperty(this, 'defaultValueContactPoint', {
            enumerable: true,
            get: () => this.__data.defaultValueContactPoint,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContactPoint = require('../complex_types/contactPoint.js');
                this.__data.defaultValueContactPoint = new ContactPoint(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'defaultValueCount', {
            enumerable: true,
            get: () => this.__data.defaultValueCount,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.defaultValueCount = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'defaultValueDistance', {
            enumerable: true,
            get: () => this.__data.defaultValueDistance,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.defaultValueDistance = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'defaultValueDuration', {
            enumerable: true,
            get: () => this.__data.defaultValueDuration,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.defaultValueDuration = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {HumanName|undefined}
        */
        Object.defineProperty(this, 'defaultValueHumanName', {
            enumerable: true,
            get: () => this.__data.defaultValueHumanName,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let HumanName = require('../complex_types/humanName.js');
                this.__data.defaultValueHumanName = new HumanName(value);
            }
        });

        /**
         * @description None
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'defaultValueIdentifier', {
            enumerable: true,
            get: () => this.__data.defaultValueIdentifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.defaultValueIdentifier = new Identifier(value);
            }
        });

        /**
         * @description None
         * @property {Money|undefined}
        */
        Object.defineProperty(this, 'defaultValueMoney', {
            enumerable: true,
            get: () => this.__data.defaultValueMoney,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Money = require('../complex_types/money.js');
                this.__data.defaultValueMoney = new Money(value);
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'defaultValuePeriod', {
            enumerable: true,
            get: () => this.__data.defaultValuePeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.defaultValuePeriod = new Period(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'defaultValueQuantity', {
            enumerable: true,
            get: () => this.__data.defaultValueQuantity,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.defaultValueQuantity = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Range|undefined}
        */
        Object.defineProperty(this, 'defaultValueRange', {
            enumerable: true,
            get: () => this.__data.defaultValueRange,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Range = require('../complex_types/range.js');
                this.__data.defaultValueRange = new Range(value);
            }
        });

        /**
         * @description None
         * @property {Ratio|undefined}
        */
        Object.defineProperty(this, 'defaultValueRatio', {
            enumerable: true,
            get: () => this.__data.defaultValueRatio,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Ratio = require('../complex_types/ratio.js');
                this.__data.defaultValueRatio = new Ratio(value);
            }
        });

        /**
         * @description None
         * @property {Resource|undefined}
        */
        Object.defineProperty(this, 'defaultValueReference', {
            enumerable: true,
            get: () => this.__data.defaultValueReference,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.defaultValueReference = new Reference(value);
            }
        });

        /**
         * @description None
         * @property {SampledData|undefined}
        */
        Object.defineProperty(this, 'defaultValueSampledData', {
            enumerable: true,
            get: () => this.__data.defaultValueSampledData,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let SampledData = require('../complex_types/sampledData.js');
                this.__data.defaultValueSampledData = new SampledData(value);
            }
        });

        /**
         * @description None
         * @property {Signature|undefined}
        */
        Object.defineProperty(this, 'defaultValueSignature', {
            enumerable: true,
            get: () => this.__data.defaultValueSignature,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Signature = require('../complex_types/signature.js');
                this.__data.defaultValueSignature = new Signature(value);
            }
        });

        /**
         * @description None
         * @property {Timing|undefined}
        */
        Object.defineProperty(this, 'defaultValueTiming', {
            enumerable: true,
            get: () => this.__data.defaultValueTiming,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Timing = require('../backbone_elements/timing.js');
                this.__data.defaultValueTiming = new Timing(value);
            }
        });

        /**
         * @description None
         * @property {ContactDetail|undefined}
        */
        Object.defineProperty(this, 'defaultValueContactDetail', {
            enumerable: true,
            get: () => this.__data.defaultValueContactDetail,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.defaultValueContactDetail = new ContactDetail(value);
            }
        });

        /**
         * @description None
         * @property {Contributor|undefined}
        */
        Object.defineProperty(this, 'defaultValueContributor', {
            enumerable: true,
            get: () => this.__data.defaultValueContributor,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Contributor = require('../complex_types/contributor.js');
                this.__data.defaultValueContributor = new Contributor(value);
            }
        });

        /**
         * @description None
         * @property {DataRequirement|undefined}
        */
        Object.defineProperty(this, 'defaultValueDataRequirement', {
            enumerable: true,
            get: () => this.__data.defaultValueDataRequirement,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let DataRequirement = require('../complex_types/dataRequirement.js');
                this.__data.defaultValueDataRequirement = new DataRequirement(value);
            }
        });

        /**
         * @description None
         * @property {Expression|undefined}
        */
        Object.defineProperty(this, 'defaultValueExpression', {
            enumerable: true,
            get: () => this.__data.defaultValueExpression,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Expression = require('../complex_types/expression.js');
                this.__data.defaultValueExpression = new Expression(value);
            }
        });

        /**
         * @description None
         * @property {ParameterDefinition|undefined}
        */
        Object.defineProperty(this, 'defaultValueParameterDefinition', {
            enumerable: true,
            get: () => this.__data.defaultValueParameterDefinition,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ParameterDefinition = require('../complex_types/parameterDefinition.js');
                this.__data.defaultValueParameterDefinition = new ParameterDefinition(value);
            }
        });

        /**
         * @description None
         * @property {RelatedArtifact|undefined}
        */
        Object.defineProperty(this, 'defaultValueRelatedArtifact', {
            enumerable: true,
            get: () => this.__data.defaultValueRelatedArtifact,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let RelatedArtifact = require('../complex_types/relatedArtifact.js');
                this.__data.defaultValueRelatedArtifact = new RelatedArtifact(value);
            }
        });

        /**
         * @description None
         * @property {TriggerDefinition|undefined}
        */
        Object.defineProperty(this, 'defaultValueTriggerDefinition', {
            enumerable: true,
            get: () => this.__data.defaultValueTriggerDefinition,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let TriggerDefinition = require('../complex_types/triggerDefinition.js');
                this.__data.defaultValueTriggerDefinition = new TriggerDefinition(value);
            }
        });

        /**
         * @description None
         * @property {UsageContext|undefined}
        */
        Object.defineProperty(this, 'defaultValueUsageContext', {
            enumerable: true,
            get: () => this.__data.defaultValueUsageContext,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let UsageContext = require('../complex_types/usageContext.js');
                this.__data.defaultValueUsageContext = new UsageContext(value);
            }
        });

        /**
         * @description None
         * @property {Dosage|undefined}
        */
        Object.defineProperty(this, 'defaultValueDosage', {
            enumerable: true,
            get: () => this.__data.defaultValueDosage,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Dosage = require('../backbone_elements/dosage.js');
                this.__data.defaultValueDosage = new Dosage(value);
            }
        });

        /**
         * @description None
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'defaultValueMeta', {
            enumerable: true,
            get: () => this.__data.defaultValueMeta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.defaultValueMeta = new Meta(value);
            }
        });

        /**
         * @description The Implicit meaning that is to be understood when this element is missing
    (e.g. 'when this element is missing, the period is ongoing').
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'meaningWhenMissing', {
            enumerable: true,
            get: () => this.__data.meaningWhenMissing,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.meaningWhenMissing = value;
            }
        });

        /**
         * @description If present, indicates that the order of the repeating element has meaning and
    describes what that meaning is.  If absent, it means that the order of the
    element has no meaning.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'orderMeaning', {
            enumerable: true,
            get: () => this.__data.orderMeaning,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.orderMeaning = value;
            }
        });

        /**
         * @description None
         * @property {base64Binary|undefined}
        */
        Object.defineProperty(this, 'fixedBase64Binary', {
            enumerable: true,
            get: () => this.__data.fixedBase64Binary,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.fixedBase64Binary = value;
            }
        });

        /**
         * @description None
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'fixedBoolean', {
            enumerable: true,
            get: () => this.__data.fixedBoolean,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.fixedBoolean = value;
            }
        });

        /**
         * @description None
         * @property {canonical|undefined}
        */
        Object.defineProperty(this, 'fixedCanonical', {
            enumerable: true,
            get: () => this.__data.fixedCanonical,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.fixedCanonical = value;
            }
        });

        /**
         * @description None
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'fixedCode', {
            enumerable: true,
            get: () => this.__data.fixedCode,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.fixedCode = value;
            }
        });

        /**
         * @description None
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'fixedDate', {
            enumerable: true,
            get: () => this.__data.fixedDate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.fixedDate = value;
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'fixedDateTime', {
            enumerable: true,
            get: () => this.__data.fixedDateTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.fixedDateTime = value;
            }
        });

        /**
         * @description None
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'fixedDecimal', {
            enumerable: true,
            get: () => this.__data.fixedDecimal,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.fixedDecimal = value;
            }
        });

        /**
         * @description None
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'fixedId', {
            enumerable: true,
            get: () => this.__data.fixedId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.fixedId = value;
            }
        });

        /**
         * @description None
         * @property {instant|undefined}
        */
        Object.defineProperty(this, 'fixedInstant', {
            enumerable: true,
            get: () => this.__data.fixedInstant,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.fixedInstant = value;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'fixedInteger', {
            enumerable: true,
            get: () => this.__data.fixedInteger,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.fixedInteger = value;
            }
        });

        /**
         * @description None
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'fixedMarkdown', {
            enumerable: true,
            get: () => this.__data.fixedMarkdown,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.fixedMarkdown = value;
            }
        });

        /**
         * @description None
         * @property {oid|undefined}
        */
        Object.defineProperty(this, 'fixedOid', {
            enumerable: true,
            get: () => this.__data.fixedOid,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.fixedOid = value;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'fixedPositiveInt', {
            enumerable: true,
            get: () => this.__data.fixedPositiveInt,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.fixedPositiveInt = value;
            }
        });

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'fixedString', {
            enumerable: true,
            get: () => this.__data.fixedString,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.fixedString = value;
            }
        });

        /**
         * @description None
         * @property {time|undefined}
        */
        Object.defineProperty(this, 'fixedTime', {
            enumerable: true,
            get: () => this.__data.fixedTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.fixedTime = value;
            }
        });

        /**
         * @description None
         * @property {unsignedInt|undefined}
        */
        Object.defineProperty(this, 'fixedUnsignedInt', {
            enumerable: true,
            get: () => this.__data.fixedUnsignedInt,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.fixedUnsignedInt = value;
            }
        });

        /**
         * @description None
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'fixedUri', {
            enumerable: true,
            get: () => this.__data.fixedUri,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.fixedUri = value;
            }
        });

        /**
         * @description None
         * @property {url|undefined}
        */
        Object.defineProperty(this, 'fixedUrl', {
            enumerable: true,
            get: () => this.__data.fixedUrl,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.fixedUrl = value;
            }
        });

        /**
         * @description None
         * @property {uuid|undefined}
        */
        Object.defineProperty(this, 'fixedUuid', {
            enumerable: true,
            get: () => this.__data.fixedUuid,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.fixedUuid = value;
            }
        });

        /**
         * @description None
         * @property {Address|undefined}
        */
        Object.defineProperty(this, 'fixedAddress', {
            enumerable: true,
            get: () => this.__data.fixedAddress,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Address = require('../complex_types/address.js');
                this.__data.fixedAddress = new Address(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'fixedAge', {
            enumerable: true,
            get: () => this.__data.fixedAge,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.fixedAge = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Annotation|undefined}
        */
        Object.defineProperty(this, 'fixedAnnotation', {
            enumerable: true,
            get: () => this.__data.fixedAnnotation,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.fixedAnnotation = new Annotation(value);
            }
        });

        /**
         * @description None
         * @property {Attachment|undefined}
        */
        Object.defineProperty(this, 'fixedAttachment', {
            enumerable: true,
            get: () => this.__data.fixedAttachment,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Attachment = require('../complex_types/attachment.js');
                this.__data.fixedAttachment = new Attachment(value);
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'fixedCodeableConcept', {
            enumerable: true,
            get: () => this.__data.fixedCodeableConcept,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.fixedCodeableConcept = new CodeableConcept(value);
            }
        });

        /**
         * @description None
         * @property {Coding|undefined}
        */
        Object.defineProperty(this, 'fixedCoding', {
            enumerable: true,
            get: () => this.__data.fixedCoding,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.fixedCoding = new Coding(value);
            }
        });

        /**
         * @description None
         * @property {ContactPoint|undefined}
        */
        Object.defineProperty(this, 'fixedContactPoint', {
            enumerable: true,
            get: () => this.__data.fixedContactPoint,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContactPoint = require('../complex_types/contactPoint.js');
                this.__data.fixedContactPoint = new ContactPoint(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'fixedCount', {
            enumerable: true,
            get: () => this.__data.fixedCount,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.fixedCount = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'fixedDistance', {
            enumerable: true,
            get: () => this.__data.fixedDistance,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.fixedDistance = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'fixedDuration', {
            enumerable: true,
            get: () => this.__data.fixedDuration,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.fixedDuration = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {HumanName|undefined}
        */
        Object.defineProperty(this, 'fixedHumanName', {
            enumerable: true,
            get: () => this.__data.fixedHumanName,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let HumanName = require('../complex_types/humanName.js');
                this.__data.fixedHumanName = new HumanName(value);
            }
        });

        /**
         * @description None
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'fixedIdentifier', {
            enumerable: true,
            get: () => this.__data.fixedIdentifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.fixedIdentifier = new Identifier(value);
            }
        });

        /**
         * @description None
         * @property {Money|undefined}
        */
        Object.defineProperty(this, 'fixedMoney', {
            enumerable: true,
            get: () => this.__data.fixedMoney,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Money = require('../complex_types/money.js');
                this.__data.fixedMoney = new Money(value);
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'fixedPeriod', {
            enumerable: true,
            get: () => this.__data.fixedPeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.fixedPeriod = new Period(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'fixedQuantity', {
            enumerable: true,
            get: () => this.__data.fixedQuantity,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.fixedQuantity = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Range|undefined}
        */
        Object.defineProperty(this, 'fixedRange', {
            enumerable: true,
            get: () => this.__data.fixedRange,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Range = require('../complex_types/range.js');
                this.__data.fixedRange = new Range(value);
            }
        });

        /**
         * @description None
         * @property {Ratio|undefined}
        */
        Object.defineProperty(this, 'fixedRatio', {
            enumerable: true,
            get: () => this.__data.fixedRatio,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Ratio = require('../complex_types/ratio.js');
                this.__data.fixedRatio = new Ratio(value);
            }
        });

        /**
         * @description None
         * @property {Resource|undefined}
        */
        Object.defineProperty(this, 'fixedReference', {
            enumerable: true,
            get: () => this.__data.fixedReference,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.fixedReference = new Reference(value);
            }
        });

        /**
         * @description None
         * @property {SampledData|undefined}
        */
        Object.defineProperty(this, 'fixedSampledData', {
            enumerable: true,
            get: () => this.__data.fixedSampledData,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let SampledData = require('../complex_types/sampledData.js');
                this.__data.fixedSampledData = new SampledData(value);
            }
        });

        /**
         * @description None
         * @property {Signature|undefined}
        */
        Object.defineProperty(this, 'fixedSignature', {
            enumerable: true,
            get: () => this.__data.fixedSignature,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Signature = require('../complex_types/signature.js');
                this.__data.fixedSignature = new Signature(value);
            }
        });

        /**
         * @description None
         * @property {Timing|undefined}
        */
        Object.defineProperty(this, 'fixedTiming', {
            enumerable: true,
            get: () => this.__data.fixedTiming,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Timing = require('../backbone_elements/timing.js');
                this.__data.fixedTiming = new Timing(value);
            }
        });

        /**
         * @description None
         * @property {ContactDetail|undefined}
        */
        Object.defineProperty(this, 'fixedContactDetail', {
            enumerable: true,
            get: () => this.__data.fixedContactDetail,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.fixedContactDetail = new ContactDetail(value);
            }
        });

        /**
         * @description None
         * @property {Contributor|undefined}
        */
        Object.defineProperty(this, 'fixedContributor', {
            enumerable: true,
            get: () => this.__data.fixedContributor,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Contributor = require('../complex_types/contributor.js');
                this.__data.fixedContributor = new Contributor(value);
            }
        });

        /**
         * @description None
         * @property {DataRequirement|undefined}
        */
        Object.defineProperty(this, 'fixedDataRequirement', {
            enumerable: true,
            get: () => this.__data.fixedDataRequirement,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let DataRequirement = require('../complex_types/dataRequirement.js');
                this.__data.fixedDataRequirement = new DataRequirement(value);
            }
        });

        /**
         * @description None
         * @property {Expression|undefined}
        */
        Object.defineProperty(this, 'fixedExpression', {
            enumerable: true,
            get: () => this.__data.fixedExpression,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Expression = require('../complex_types/expression.js');
                this.__data.fixedExpression = new Expression(value);
            }
        });

        /**
         * @description None
         * @property {ParameterDefinition|undefined}
        */
        Object.defineProperty(this, 'fixedParameterDefinition', {
            enumerable: true,
            get: () => this.__data.fixedParameterDefinition,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ParameterDefinition = require('../complex_types/parameterDefinition.js');
                this.__data.fixedParameterDefinition = new ParameterDefinition(value);
            }
        });

        /**
         * @description None
         * @property {RelatedArtifact|undefined}
        */
        Object.defineProperty(this, 'fixedRelatedArtifact', {
            enumerable: true,
            get: () => this.__data.fixedRelatedArtifact,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let RelatedArtifact = require('../complex_types/relatedArtifact.js');
                this.__data.fixedRelatedArtifact = new RelatedArtifact(value);
            }
        });

        /**
         * @description None
         * @property {TriggerDefinition|undefined}
        */
        Object.defineProperty(this, 'fixedTriggerDefinition', {
            enumerable: true,
            get: () => this.__data.fixedTriggerDefinition,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let TriggerDefinition = require('../complex_types/triggerDefinition.js');
                this.__data.fixedTriggerDefinition = new TriggerDefinition(value);
            }
        });

        /**
         * @description None
         * @property {UsageContext|undefined}
        */
        Object.defineProperty(this, 'fixedUsageContext', {
            enumerable: true,
            get: () => this.__data.fixedUsageContext,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let UsageContext = require('../complex_types/usageContext.js');
                this.__data.fixedUsageContext = new UsageContext(value);
            }
        });

        /**
         * @description None
         * @property {Dosage|undefined}
        */
        Object.defineProperty(this, 'fixedDosage', {
            enumerable: true,
            get: () => this.__data.fixedDosage,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Dosage = require('../backbone_elements/dosage.js');
                this.__data.fixedDosage = new Dosage(value);
            }
        });

        /**
         * @description None
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'fixedMeta', {
            enumerable: true,
            get: () => this.__data.fixedMeta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.fixedMeta = new Meta(value);
            }
        });

        /**
         * @description None
         * @property {base64Binary|undefined}
        */
        Object.defineProperty(this, 'patternBase64Binary', {
            enumerable: true,
            get: () => this.__data.patternBase64Binary,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.patternBase64Binary = value;
            }
        });

        /**
         * @description None
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'patternBoolean', {
            enumerable: true,
            get: () => this.__data.patternBoolean,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.patternBoolean = value;
            }
        });

        /**
         * @description None
         * @property {canonical|undefined}
        */
        Object.defineProperty(this, 'patternCanonical', {
            enumerable: true,
            get: () => this.__data.patternCanonical,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.patternCanonical = value;
            }
        });

        /**
         * @description None
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'patternCode', {
            enumerable: true,
            get: () => this.__data.patternCode,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.patternCode = value;
            }
        });

        /**
         * @description None
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'patternDate', {
            enumerable: true,
            get: () => this.__data.patternDate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.patternDate = value;
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'patternDateTime', {
            enumerable: true,
            get: () => this.__data.patternDateTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.patternDateTime = value;
            }
        });

        /**
         * @description None
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'patternDecimal', {
            enumerable: true,
            get: () => this.__data.patternDecimal,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.patternDecimal = value;
            }
        });

        /**
         * @description None
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'patternId', {
            enumerable: true,
            get: () => this.__data.patternId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.patternId = value;
            }
        });

        /**
         * @description None
         * @property {instant|undefined}
        */
        Object.defineProperty(this, 'patternInstant', {
            enumerable: true,
            get: () => this.__data.patternInstant,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.patternInstant = value;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'patternInteger', {
            enumerable: true,
            get: () => this.__data.patternInteger,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.patternInteger = value;
            }
        });

        /**
         * @description None
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'patternMarkdown', {
            enumerable: true,
            get: () => this.__data.patternMarkdown,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.patternMarkdown = value;
            }
        });

        /**
         * @description None
         * @property {oid|undefined}
        */
        Object.defineProperty(this, 'patternOid', {
            enumerable: true,
            get: () => this.__data.patternOid,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.patternOid = value;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'patternPositiveInt', {
            enumerable: true,
            get: () => this.__data.patternPositiveInt,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.patternPositiveInt = value;
            }
        });

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'patternString', {
            enumerable: true,
            get: () => this.__data.patternString,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.patternString = value;
            }
        });

        /**
         * @description None
         * @property {time|undefined}
        */
        Object.defineProperty(this, 'patternTime', {
            enumerable: true,
            get: () => this.__data.patternTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.patternTime = value;
            }
        });

        /**
         * @description None
         * @property {unsignedInt|undefined}
        */
        Object.defineProperty(this, 'patternUnsignedInt', {
            enumerable: true,
            get: () => this.__data.patternUnsignedInt,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.patternUnsignedInt = value;
            }
        });

        /**
         * @description None
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'patternUri', {
            enumerable: true,
            get: () => this.__data.patternUri,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.patternUri = value;
            }
        });

        /**
         * @description None
         * @property {url|undefined}
        */
        Object.defineProperty(this, 'patternUrl', {
            enumerable: true,
            get: () => this.__data.patternUrl,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.patternUrl = value;
            }
        });

        /**
         * @description None
         * @property {uuid|undefined}
        */
        Object.defineProperty(this, 'patternUuid', {
            enumerable: true,
            get: () => this.__data.patternUuid,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.patternUuid = value;
            }
        });

        /**
         * @description None
         * @property {Address|undefined}
        */
        Object.defineProperty(this, 'patternAddress', {
            enumerable: true,
            get: () => this.__data.patternAddress,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Address = require('../complex_types/address.js');
                this.__data.patternAddress = new Address(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'patternAge', {
            enumerable: true,
            get: () => this.__data.patternAge,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.patternAge = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Annotation|undefined}
        */
        Object.defineProperty(this, 'patternAnnotation', {
            enumerable: true,
            get: () => this.__data.patternAnnotation,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.patternAnnotation = new Annotation(value);
            }
        });

        /**
         * @description None
         * @property {Attachment|undefined}
        */
        Object.defineProperty(this, 'patternAttachment', {
            enumerable: true,
            get: () => this.__data.patternAttachment,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Attachment = require('../complex_types/attachment.js');
                this.__data.patternAttachment = new Attachment(value);
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'patternCodeableConcept', {
            enumerable: true,
            get: () => this.__data.patternCodeableConcept,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.patternCodeableConcept = new CodeableConcept(value);
            }
        });

        /**
         * @description None
         * @property {Coding|undefined}
        */
        Object.defineProperty(this, 'patternCoding', {
            enumerable: true,
            get: () => this.__data.patternCoding,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.patternCoding = new Coding(value);
            }
        });

        /**
         * @description None
         * @property {ContactPoint|undefined}
        */
        Object.defineProperty(this, 'patternContactPoint', {
            enumerable: true,
            get: () => this.__data.patternContactPoint,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContactPoint = require('../complex_types/contactPoint.js');
                this.__data.patternContactPoint = new ContactPoint(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'patternCount', {
            enumerable: true,
            get: () => this.__data.patternCount,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.patternCount = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'patternDistance', {
            enumerable: true,
            get: () => this.__data.patternDistance,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.patternDistance = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'patternDuration', {
            enumerable: true,
            get: () => this.__data.patternDuration,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.patternDuration = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {HumanName|undefined}
        */
        Object.defineProperty(this, 'patternHumanName', {
            enumerable: true,
            get: () => this.__data.patternHumanName,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let HumanName = require('../complex_types/humanName.js');
                this.__data.patternHumanName = new HumanName(value);
            }
        });

        /**
         * @description None
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'patternIdentifier', {
            enumerable: true,
            get: () => this.__data.patternIdentifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.patternIdentifier = new Identifier(value);
            }
        });

        /**
         * @description None
         * @property {Money|undefined}
        */
        Object.defineProperty(this, 'patternMoney', {
            enumerable: true,
            get: () => this.__data.patternMoney,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Money = require('../complex_types/money.js');
                this.__data.patternMoney = new Money(value);
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'patternPeriod', {
            enumerable: true,
            get: () => this.__data.patternPeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.patternPeriod = new Period(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'patternQuantity', {
            enumerable: true,
            get: () => this.__data.patternQuantity,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.patternQuantity = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Range|undefined}
        */
        Object.defineProperty(this, 'patternRange', {
            enumerable: true,
            get: () => this.__data.patternRange,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Range = require('../complex_types/range.js');
                this.__data.patternRange = new Range(value);
            }
        });

        /**
         * @description None
         * @property {Ratio|undefined}
        */
        Object.defineProperty(this, 'patternRatio', {
            enumerable: true,
            get: () => this.__data.patternRatio,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Ratio = require('../complex_types/ratio.js');
                this.__data.patternRatio = new Ratio(value);
            }
        });

        /**
         * @description None
         * @property {Resource|undefined}
        */
        Object.defineProperty(this, 'patternReference', {
            enumerable: true,
            get: () => this.__data.patternReference,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.patternReference = new Reference(value);
            }
        });

        /**
         * @description None
         * @property {SampledData|undefined}
        */
        Object.defineProperty(this, 'patternSampledData', {
            enumerable: true,
            get: () => this.__data.patternSampledData,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let SampledData = require('../complex_types/sampledData.js');
                this.__data.patternSampledData = new SampledData(value);
            }
        });

        /**
         * @description None
         * @property {Signature|undefined}
        */
        Object.defineProperty(this, 'patternSignature', {
            enumerable: true,
            get: () => this.__data.patternSignature,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Signature = require('../complex_types/signature.js');
                this.__data.patternSignature = new Signature(value);
            }
        });

        /**
         * @description None
         * @property {Timing|undefined}
        */
        Object.defineProperty(this, 'patternTiming', {
            enumerable: true,
            get: () => this.__data.patternTiming,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Timing = require('../backbone_elements/timing.js');
                this.__data.patternTiming = new Timing(value);
            }
        });

        /**
         * @description None
         * @property {ContactDetail|undefined}
        */
        Object.defineProperty(this, 'patternContactDetail', {
            enumerable: true,
            get: () => this.__data.patternContactDetail,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.patternContactDetail = new ContactDetail(value);
            }
        });

        /**
         * @description None
         * @property {Contributor|undefined}
        */
        Object.defineProperty(this, 'patternContributor', {
            enumerable: true,
            get: () => this.__data.patternContributor,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Contributor = require('../complex_types/contributor.js');
                this.__data.patternContributor = new Contributor(value);
            }
        });

        /**
         * @description None
         * @property {DataRequirement|undefined}
        */
        Object.defineProperty(this, 'patternDataRequirement', {
            enumerable: true,
            get: () => this.__data.patternDataRequirement,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let DataRequirement = require('../complex_types/dataRequirement.js');
                this.__data.patternDataRequirement = new DataRequirement(value);
            }
        });

        /**
         * @description None
         * @property {Expression|undefined}
        */
        Object.defineProperty(this, 'patternExpression', {
            enumerable: true,
            get: () => this.__data.patternExpression,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Expression = require('../complex_types/expression.js');
                this.__data.patternExpression = new Expression(value);
            }
        });

        /**
         * @description None
         * @property {ParameterDefinition|undefined}
        */
        Object.defineProperty(this, 'patternParameterDefinition', {
            enumerable: true,
            get: () => this.__data.patternParameterDefinition,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ParameterDefinition = require('../complex_types/parameterDefinition.js');
                this.__data.patternParameterDefinition = new ParameterDefinition(value);
            }
        });

        /**
         * @description None
         * @property {RelatedArtifact|undefined}
        */
        Object.defineProperty(this, 'patternRelatedArtifact', {
            enumerable: true,
            get: () => this.__data.patternRelatedArtifact,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let RelatedArtifact = require('../complex_types/relatedArtifact.js');
                this.__data.patternRelatedArtifact = new RelatedArtifact(value);
            }
        });

        /**
         * @description None
         * @property {TriggerDefinition|undefined}
        */
        Object.defineProperty(this, 'patternTriggerDefinition', {
            enumerable: true,
            get: () => this.__data.patternTriggerDefinition,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let TriggerDefinition = require('../complex_types/triggerDefinition.js');
                this.__data.patternTriggerDefinition = new TriggerDefinition(value);
            }
        });

        /**
         * @description None
         * @property {UsageContext|undefined}
        */
        Object.defineProperty(this, 'patternUsageContext', {
            enumerable: true,
            get: () => this.__data.patternUsageContext,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let UsageContext = require('../complex_types/usageContext.js');
                this.__data.patternUsageContext = new UsageContext(value);
            }
        });

        /**
         * @description None
         * @property {Dosage|undefined}
        */
        Object.defineProperty(this, 'patternDosage', {
            enumerable: true,
            get: () => this.__data.patternDosage,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Dosage = require('../backbone_elements/dosage.js');
                this.__data.patternDosage = new Dosage(value);
            }
        });

        /**
         * @description None
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'patternMeta', {
            enumerable: true,
            get: () => this.__data.patternMeta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.patternMeta = new Meta(value);
            }
        });

        /**
         * @description A sample value for this element demonstrating the type of information that
    would typically be found in the element.
         * @property {ElementDefinitionExample[]|undefined}
        */
        Object.defineProperty(this, 'example', {
            enumerable: true,
            get: () => this.__data.example,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ElementDefinitionExample = require('../backbone_elements/elementDefinitionExample.js');
                this.__data.example = Array.isArray(value) ? value.map(v => new ElementDefinitionExample(v)) : [new ElementDefinitionExample(value)];
            }
        });

        /**
         * @description None
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'minValueDate', {
            enumerable: true,
            get: () => this.__data.minValueDate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.minValueDate = value;
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'minValueDateTime', {
            enumerable: true,
            get: () => this.__data.minValueDateTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.minValueDateTime = value;
            }
        });

        /**
         * @description None
         * @property {instant|undefined}
        */
        Object.defineProperty(this, 'minValueInstant', {
            enumerable: true,
            get: () => this.__data.minValueInstant,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.minValueInstant = value;
            }
        });

        /**
         * @description None
         * @property {time|undefined}
        */
        Object.defineProperty(this, 'minValueTime', {
            enumerable: true,
            get: () => this.__data.minValueTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.minValueTime = value;
            }
        });

        /**
         * @description None
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'minValueDecimal', {
            enumerable: true,
            get: () => this.__data.minValueDecimal,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.minValueDecimal = value;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'minValueInteger', {
            enumerable: true,
            get: () => this.__data.minValueInteger,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.minValueInteger = value;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'minValuePositiveInt', {
            enumerable: true,
            get: () => this.__data.minValuePositiveInt,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.minValuePositiveInt = value;
            }
        });

        /**
         * @description None
         * @property {unsignedInt|undefined}
        */
        Object.defineProperty(this, 'minValueUnsignedInt', {
            enumerable: true,
            get: () => this.__data.minValueUnsignedInt,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.minValueUnsignedInt = value;
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'minValueQuantity', {
            enumerable: true,
            get: () => this.__data.minValueQuantity,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.minValueQuantity = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'maxValueDate', {
            enumerable: true,
            get: () => this.__data.maxValueDate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.maxValueDate = value;
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'maxValueDateTime', {
            enumerable: true,
            get: () => this.__data.maxValueDateTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.maxValueDateTime = value;
            }
        });

        /**
         * @description None
         * @property {instant|undefined}
        */
        Object.defineProperty(this, 'maxValueInstant', {
            enumerable: true,
            get: () => this.__data.maxValueInstant,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.maxValueInstant = value;
            }
        });

        /**
         * @description None
         * @property {time|undefined}
        */
        Object.defineProperty(this, 'maxValueTime', {
            enumerable: true,
            get: () => this.__data.maxValueTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.maxValueTime = value;
            }
        });

        /**
         * @description None
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'maxValueDecimal', {
            enumerable: true,
            get: () => this.__data.maxValueDecimal,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.maxValueDecimal = value;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'maxValueInteger', {
            enumerable: true,
            get: () => this.__data.maxValueInteger,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.maxValueInteger = value;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'maxValuePositiveInt', {
            enumerable: true,
            get: () => this.__data.maxValuePositiveInt,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.maxValuePositiveInt = value;
            }
        });

        /**
         * @description None
         * @property {unsignedInt|undefined}
        */
        Object.defineProperty(this, 'maxValueUnsignedInt', {
            enumerable: true,
            get: () => this.__data.maxValueUnsignedInt,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.maxValueUnsignedInt = value;
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'maxValueQuantity', {
            enumerable: true,
            get: () => this.__data.maxValueQuantity,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.maxValueQuantity = new Quantity(value);
            }
        });

        /**
         * @description Indicates the maximum length in characters that is permitted to be present in
    conformant instances and which is expected to be supported by conformant
    consumers that support the element.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'maxLength', {
            enumerable: true,
            get: () => this.__data.maxLength,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.maxLength = value;
            }
        });

        /**
         * @description A reference to an invariant that may make additional statements about the
    cardinality or value in the instance.
         * @property {id[]|undefined}
        */
        Object.defineProperty(this, 'condition', {
            enumerable: true,
            get: () => this.__data.condition,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.condition = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description Formal constraints such as co-occurrence and other constraints that can be
    computationally evaluated within the context of the instance.
         * @property {ElementDefinitionConstraint[]|undefined}
        */
        Object.defineProperty(this, 'constraint', {
            enumerable: true,
            get: () => this.__data.constraint,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ElementDefinitionConstraint = require('../backbone_elements/elementDefinitionConstraint.js');
                this.__data.constraint = Array.isArray(value) ? value.map(v => new ElementDefinitionConstraint(v)) : [new ElementDefinitionConstraint(value)];
            }
        });

        /**
         * @description If true, implementations that produce or consume resources SHALL provide
    "support" for the element in some meaningful way.  If false, the element may
    be ignored and not supported. If false, whether to populate or use the data
    element in any way is at the discretion of the implementation.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'mustSupport', {
            enumerable: true,
            get: () => this.__data.mustSupport,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.mustSupport = value;
            }
        });

        /**
         * @description If true, the value of this element affects the interpretation of the element
    or resource that contains it, and the value of the element cannot be ignored.
    Typically, this is used for status, negation and qualification codes. The
    effect of this is that the element cannot be ignored by systems: they SHALL
    either recognize the element and process it, and/or a pre-determination has
    been made that it is not relevant to their particular system.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'isModifier', {
            enumerable: true,
            get: () => this.__data.isModifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.isModifier = value;
            }
        });

        /**
         * @description Explains how that element affects the interpretation of the resource or
    element that contains it.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'isModifierReason', {
            enumerable: true,
            get: () => this.__data.isModifierReason,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.isModifierReason = value;
            }
        });

        /**
         * @description Whether the element should be included if a client requests a search with the
    parameter _summary=true.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'isSummary', {
            enumerable: true,
            get: () => this.__data.isSummary,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.isSummary = value;
            }
        });

        /**
         * @description Binds to a value set if this element is coded (code, Coding, CodeableConcept,
    Quantity), or the data types (string, uri).
         * @property {ElementDefinitionBinding|undefined}
        */
        Object.defineProperty(this, 'binding', {
            enumerable: true,
            get: () => this.__data.binding,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ElementDefinitionBinding = require('../backbone_elements/elementDefinitionBinding.js');
                this.__data.binding = new ElementDefinitionBinding(value);
            }
        });

        /**
         * @description Identifies a concept from an external specification that roughly corresponds
    to this element.
         * @property {ElementDefinitionMapping[]|undefined}
        */
        Object.defineProperty(this, 'mapping', {
            enumerable: true,
            get: () => this.__data.mapping,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ElementDefinitionMapping = require('../backbone_elements/elementDefinitionMapping.js');
                this.__data.mapping = Array.isArray(value) ? value.map(v => new ElementDefinitionMapping(v)) : [new ElementDefinitionMapping(value)];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ElementDefinition',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ElementDefinition';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            path: this.path,
            representation: this.representation,
            sliceName: this.sliceName,
            sliceIsConstraining: this.sliceIsConstraining,
            label: this.label,
            code: this.code && this.code.map(v => v.toJSON()),
            slicing: this.slicing && this.slicing.toJSON(),
            short: this.short,
            definition: this.definition,
            comment: this.comment,
            requirements: this.requirements,
            alias: this.alias,
            min: this.min,
            max: this.max,
            base: this.base && this.base.toJSON(),
            contentReference: this.contentReference,
            type: this.type && this.type.map(v => v.toJSON()),
            defaultValueBase64Binary: this.defaultValueBase64Binary,
            defaultValueBoolean: this.defaultValueBoolean,
            defaultValueCanonical: this.defaultValueCanonical,
            defaultValueCode: this.defaultValueCode,
            defaultValueDate: this.defaultValueDate,
            defaultValueDateTime: this.defaultValueDateTime,
            defaultValueDecimal: this.defaultValueDecimal,
            defaultValueId: this.defaultValueId,
            defaultValueInstant: this.defaultValueInstant,
            defaultValueInteger: this.defaultValueInteger,
            defaultValueMarkdown: this.defaultValueMarkdown,
            defaultValueOid: this.defaultValueOid,
            defaultValuePositiveInt: this.defaultValuePositiveInt,
            defaultValueString: this.defaultValueString,
            defaultValueTime: this.defaultValueTime,
            defaultValueUnsignedInt: this.defaultValueUnsignedInt,
            defaultValueUri: this.defaultValueUri,
            defaultValueUrl: this.defaultValueUrl,
            defaultValueUuid: this.defaultValueUuid,
            defaultValueAddress: this.defaultValueAddress && this.defaultValueAddress.toJSON(),
            defaultValueAge: this.defaultValueAge && this.defaultValueAge.toJSON(),
            defaultValueAnnotation: this.defaultValueAnnotation && this.defaultValueAnnotation.toJSON(),
            defaultValueAttachment: this.defaultValueAttachment && this.defaultValueAttachment.toJSON(),
            defaultValueCodeableConcept: this.defaultValueCodeableConcept && this.defaultValueCodeableConcept.toJSON(),
            defaultValueCoding: this.defaultValueCoding && this.defaultValueCoding.toJSON(),
            defaultValueContactPoint: this.defaultValueContactPoint && this.defaultValueContactPoint.toJSON(),
            defaultValueCount: this.defaultValueCount && this.defaultValueCount.toJSON(),
            defaultValueDistance: this.defaultValueDistance && this.defaultValueDistance.toJSON(),
            defaultValueDuration: this.defaultValueDuration && this.defaultValueDuration.toJSON(),
            defaultValueHumanName: this.defaultValueHumanName && this.defaultValueHumanName.toJSON(),
            defaultValueIdentifier: this.defaultValueIdentifier && this.defaultValueIdentifier.toJSON(),
            defaultValueMoney: this.defaultValueMoney && this.defaultValueMoney.toJSON(),
            defaultValuePeriod: this.defaultValuePeriod && this.defaultValuePeriod.toJSON(),
            defaultValueQuantity: this.defaultValueQuantity && this.defaultValueQuantity.toJSON(),
            defaultValueRange: this.defaultValueRange && this.defaultValueRange.toJSON(),
            defaultValueRatio: this.defaultValueRatio && this.defaultValueRatio.toJSON(),
            defaultValueReference: this.defaultValueReference && this.defaultValueReference.toJSON(),
            defaultValueSampledData: this.defaultValueSampledData && this.defaultValueSampledData.toJSON(),
            defaultValueSignature: this.defaultValueSignature && this.defaultValueSignature.toJSON(),
            defaultValueTiming: this.defaultValueTiming && this.defaultValueTiming.toJSON(),
            defaultValueContactDetail: this.defaultValueContactDetail && this.defaultValueContactDetail.toJSON(),
            defaultValueContributor: this.defaultValueContributor && this.defaultValueContributor.toJSON(),
            defaultValueDataRequirement: this.defaultValueDataRequirement && this.defaultValueDataRequirement.toJSON(),
            defaultValueExpression: this.defaultValueExpression && this.defaultValueExpression.toJSON(),
            defaultValueParameterDefinition: this.defaultValueParameterDefinition && this.defaultValueParameterDefinition.toJSON(),
            defaultValueRelatedArtifact: this.defaultValueRelatedArtifact && this.defaultValueRelatedArtifact.toJSON(),
            defaultValueTriggerDefinition: this.defaultValueTriggerDefinition && this.defaultValueTriggerDefinition.toJSON(),
            defaultValueUsageContext: this.defaultValueUsageContext && this.defaultValueUsageContext.toJSON(),
            defaultValueDosage: this.defaultValueDosage && this.defaultValueDosage.toJSON(),
            defaultValueMeta: this.defaultValueMeta && this.defaultValueMeta.toJSON(),
            meaningWhenMissing: this.meaningWhenMissing,
            orderMeaning: this.orderMeaning,
            fixedBase64Binary: this.fixedBase64Binary,
            fixedBoolean: this.fixedBoolean,
            fixedCanonical: this.fixedCanonical,
            fixedCode: this.fixedCode,
            fixedDate: this.fixedDate,
            fixedDateTime: this.fixedDateTime,
            fixedDecimal: this.fixedDecimal,
            fixedId: this.fixedId,
            fixedInstant: this.fixedInstant,
            fixedInteger: this.fixedInteger,
            fixedMarkdown: this.fixedMarkdown,
            fixedOid: this.fixedOid,
            fixedPositiveInt: this.fixedPositiveInt,
            fixedString: this.fixedString,
            fixedTime: this.fixedTime,
            fixedUnsignedInt: this.fixedUnsignedInt,
            fixedUri: this.fixedUri,
            fixedUrl: this.fixedUrl,
            fixedUuid: this.fixedUuid,
            fixedAddress: this.fixedAddress && this.fixedAddress.toJSON(),
            fixedAge: this.fixedAge && this.fixedAge.toJSON(),
            fixedAnnotation: this.fixedAnnotation && this.fixedAnnotation.toJSON(),
            fixedAttachment: this.fixedAttachment && this.fixedAttachment.toJSON(),
            fixedCodeableConcept: this.fixedCodeableConcept && this.fixedCodeableConcept.toJSON(),
            fixedCoding: this.fixedCoding && this.fixedCoding.toJSON(),
            fixedContactPoint: this.fixedContactPoint && this.fixedContactPoint.toJSON(),
            fixedCount: this.fixedCount && this.fixedCount.toJSON(),
            fixedDistance: this.fixedDistance && this.fixedDistance.toJSON(),
            fixedDuration: this.fixedDuration && this.fixedDuration.toJSON(),
            fixedHumanName: this.fixedHumanName && this.fixedHumanName.toJSON(),
            fixedIdentifier: this.fixedIdentifier && this.fixedIdentifier.toJSON(),
            fixedMoney: this.fixedMoney && this.fixedMoney.toJSON(),
            fixedPeriod: this.fixedPeriod && this.fixedPeriod.toJSON(),
            fixedQuantity: this.fixedQuantity && this.fixedQuantity.toJSON(),
            fixedRange: this.fixedRange && this.fixedRange.toJSON(),
            fixedRatio: this.fixedRatio && this.fixedRatio.toJSON(),
            fixedReference: this.fixedReference && this.fixedReference.toJSON(),
            fixedSampledData: this.fixedSampledData && this.fixedSampledData.toJSON(),
            fixedSignature: this.fixedSignature && this.fixedSignature.toJSON(),
            fixedTiming: this.fixedTiming && this.fixedTiming.toJSON(),
            fixedContactDetail: this.fixedContactDetail && this.fixedContactDetail.toJSON(),
            fixedContributor: this.fixedContributor && this.fixedContributor.toJSON(),
            fixedDataRequirement: this.fixedDataRequirement && this.fixedDataRequirement.toJSON(),
            fixedExpression: this.fixedExpression && this.fixedExpression.toJSON(),
            fixedParameterDefinition: this.fixedParameterDefinition && this.fixedParameterDefinition.toJSON(),
            fixedRelatedArtifact: this.fixedRelatedArtifact && this.fixedRelatedArtifact.toJSON(),
            fixedTriggerDefinition: this.fixedTriggerDefinition && this.fixedTriggerDefinition.toJSON(),
            fixedUsageContext: this.fixedUsageContext && this.fixedUsageContext.toJSON(),
            fixedDosage: this.fixedDosage && this.fixedDosage.toJSON(),
            fixedMeta: this.fixedMeta && this.fixedMeta.toJSON(),
            patternBase64Binary: this.patternBase64Binary,
            patternBoolean: this.patternBoolean,
            patternCanonical: this.patternCanonical,
            patternCode: this.patternCode,
            patternDate: this.patternDate,
            patternDateTime: this.patternDateTime,
            patternDecimal: this.patternDecimal,
            patternId: this.patternId,
            patternInstant: this.patternInstant,
            patternInteger: this.patternInteger,
            patternMarkdown: this.patternMarkdown,
            patternOid: this.patternOid,
            patternPositiveInt: this.patternPositiveInt,
            patternString: this.patternString,
            patternTime: this.patternTime,
            patternUnsignedInt: this.patternUnsignedInt,
            patternUri: this.patternUri,
            patternUrl: this.patternUrl,
            patternUuid: this.patternUuid,
            patternAddress: this.patternAddress && this.patternAddress.toJSON(),
            patternAge: this.patternAge && this.patternAge.toJSON(),
            patternAnnotation: this.patternAnnotation && this.patternAnnotation.toJSON(),
            patternAttachment: this.patternAttachment && this.patternAttachment.toJSON(),
            patternCodeableConcept: this.patternCodeableConcept && this.patternCodeableConcept.toJSON(),
            patternCoding: this.patternCoding && this.patternCoding.toJSON(),
            patternContactPoint: this.patternContactPoint && this.patternContactPoint.toJSON(),
            patternCount: this.patternCount && this.patternCount.toJSON(),
            patternDistance: this.patternDistance && this.patternDistance.toJSON(),
            patternDuration: this.patternDuration && this.patternDuration.toJSON(),
            patternHumanName: this.patternHumanName && this.patternHumanName.toJSON(),
            patternIdentifier: this.patternIdentifier && this.patternIdentifier.toJSON(),
            patternMoney: this.patternMoney && this.patternMoney.toJSON(),
            patternPeriod: this.patternPeriod && this.patternPeriod.toJSON(),
            patternQuantity: this.patternQuantity && this.patternQuantity.toJSON(),
            patternRange: this.patternRange && this.patternRange.toJSON(),
            patternRatio: this.patternRatio && this.patternRatio.toJSON(),
            patternReference: this.patternReference && this.patternReference.toJSON(),
            patternSampledData: this.patternSampledData && this.patternSampledData.toJSON(),
            patternSignature: this.patternSignature && this.patternSignature.toJSON(),
            patternTiming: this.patternTiming && this.patternTiming.toJSON(),
            patternContactDetail: this.patternContactDetail && this.patternContactDetail.toJSON(),
            patternContributor: this.patternContributor && this.patternContributor.toJSON(),
            patternDataRequirement: this.patternDataRequirement && this.patternDataRequirement.toJSON(),
            patternExpression: this.patternExpression && this.patternExpression.toJSON(),
            patternParameterDefinition: this.patternParameterDefinition && this.patternParameterDefinition.toJSON(),
            patternRelatedArtifact: this.patternRelatedArtifact && this.patternRelatedArtifact.toJSON(),
            patternTriggerDefinition: this.patternTriggerDefinition && this.patternTriggerDefinition.toJSON(),
            patternUsageContext: this.patternUsageContext && this.patternUsageContext.toJSON(),
            patternDosage: this.patternDosage && this.patternDosage.toJSON(),
            patternMeta: this.patternMeta && this.patternMeta.toJSON(),
            example: this.example && this.example.map(v => v.toJSON()),
            minValueDate: this.minValueDate,
            minValueDateTime: this.minValueDateTime,
            minValueInstant: this.minValueInstant,
            minValueTime: this.minValueTime,
            minValueDecimal: this.minValueDecimal,
            minValueInteger: this.minValueInteger,
            minValuePositiveInt: this.minValuePositiveInt,
            minValueUnsignedInt: this.minValueUnsignedInt,
            minValueQuantity: this.minValueQuantity && this.minValueQuantity.toJSON(),
            maxValueDate: this.maxValueDate,
            maxValueDateTime: this.maxValueDateTime,
            maxValueInstant: this.maxValueInstant,
            maxValueTime: this.maxValueTime,
            maxValueDecimal: this.maxValueDecimal,
            maxValueInteger: this.maxValueInteger,
            maxValuePositiveInt: this.maxValuePositiveInt,
            maxValueUnsignedInt: this.maxValueUnsignedInt,
            maxValueQuantity: this.maxValueQuantity && this.maxValueQuantity.toJSON(),
            maxLength: this.maxLength,
            condition: this.condition,
            constraint: this.constraint && this.constraint.map(v => v.toJSON()),
            mustSupport: this.mustSupport,
            isModifier: this.isModifier,
            isModifierReason: this.isModifierReason,
            isSummary: this.isSummary,
            binding: this.binding && this.binding.toJSON(),
            mapping: this.mapping && this.mapping.map(v => v.toJSON()),
        };
    }
}

module.exports = ElementDefinition;
