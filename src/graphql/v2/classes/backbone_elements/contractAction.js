// This file is auto-generated by generate_classes so do not edit manually

/**
Contract.Action
    Legally enforceable, formally recorded unilateral or bilateral directive i.e.,
    a policy or agreement.
*/
class ContractAction {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description True if the term prohibits the  action.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'doNotPerform', {
            enumerable: true,
            get: () => this.__data.doNotPerform,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.doNotPerform = value;
            }
        });

        /**
         * @description Activity or service obligation to be done or not done, performed or not
    performed, effectuated or not by this Contract term.
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.type = new CodeableConcept(value);
            }
        });

        /**
         * @description Entity of the action.
         * @property {ContractSubject[]|undefined}
        */
        Object.defineProperty(this, 'subject', {
            enumerable: true,
            get: () => this.__data.subject,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContractSubject = require('../backbone_elements/contractSubject.js');
                this.__data.subject = new ContractSubject(value);
            }
        });

        /**
         * @description Reason or purpose for the action stipulated by this Contract Provision.
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'intent', {
            enumerable: true,
            get: () => this.__data.intent,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.intent = new CodeableConcept(value);
            }
        });

        /**
         * @description Id [identifier??] of the clause or question text related to this action in the
    referenced form or QuestionnaireResponse.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'linkId', {
            enumerable: true,
            get: () => this.__data.linkId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.linkId = value;
            }
        });

        /**
         * @description Current state of the term action.
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.status = new CodeableConcept(value);
            }
        });

        /**
         * @description Encounter or Episode with primary association to specified term activity.
         * @property {ContractActionContext|undefined}
        */
        Object.defineProperty(this, 'context', {
            enumerable: true,
            get: () => this.__data.context,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.context = new Reference(value);
            }
        });

        /**
         * @description Id [identifier??] of the clause or question text related to the requester of
    this action in the referenced form or QuestionnaireResponse.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'contextLinkId', {
            enumerable: true,
            get: () => this.__data.contextLinkId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.contextLinkId = value;
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'occurrenceDateTime', {
            enumerable: true,
            get: () => this.__data.occurrenceDateTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let dateTime = require('../simple_types/dateTime.js');
                // eslint-disable-next-line new-cap
                this.__data.occurrenceDateTime = new dateTime(value);
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'occurrencePeriod', {
            enumerable: true,
            get: () => this.__data.occurrencePeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.occurrencePeriod = new Period(value);
            }
        });

        /**
         * @description None
         * @property {Timing|undefined}
        */
        Object.defineProperty(this, 'occurrenceTiming', {
            enumerable: true,
            get: () => this.__data.occurrenceTiming,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Timing = require('../backbone_elements/timing.js');
                this.__data.occurrenceTiming = new Timing(value);
            }
        });

        /**
         * @description Who or what initiated the action and has responsibility for its activation.
         * @property {ContractActionRequester[]|undefined}
        */
        Object.defineProperty(this, 'requester', {
            enumerable: true,
            get: () => this.__data.requester,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.requester = new Reference(value);
            }
        });

        /**
         * @description Id [identifier??] of the clause or question text related to the requester of
    this action in the referenced form or QuestionnaireResponse.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'requesterLinkId', {
            enumerable: true,
            get: () => this.__data.requesterLinkId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.requesterLinkId = value;
            }
        });

        /**
         * @description The type of individual that is desired or required to perform or not perform
    the action.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'performerType', {
            enumerable: true,
            get: () => this.__data.performerType,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.performerType = new CodeableConcept(value);
            }
        });

        /**
         * @description The type of role or competency of an individual desired or required to perform
    or not perform the action.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'performerRole', {
            enumerable: true,
            get: () => this.__data.performerRole,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.performerRole = new CodeableConcept(value);
            }
        });

        /**
         * @description Indicates who or what is being asked to perform (or not perform) the ction.
         * @property {ContractActionPerformer|undefined}
        */
        Object.defineProperty(this, 'performer', {
            enumerable: true,
            get: () => this.__data.performer,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.performer = new Reference(value);
            }
        });

        /**
         * @description Id [identifier??] of the clause or question text related to the reason type or
    reference of this  action in the referenced form or QuestionnaireResponse.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'performerLinkId', {
            enumerable: true,
            get: () => this.__data.performerLinkId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.performerLinkId = value;
            }
        });

        /**
         * @description Rationale for the action to be performed or not performed. Describes why the
    action is permitted or prohibited.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'reasonCode', {
            enumerable: true,
            get: () => this.__data.reasonCode,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.reasonCode = new CodeableConcept(value);
            }
        });

        /**
         * @description Indicates another resource whose existence justifies permitting or not
    permitting this action.
         * @property {ContractActionReasonReference[]|undefined}
        */
        Object.defineProperty(this, 'reasonReference', {
            enumerable: true,
            get: () => this.__data.reasonReference,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.reasonReference = new Reference(value);
            }
        });

        /**
         * @description Describes why the action is to be performed or not performed in textual form.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'reason', {
            enumerable: true,
            get: () => this.__data.reason,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.reason = value;
            }
        });

        /**
         * @description Id [identifier??] of the clause or question text related to the reason type or
    reference of this  action in the referenced form or QuestionnaireResponse.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'reasonLinkId', {
            enumerable: true,
            get: () => this.__data.reasonLinkId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.reasonLinkId = value;
            }
        });

        /**
         * @description Comments made about the term action made by the requester, performer, subject
    or other participants.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            enumerable: true,
            get: () => this.__data.note,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.note = new Annotation(value);
            }
        });

        /**
         * @description Security labels that protects the action.
         * @property {unsignedInt[]|undefined}
        */
        Object.defineProperty(this, 'securityLabelNumber', {
            enumerable: true,
            get: () => this.__data.securityLabelNumber,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let unsignedInt = require('../simple_types/unsignedInt.js');
                // eslint-disable-next-line new-cap
                this.__data.securityLabelNumber = new unsignedInt(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ContractAction',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ContractAction';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            doNotPerform: this.doNotPerform,
            type: this.type && this.type.toJSON(),
            subject: this.subject && this.subject.toJSON(),
            intent: this.intent && this.intent.toJSON(),
            linkId: this.linkId,
            status: this.status && this.status.toJSON(),
            context: this.context && this.context.toJSON(),
            contextLinkId: this.contextLinkId,
            occurrenceDateTime: this.occurrenceDateTime && this.occurrenceDateTime.toJSON(),
            occurrencePeriod: this.occurrencePeriod && this.occurrencePeriod.toJSON(),
            occurrenceTiming: this.occurrenceTiming && this.occurrenceTiming.toJSON(),
            requester: this.requester && this.requester.toJSON(),
            requesterLinkId: this.requesterLinkId,
            performerType: this.performerType && this.performerType.toJSON(),
            performerRole: this.performerRole && this.performerRole.toJSON(),
            performer: this.performer && this.performer.toJSON(),
            performerLinkId: this.performerLinkId,
            reasonCode: this.reasonCode && this.reasonCode.toJSON(),
            reasonReference: this.reasonReference && this.reasonReference.toJSON(),
            reason: this.reason,
            reasonLinkId: this.reasonLinkId,
            note: this.note && this.note.toJSON(),
            securityLabelNumber: this.securityLabelNumber && this.securityLabelNumber.toJSON(),
        };
    }
}

module.exports = ContractAction;
