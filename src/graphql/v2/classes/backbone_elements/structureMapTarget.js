// This file is auto-generated by generate_classes so do not edit manually

/**
StructureMap.Target
    A Map of relationships between 2 structures that can be used to transform
    data.
*/
class StructureMapTarget {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description Type or variable this rule applies to.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'context', {
            enumerable: true,
            get: () => this.__data.context,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.context = new id(value);
            }
        });

        /**
         * @description How to interpret the context.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'contextType', {
            enumerable: true,
            get: () => this.__data.contextType,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.contextType = value;
            }
        });

        /**
         * @description Field to create in the context.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'element', {
            enumerable: true,
            get: () => this.__data.element,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.element = value;
            }
        });

        /**
         * @description Named context for field, if desired, and a field is specified.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'variable', {
            enumerable: true,
            get: () => this.__data.variable,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.variable = new id(value);
            }
        });

        /**
         * @description If field is a list, how to manage the list.
         * @property {code[]|undefined}
        */
        Object.defineProperty(this, 'listMode', {
            enumerable: true,
            get: () => this.__data.listMode,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.listMode = value;
            }
        });

        /**
         * @description Internal rule reference for shared list items.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'listRuleId', {
            enumerable: true,
            get: () => this.__data.listRuleId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.listRuleId = new id(value);
            }
        });

        /**
         * @description How the data is copied / created.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'transform', {
            enumerable: true,
            get: () => this.__data.transform,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.transform = value;
            }
        });

        /**
         * @description Parameters to the transform.
         * @property {StructureMapParameter[]|undefined}
        */
        Object.defineProperty(this, 'parameter', {
            enumerable: true,
            get: () => this.__data.parameter,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let StructureMapParameter = require('../backbone_elements/structureMapParameter.js');
                this.__data.parameter = new StructureMapParameter(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'StructureMapTarget',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'StructureMapTarget';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            context: this.context && this.context.toJSON(),
            contextType: this.contextType && this.contextType.toJSON(),
            element: this.element,
            variable: this.variable && this.variable.toJSON(),
            listMode: this.listMode && this.listMode.toJSON(),
            listRuleId: this.listRuleId && this.listRuleId.toJSON(),
            transform: this.transform && this.transform.toJSON(),
            parameter: this.parameter && this.parameter.toJSON(),
        };
    }
}

module.exports = StructureMapTarget;
