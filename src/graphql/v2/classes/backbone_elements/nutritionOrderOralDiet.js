// This file is auto-generated by generate_classes so do not edit manually

/**
NutritionOrder.OralDiet
    A request to supply a diet, formula feeding (enteral) or oral nutritional
    supplement to a patient/resident.
*/
class NutritionOrderOralDiet {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description The kind of diet or dietary restriction such as fiber restricted diet or
    diabetic diet.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.type = new CodeableConcept(value);
            }
        });

        /**
         * @description The time period and frequency at which the diet should be given.  The diet
    should be given for the combination of all schedules if more than one schedule
    is present.
         * @property {Timing[]|undefined}
        */
        Object.defineProperty(this, 'schedule', {
            enumerable: true,
            get: () => this.__data.schedule,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Timing = require('../backbone_elements/timing.js');
                this.__data.schedule = new Timing(value);
            }
        });

        /**
         * @description Class that defines the quantity and type of nutrient modifications (for
    example carbohydrate, fiber or sodium) required for the oral diet.
         * @property {NutritionOrderNutrient[]|undefined}
        */
        Object.defineProperty(this, 'nutrient', {
            enumerable: true,
            get: () => this.__data.nutrient,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let NutritionOrderNutrient = require('../backbone_elements/nutritionOrderNutrient.js');
                this.__data.nutrient = new NutritionOrderNutrient(value);
            }
        });

        /**
         * @description Class that describes any texture modifications required for the patient to
    safely consume various types of solid foods.
         * @property {NutritionOrderTexture[]|undefined}
        */
        Object.defineProperty(this, 'texture', {
            enumerable: true,
            get: () => this.__data.texture,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let NutritionOrderTexture = require('../backbone_elements/nutritionOrderTexture.js');
                this.__data.texture = new NutritionOrderTexture(value);
            }
        });

        /**
         * @description The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of
    liquids or fluids served to the patient.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'fluidConsistencyType', {
            enumerable: true,
            get: () => this.__data.fluidConsistencyType,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.fluidConsistencyType = new CodeableConcept(value);
            }
        });

        /**
         * @description Free text or additional instructions or information pertaining to the oral
    diet.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'instruction', {
            enumerable: true,
            get: () => this.__data.instruction,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.instruction = value;
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'NutritionOrderOralDiet',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'NutritionOrderOralDiet';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            type: this.type && this.type.toJSON(),
            schedule: this.schedule && this.schedule.toJSON(),
            nutrient: this.nutrient && this.nutrient.toJSON(),
            texture: this.texture && this.texture.toJSON(),
            fluidConsistencyType: this.fluidConsistencyType && this.fluidConsistencyType.toJSON(),
            instruction: this.instruction,
        };
    }
}

module.exports = NutritionOrderOralDiet;
