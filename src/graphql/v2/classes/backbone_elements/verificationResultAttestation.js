// This file is auto-generated by generate_classes so do not edit manually

/**
VerificationResult.Attestation
    Describes validation requirements, source(s), status and dates for one or more
    elements.
*/
class VerificationResultAttestation {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description The individual or organization attesting to information.
         * @property {VerificationResultAttestationWho|undefined}
        */
        Object.defineProperty(this, 'who', {
            enumerable: true,
            get: () => this.__data.who,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.who = new Reference(value);
            }
        });

        /**
         * @description When the who is asserting on behalf of another (organization or individual).
         * @property {VerificationResultAttestationOnBehalfOf|undefined}
        */
        Object.defineProperty(this, 'onBehalfOf', {
            enumerable: true,
            get: () => this.__data.onBehalfOf,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.onBehalfOf = new Reference(value);
            }
        });

        /**
         * @description The method by which attested information was submitted/retrieved (manual; API;
    Push).
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'communicationMethod', {
            enumerable: true,
            get: () => this.__data.communicationMethod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.communicationMethod = new CodeableConcept(value);
            }
        });

        /**
         * @description The date the information was attested to.
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'date', {
            enumerable: true,
            get: () => this.__data.date,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let date = require('../simple_types/date.js');
                // eslint-disable-next-line new-cap
                this.__data.date = new date(value);
            }
        });

        /**
         * @description A digital identity certificate associated with the attestation source.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'sourceIdentityCertificate', {
            enumerable: true,
            get: () => this.__data.sourceIdentityCertificate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.sourceIdentityCertificate = value;
            }
        });

        /**
         * @description A digital identity certificate associated with the proxy entity submitting
    attested information on behalf of the attestation source.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'proxyIdentityCertificate', {
            enumerable: true,
            get: () => this.__data.proxyIdentityCertificate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.proxyIdentityCertificate = value;
            }
        });

        /**
         * @description Signed assertion by the proxy entity indicating that they have the right to
    submit attested information on behalf of the attestation source.
         * @property {Signature|undefined}
        */
        Object.defineProperty(this, 'proxySignature', {
            enumerable: true,
            get: () => this.__data.proxySignature,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Signature = require('../complex_types/signature.js');
                this.__data.proxySignature = new Signature(value);
            }
        });

        /**
         * @description Signed assertion by the attestation source that they have attested to the
    information.
         * @property {Signature|undefined}
        */
        Object.defineProperty(this, 'sourceSignature', {
            enumerable: true,
            get: () => this.__data.sourceSignature,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Signature = require('../complex_types/signature.js');
                this.__data.sourceSignature = new Signature(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'VerificationResultAttestation',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'VerificationResultAttestation';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            who: this.who && this.who.toJSON(),
            onBehalfOf: this.onBehalfOf && this.onBehalfOf.toJSON(),
            communicationMethod: this.communicationMethod && this.communicationMethod.toJSON(),
            date: this.date && this.date.toJSON(),
            sourceIdentityCertificate: this.sourceIdentityCertificate,
            proxyIdentityCertificate: this.proxyIdentityCertificate,
            proxySignature: this.proxySignature && this.proxySignature.toJSON(),
            sourceSignature: this.sourceSignature && this.sourceSignature.toJSON(),
        };
    }
}

module.exports = VerificationResultAttestation;
