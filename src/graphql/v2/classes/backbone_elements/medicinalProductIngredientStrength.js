// This file is auto-generated by generate_classes so do not edit manually

/**
MedicinalProductIngredient.Strength
    An ingredient of a manufactured item or pharmaceutical product.
*/
class MedicinalProductIngredientStrength {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description The quantity of substance in the unit of presentation, or in the volume (or
    mass) of the single pharmaceutical product or manufactured item.
         * @property {Ratio}
        */
        Object.defineProperty(this, 'presentation', {
            enumerable: true,
            get: () => this.__data.presentation,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Ratio = require('../complex_types/ratio.js');
                this.__data.presentation = new Ratio(value);
            }
        });

        /**
         * @description A lower limit for the quantity of substance in the unit of presentation. For
    use when there is a range of strengths, this is the lower limit, with the
    presentation attribute becoming the upper limit.
         * @property {Ratio|undefined}
        */
        Object.defineProperty(this, 'presentationLowLimit', {
            enumerable: true,
            get: () => this.__data.presentationLowLimit,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Ratio = require('../complex_types/ratio.js');
                this.__data.presentationLowLimit = new Ratio(value);
            }
        });

        /**
         * @description The strength per unitary volume (or mass).
         * @property {Ratio|undefined}
        */
        Object.defineProperty(this, 'concentration', {
            enumerable: true,
            get: () => this.__data.concentration,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Ratio = require('../complex_types/ratio.js');
                this.__data.concentration = new Ratio(value);
            }
        });

        /**
         * @description A lower limit for the strength per unitary volume (or mass), for when there is
    a range. The concentration attribute then becomes the upper limit.
         * @property {Ratio|undefined}
        */
        Object.defineProperty(this, 'concentrationLowLimit', {
            enumerable: true,
            get: () => this.__data.concentrationLowLimit,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Ratio = require('../complex_types/ratio.js');
                this.__data.concentrationLowLimit = new Ratio(value);
            }
        });

        /**
         * @description For when strength is measured at a particular point or distance.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'measurementPoint', {
            enumerable: true,
            get: () => this.__data.measurementPoint,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.measurementPoint = value;
            }
        });

        /**
         * @description The country or countries for which the strength range applies.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'country', {
            enumerable: true,
            get: () => this.__data.country,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.country = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description Strength expressed in terms of a reference substance.
         * @property {MedicinalProductIngredientReferenceStrength[]|undefined}
        */
        Object.defineProperty(this, 'referenceStrength', {
            enumerable: true,
            get: () => this.__data.referenceStrength,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let MedicinalProductIngredientReferenceStrength = require('../backbone_elements/medicinalProductIngredientReferenceStrength.js');
                this.__data.referenceStrength = Array.isArray(value) ? value.map(v => new MedicinalProductIngredientReferenceStrength(v)) : [new MedicinalProductIngredientReferenceStrength(value)];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'MedicinalProductIngredientStrength',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'MedicinalProductIngredientStrength';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            presentation: this.presentation && this.presentation.toJSON(),
            presentationLowLimit: this.presentationLowLimit && this.presentationLowLimit.toJSON(),
            concentration: this.concentration && this.concentration.toJSON(),
            concentrationLowLimit: this.concentrationLowLimit && this.concentrationLowLimit.toJSON(),
            measurementPoint: this.measurementPoint,
            country: this.country && this.country.map(v => v.toJSON()),
            referenceStrength: this.referenceStrength && this.referenceStrength.map(v => v.toJSON()),
        };
    }
}

module.exports = MedicinalProductIngredientStrength;
