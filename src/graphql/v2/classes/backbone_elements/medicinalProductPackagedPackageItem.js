// This file is auto-generated by generate_classes so do not edit manually

/**
MedicinalProductPackaged.PackageItem
    A medicinal product in a container or package.
*/
class MedicinalProductPackagedPackageItem {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description Including possibly Data Carrier Identifier.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = new Identifier(value);
            }
        });

        /**
         * @description The physical type of the container of the medicine.
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.type = new CodeableConcept(value);
            }
        });

        /**
         * @description The quantity of this package in the medicinal product, at the current level of
    packaging. The outermost is always 1.
         * @property {Quantity}
        */
        Object.defineProperty(this, 'quantity', {
            enumerable: true,
            get: () => this.__data.quantity,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.quantity = new Quantity(value);
            }
        });

        /**
         * @description Material type of the package item.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'material', {
            enumerable: true,
            get: () => this.__data.material,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.material = new CodeableConcept(value);
            }
        });

        /**
         * @description A possible alternate material for the packaging.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'alternateMaterial', {
            enumerable: true,
            get: () => this.__data.alternateMaterial,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.alternateMaterial = new CodeableConcept(value);
            }
        });

        /**
         * @description A device accompanying a medicinal product.
         * @property {DeviceDefinition[]|undefined}
        */
        Object.defineProperty(this, 'device', {
            enumerable: true,
            get: () => this.__data.device,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.device = new Reference(value);
            }
        });

        /**
         * @description The manufactured item as contained in the packaged medicinal product.
         * @property {MedicinalProductManufactured[]|undefined}
        */
        Object.defineProperty(this, 'manufacturedItem', {
            enumerable: true,
            get: () => this.__data.manufacturedItem,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.manufacturedItem = new Reference(value);
            }
        });

        /**
         * @description Allows containers within containers.
         * @property {MedicinalProductPackagedPackageItem[]|undefined}
        */
        Object.defineProperty(this, 'packageItem', {
            enumerable: true,
            get: () => this.__data.packageItem,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.packageItem = new MedicinalProductPackagedPackageItem(value);
            }
        });

        /**
         * @description Dimensions, color etc.
         * @property {ProdCharacteristic|undefined}
        */
        Object.defineProperty(this, 'physicalCharacteristics', {
            enumerable: true,
            get: () => this.__data.physicalCharacteristics,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ProdCharacteristic = require('../backbone_elements/prodCharacteristic.js');
                this.__data.physicalCharacteristics = new ProdCharacteristic(value);
            }
        });

        /**
         * @description Other codeable characteristics.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'otherCharacteristics', {
            enumerable: true,
            get: () => this.__data.otherCharacteristics,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.otherCharacteristics = new CodeableConcept(value);
            }
        });

        /**
         * @description Shelf Life and storage information.
         * @property {ProductShelfLife[]|undefined}
        */
        Object.defineProperty(this, 'shelfLifeStorage', {
            enumerable: true,
            get: () => this.__data.shelfLifeStorage,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ProductShelfLife = require('../backbone_elements/productShelfLife.js');
                this.__data.shelfLifeStorage = new ProductShelfLife(value);
            }
        });

        /**
         * @description Manufacturer of this Package Item.
         * @property {Organization[]|undefined}
        */
        Object.defineProperty(this, 'manufacturer', {
            enumerable: true,
            get: () => this.__data.manufacturer,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.manufacturer = new Reference(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'MedicinalProductPackagedPackageItem',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'MedicinalProductPackagedPackageItem';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            identifier: this.identifier && this.identifier.toJSON(),
            type: this.type && this.type.toJSON(),
            quantity: this.quantity && this.quantity.toJSON(),
            material: this.material && this.material.toJSON(),
            alternateMaterial: this.alternateMaterial && this.alternateMaterial.toJSON(),
            device: this.device && this.device.toJSON(),
            manufacturedItem: this.manufacturedItem && this.manufacturedItem.toJSON(),
            packageItem: this.packageItem && this.packageItem.toJSON(),
            physicalCharacteristics: this.physicalCharacteristics && this.physicalCharacteristics.toJSON(),
            otherCharacteristics: this.otherCharacteristics && this.otherCharacteristics.toJSON(),
            shelfLifeStorage: this.shelfLifeStorage && this.shelfLifeStorage.toJSON(),
            manufacturer: this.manufacturer && this.manufacturer.toJSON(),
        };
    }
}

module.exports = MedicinalProductPackagedPackageItem;
