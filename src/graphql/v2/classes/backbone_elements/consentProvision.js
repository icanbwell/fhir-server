// This file is auto-generated by generate_classes so do not edit manually

/**
Consent.Provision
    A record of a healthcare consumerâ€™s  choices, which permits or denies
    identified recipient(s) or recipient role(s) to perform one or more actions
    within a given policy context, for specific purposes and periods of time.
*/
class ConsentProvision {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description Action  to take - permit or deny - when the rule conditions are met.  Not
    permitted in root rule, required in all nested rules.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.type = value;
            }
        });

        /**
         * @description The timeframe in this rule is valid.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'period', {
            enumerable: true,
            get: () => this.__data.period,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.period = new Period(value);
            }
        });

        /**
         * @description Who or what is controlled by this rule. Use group to identify a set of actors
    by some property they share (e.g. 'admitting officers').
         * @property {ConsentActor[]|undefined}
        */
        Object.defineProperty(this, 'actor', {
            enumerable: true,
            get: () => this.__data.actor,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ConsentActor = require('../backbone_elements/consentActor.js');
                this.__data.actor = Array.isArray(value) ? value.map(v => new ConsentActor(v)) : [new ConsentActor(value)];
            }
        });

        /**
         * @description Actions controlled by this Rule.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'action', {
            enumerable: true,
            get: () => this.__data.action,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.action = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description A security label, comprised of 0..* security label fields (Privacy tags),
    which define which resources are controlled by this exception.
         * @property {Coding[]|undefined}
        */
        Object.defineProperty(this, 'securityLabel', {
            enumerable: true,
            get: () => this.__data.securityLabel,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.securityLabel = Array.isArray(value) ? value.map(v => new Coding(v)) : [new Coding(value)];
            }
        });

        /**
         * @description The context of the activities a user is taking - why the user is accessing the
    data - that are controlled by this rule.
         * @property {Coding[]|undefined}
        */
        Object.defineProperty(this, 'purpose', {
            enumerable: true,
            get: () => this.__data.purpose,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.purpose = Array.isArray(value) ? value.map(v => new Coding(v)) : [new Coding(value)];
            }
        });

        /**
         * @description The class of information covered by this rule. The type can be a FHIR resource
    type, a profile on a type, or a CDA document, or some other type that
    indicates what sort of information the consent relates to.
         * @property {Coding[]|undefined}
        */
        Object.defineProperty(this, 'class', {
            enumerable: true,
            get: () => this.__data.class,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.class = Array.isArray(value) ? value.map(v => new Coding(v)) : [new Coding(value)];
            }
        });

        /**
         * @description If this code is found in an instance, then the rule applies.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            get: () => this.__data.code,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.code = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description Clinical or Operational Relevant period of time that bounds the data
    controlled by this rule.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'dataPeriod', {
            enumerable: true,
            get: () => this.__data.dataPeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.dataPeriod = new Period(value);
            }
        });

        /**
         * @description The resources controlled by this rule if specific resources are referenced.
         * @property {ConsentData[]|undefined}
        */
        Object.defineProperty(this, 'data', {
            enumerable: true,
            get: () => this.__data.data,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ConsentData = require('../backbone_elements/consentData.js');
                this.__data.data = Array.isArray(value) ? value.map(v => new ConsentData(v)) : [new ConsentData(value)];
            }
        });

        /**
         * @description Rules which provide exceptions to the base rule or subrules.
         * @property {ConsentProvision[]|undefined}
        */
        Object.defineProperty(this, 'provision', {
            enumerable: true,
            get: () => this.__data.provision,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.provision = Array.isArray(value) ? value.map(v => new ConsentProvision(v)) : [new ConsentProvision(value)];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ConsentProvision',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ConsentProvision';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            type: this.type,
            period: this.period && this.period.toJSON(),
            actor: this.actor && this.actor.map(v => v.toJSON()),
            action: this.action && this.action.map(v => v.toJSON()),
            securityLabel: this.securityLabel && this.securityLabel.map(v => v.toJSON()),
            purpose: this.purpose && this.purpose.map(v => v.toJSON()),
            class: this.class && this.class.map(v => v.toJSON()),
            code: this.code && this.code.map(v => v.toJSON()),
            dataPeriod: this.dataPeriod && this.dataPeriod.toJSON(),
            data: this.data && this.data.map(v => v.toJSON()),
            provision: this.provision && this.provision.map(v => v.toJSON()),
        };
    }
}

module.exports = ConsentProvision;
