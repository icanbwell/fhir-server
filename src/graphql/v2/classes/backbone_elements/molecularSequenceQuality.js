// This file is auto-generated by generate_classes so do not edit manually

/**
MolecularSequence.Quality
    Raw data describing a biological sequence.
*/
class MolecularSequenceQuality {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description INDEL / SNP / Undefined variant.
         * @property {code}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.type = value;
            }
        });

        /**
         * @description Gold standard sequence used for comparing against.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'standardSequence', {
            enumerable: true,
            get: () => this.__data.standardSequence,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.standardSequence = new CodeableConcept(value);
            }
        });

        /**
         * @description Start position of the sequence. If the coordinate system is either 0-based or
    1-based, then start position is inclusive.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'start', {
            enumerable: true,
            get: () => this.__data.start,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.start = value;
            }
        });

        /**
         * @description End position of the sequence. If the coordinate system is 0-based then end is
    exclusive and does not include the last position. If the coordinate system is
    1-base, then end is inclusive and includes the last position.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'end', {
            enumerable: true,
            get: () => this.__data.end,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.end = value;
            }
        });

        /**
         * @description The score of an experimentally derived feature such as a p-value ([SO:0001685]
    (http://www.sequenceontology.org/browser/current_svn/term/SO:0001685)).
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'score', {
            enumerable: true,
            get: () => this.__data.score,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.score = new Quantity(value);
            }
        });

        /**
         * @description Which method is used to get sequence quality.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'method', {
            enumerable: true,
            get: () => this.__data.method,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.method = new CodeableConcept(value);
            }
        });

        /**
         * @description True positives, from the perspective of the truth data, i.e. the number of
    sites in the Truth Call Set for which there are paths through the Query Call
    Set that are consistent with all of the alleles at this site, and for which
    there is an accurate genotype call for the event.
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'truthTP', {
            enumerable: true,
            get: () => this.__data.truthTP,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.truthTP = value;
            }
        });

        /**
         * @description True positives, from the perspective of the query data, i.e. the number of
    sites in the Query Call Set for which there are paths through the Truth Call
    Set that are consistent with all of the alleles at this site, and for which
    there is an accurate genotype call for the event.
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'queryTP', {
            enumerable: true,
            get: () => this.__data.queryTP,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.queryTP = value;
            }
        });

        /**
         * @description False negatives, i.e. the number of sites in the Truth Call Set for which
    there is no path through the Query Call Set that is consistent with all of the
    alleles at this site, or sites for which there is an inaccurate genotype call
    for the event. Sites with correct variant but incorrect genotype are counted
    here.
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'truthFN', {
            enumerable: true,
            get: () => this.__data.truthFN,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.truthFN = value;
            }
        });

        /**
         * @description False positives, i.e. the number of sites in the Query Call Set for which
    there is no path through the Truth Call Set that is consistent with this site.
    Sites with correct variant but incorrect genotype are counted here.
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'queryFP', {
            enumerable: true,
            get: () => this.__data.queryFP,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.queryFP = value;
            }
        });

        /**
         * @description The number of false positives where the non-REF alleles in the Truth and Query
    Call Sets match (i.e. cases where the truth is 1/1 and the query is 0/1 or
    similar).
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'gtFP', {
            enumerable: true,
            get: () => this.__data.gtFP,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.gtFP = value;
            }
        });

        /**
         * @description QUERY.TP / (QUERY.TP + QUERY.FP).
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'precision', {
            enumerable: true,
            get: () => this.__data.precision,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.precision = value;
            }
        });

        /**
         * @description TRUTH.TP / (TRUTH.TP + TRUTH.FN).
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'recall', {
            enumerable: true,
            get: () => this.__data.recall,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.recall = value;
            }
        });

        /**
         * @description Harmonic mean of Recall and Precision, computed as: 2 * precision * recall /
    (precision + recall).
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'fScore', {
            enumerable: true,
            get: () => this.__data.fScore,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.fScore = value;
            }
        });

        /**
         * @description Receiver Operator Characteristic (ROC) Curve  to give sensitivity/specificity
    tradeoff.
         * @property {MolecularSequenceRoc|undefined}
        */
        Object.defineProperty(this, 'roc', {
            enumerable: true,
            get: () => this.__data.roc,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let MolecularSequenceRoc = require('../backbone_elements/molecularSequenceRoc.js');
                this.__data.roc = new MolecularSequenceRoc(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'MolecularSequenceQuality',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'MolecularSequenceQuality';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            type: this.type,
            standardSequence: this.standardSequence && this.standardSequence.toJSON(),
            start: this.start,
            end: this.end,
            score: this.score && this.score.toJSON(),
            method: this.method && this.method.toJSON(),
            truthTP: this.truthTP,
            queryTP: this.queryTP,
            truthFN: this.truthFN,
            queryFP: this.queryFP,
            gtFP: this.gtFP,
            precision: this.precision,
            recall: this.recall,
            fScore: this.fScore,
            roc: this.roc && this.roc.toJSON(),
        };
    }
}

module.exports = MolecularSequenceQuality;
