// This file is auto-generated by generate_classes so do not edit manually

/**
DocumentReference.Context
    A reference to a document of any kind for any purpose. Provides metadata about
    the document so that the document can be discovered and managed. The scope of
    a document is any seralized object with a mime-type, so includes formal
    patient centric documents (CDA), cliical notes, scanned paper, and non-patient
    specific documents like policy text.
*/
class DocumentReferenceContext {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description Describes the clinical encounter or type of care that the document content is
    associated with.
         * @property {DocumentReferenceContextEncounter[]|undefined}
        */
        Object.defineProperty(this, 'encounter', {
            enumerable: true,
            get: () => this.__data.encounter,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.encounter = new Reference(value);
            }
        });

        /**
         * @description This list of codes represents the main clinical acts, such as a colonoscopy or
    an appendectomy, being documented. In some cases, the event is inherent in the
    type Code, such as a "History and Physical Report" in which the procedure
    being documented is necessarily a "History and Physical" act.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'event', {
            enumerable: true,
            get: () => this.__data.event,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.event = new CodeableConcept(value);
            }
        });

        /**
         * @description The time period over which the service that is described by the document was
    provided.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'period', {
            enumerable: true,
            get: () => this.__data.period,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.period = new Period(value);
            }
        });

        /**
         * @description The kind of facility where the patient was seen.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'facilityType', {
            enumerable: true,
            get: () => this.__data.facilityType,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.facilityType = new CodeableConcept(value);
            }
        });

        /**
         * @description This property may convey specifics about the practice setting where the
    content was created, often reflecting the clinical specialty.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'practiceSetting', {
            enumerable: true,
            get: () => this.__data.practiceSetting,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.practiceSetting = new CodeableConcept(value);
            }
        });

        /**
         * @description The Patient Information as known when the document was published. May be a
    reference to a version specific, or contained.
         * @property {Patient|undefined}
        */
        Object.defineProperty(this, 'sourcePatientInfo', {
            enumerable: true,
            get: () => this.__data.sourcePatientInfo,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.sourcePatientInfo = new Reference(value);
            }
        });

        /**
         * @description Related identifiers or resources associated with the DocumentReference.
         * @property {Resource[]|undefined}
        */
        Object.defineProperty(this, 'related', {
            enumerable: true,
            get: () => this.__data.related,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.related = new Reference(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'DocumentReferenceContext',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'DocumentReferenceContext';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            encounter: this.encounter && this.encounter.toJSON(),
            event: this.event && this.event.toJSON(),
            period: this.period && this.period.toJSON(),
            facilityType: this.facilityType && this.facilityType.toJSON(),
            practiceSetting: this.practiceSetting && this.practiceSetting.toJSON(),
            sourcePatientInfo: this.sourcePatientInfo && this.sourcePatientInfo.toJSON(),
            related: this.related && this.related.toJSON(),
        };
    }
}

module.exports = DocumentReferenceContext;
