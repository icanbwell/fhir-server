// This file is auto-generated by generate_classes so do not edit manually

/**
StructureMap.Source
    A Map of relationships between 2 structures that can be used to transform
    data.
*/
class StructureMapSource {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description Type or variable this rule applies to.
         * @property {id}
        */
        Object.defineProperty(this, 'context', {
            enumerable: true,
            get: () => this.__data.context,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.context = new id(value);
            }
        });

        /**
         * @description Specified minimum cardinality for the element. This is optional; if present,
    it acts an implicit check on the input content.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'min', {
            enumerable: true,
            get: () => this.__data.min,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.min = value;
            }
        });

        /**
         * @description Specified maximum cardinality for the element - a number or a "*". This is
    optional; if present, it acts an implicit check on the input content (* just
    serves as documentation; it's the default value).
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'max', {
            enumerable: true,
            get: () => this.__data.max,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.max = value;
            }
        });

        /**
         * @description Specified type for the element. This works as a condition on the mapping - use
    for polymorphic elements.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.type = value;
            }
        });

        /**
         * @description None
         * @property {base64Binary|undefined}
        */
        Object.defineProperty(this, 'defaultValueBase64Binary', {
            enumerable: true,
            get: () => this.__data.defaultValueBase64Binary,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let base64Binary = require('../simple_types/base64Binary.js');
                // eslint-disable-next-line new-cap
                this.__data.defaultValueBase64Binary = new base64Binary(value);
            }
        });

        /**
         * @description None
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'defaultValueBoolean', {
            enumerable: true,
            get: () => this.__data.defaultValueBoolean,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueBoolean = value;
            }
        });

        /**
         * @description None
         * @property {canonical|undefined}
        */
        Object.defineProperty(this, 'defaultValueCanonical', {
            enumerable: true,
            get: () => this.__data.defaultValueCanonical,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let canonical = require('../simple_types/canonical.js');
                // eslint-disable-next-line new-cap
                this.__data.defaultValueCanonical = new canonical(value);
            }
        });

        /**
         * @description None
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'defaultValueCode', {
            enumerable: true,
            get: () => this.__data.defaultValueCode,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueCode = value;
            }
        });

        /**
         * @description None
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'defaultValueDate', {
            enumerable: true,
            get: () => this.__data.defaultValueDate,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let date = require('../simple_types/date.js');
                // eslint-disable-next-line new-cap
                this.__data.defaultValueDate = new date(value);
            }
        });

        /**
         * @description None
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'defaultValueDateTime', {
            enumerable: true,
            get: () => this.__data.defaultValueDateTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let dateTime = require('../simple_types/dateTime.js');
                // eslint-disable-next-line new-cap
                this.__data.defaultValueDateTime = new dateTime(value);
            }
        });

        /**
         * @description None
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'defaultValueDecimal', {
            enumerable: true,
            get: () => this.__data.defaultValueDecimal,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let decimal = require('../simple_types/decimal.js');
                // eslint-disable-next-line new-cap
                this.__data.defaultValueDecimal = new decimal(value);
            }
        });

        /**
         * @description None
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'defaultValueId', {
            enumerable: true,
            get: () => this.__data.defaultValueId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.defaultValueId = new id(value);
            }
        });

        /**
         * @description None
         * @property {instant|undefined}
        */
        Object.defineProperty(this, 'defaultValueInstant', {
            enumerable: true,
            get: () => this.__data.defaultValueInstant,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let instant = require('../simple_types/instant.js');
                // eslint-disable-next-line new-cap
                this.__data.defaultValueInstant = new instant(value);
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'defaultValueInteger', {
            enumerable: true,
            get: () => this.__data.defaultValueInteger,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueInteger = value;
            }
        });

        /**
         * @description None
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'defaultValueMarkdown', {
            enumerable: true,
            get: () => this.__data.defaultValueMarkdown,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let markdown = require('../simple_types/markdown.js');
                // eslint-disable-next-line new-cap
                this.__data.defaultValueMarkdown = new markdown(value);
            }
        });

        /**
         * @description None
         * @property {oid|undefined}
        */
        Object.defineProperty(this, 'defaultValueOid', {
            enumerable: true,
            get: () => this.__data.defaultValueOid,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let oid = require('../simple_types/oid.js');
                // eslint-disable-next-line new-cap
                this.__data.defaultValueOid = new oid(value);
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'defaultValuePositiveInt', {
            enumerable: true,
            get: () => this.__data.defaultValuePositiveInt,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValuePositiveInt = value;
            }
        });

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'defaultValueString', {
            enumerable: true,
            get: () => this.__data.defaultValueString,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValueString = value;
            }
        });

        /**
         * @description None
         * @property {time|undefined}
        */
        Object.defineProperty(this, 'defaultValueTime', {
            enumerable: true,
            get: () => this.__data.defaultValueTime,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let time = require('../simple_types/time.js');
                // eslint-disable-next-line new-cap
                this.__data.defaultValueTime = new time(value);
            }
        });

        /**
         * @description None
         * @property {unsignedInt|undefined}
        */
        Object.defineProperty(this, 'defaultValueUnsignedInt', {
            enumerable: true,
            get: () => this.__data.defaultValueUnsignedInt,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let unsignedInt = require('../simple_types/unsignedInt.js');
                // eslint-disable-next-line new-cap
                this.__data.defaultValueUnsignedInt = new unsignedInt(value);
            }
        });

        /**
         * @description None
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'defaultValueUri', {
            enumerable: true,
            get: () => this.__data.defaultValueUri,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.defaultValueUri = new uri(value);
            }
        });

        /**
         * @description None
         * @property {url|undefined}
        */
        Object.defineProperty(this, 'defaultValueUrl', {
            enumerable: true,
            get: () => this.__data.defaultValueUrl,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let url = require('../simple_types/url.js');
                // eslint-disable-next-line new-cap
                this.__data.defaultValueUrl = new url(value);
            }
        });

        /**
         * @description None
         * @property {uuid|undefined}
        */
        Object.defineProperty(this, 'defaultValueUuid', {
            enumerable: true,
            get: () => this.__data.defaultValueUuid,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uuid = require('../simple_types/uuid.js');
                // eslint-disable-next-line new-cap
                this.__data.defaultValueUuid = new uuid(value);
            }
        });

        /**
         * @description None
         * @property {Address|undefined}
        */
        Object.defineProperty(this, 'defaultValueAddress', {
            enumerable: true,
            get: () => this.__data.defaultValueAddress,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Address = require('../complex_types/address.js');
                this.__data.defaultValueAddress = new Address(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'defaultValueAge', {
            enumerable: true,
            get: () => this.__data.defaultValueAge,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.defaultValueAge = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Annotation|undefined}
        */
        Object.defineProperty(this, 'defaultValueAnnotation', {
            enumerable: true,
            get: () => this.__data.defaultValueAnnotation,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.defaultValueAnnotation = new Annotation(value);
            }
        });

        /**
         * @description None
         * @property {Attachment|undefined}
        */
        Object.defineProperty(this, 'defaultValueAttachment', {
            enumerable: true,
            get: () => this.__data.defaultValueAttachment,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Attachment = require('../complex_types/attachment.js');
                this.__data.defaultValueAttachment = new Attachment(value);
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'defaultValueCodeableConcept', {
            enumerable: true,
            get: () => this.__data.defaultValueCodeableConcept,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.defaultValueCodeableConcept = new CodeableConcept(value);
            }
        });

        /**
         * @description None
         * @property {Coding|undefined}
        */
        Object.defineProperty(this, 'defaultValueCoding', {
            enumerable: true,
            get: () => this.__data.defaultValueCoding,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.defaultValueCoding = new Coding(value);
            }
        });

        /**
         * @description None
         * @property {ContactPoint|undefined}
        */
        Object.defineProperty(this, 'defaultValueContactPoint', {
            enumerable: true,
            get: () => this.__data.defaultValueContactPoint,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContactPoint = require('../complex_types/contactPoint.js');
                this.__data.defaultValueContactPoint = new ContactPoint(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'defaultValueCount', {
            enumerable: true,
            get: () => this.__data.defaultValueCount,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.defaultValueCount = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'defaultValueDistance', {
            enumerable: true,
            get: () => this.__data.defaultValueDistance,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.defaultValueDistance = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'defaultValueDuration', {
            enumerable: true,
            get: () => this.__data.defaultValueDuration,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.defaultValueDuration = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {HumanName|undefined}
        */
        Object.defineProperty(this, 'defaultValueHumanName', {
            enumerable: true,
            get: () => this.__data.defaultValueHumanName,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let HumanName = require('../complex_types/humanName.js');
                this.__data.defaultValueHumanName = new HumanName(value);
            }
        });

        /**
         * @description None
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'defaultValueIdentifier', {
            enumerable: true,
            get: () => this.__data.defaultValueIdentifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.defaultValueIdentifier = new Identifier(value);
            }
        });

        /**
         * @description None
         * @property {Money|undefined}
        */
        Object.defineProperty(this, 'defaultValueMoney', {
            enumerable: true,
            get: () => this.__data.defaultValueMoney,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Money = require('../complex_types/money.js');
                this.__data.defaultValueMoney = new Money(value);
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'defaultValuePeriod', {
            enumerable: true,
            get: () => this.__data.defaultValuePeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.defaultValuePeriod = new Period(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'defaultValueQuantity', {
            enumerable: true,
            get: () => this.__data.defaultValueQuantity,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.defaultValueQuantity = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Range|undefined}
        */
        Object.defineProperty(this, 'defaultValueRange', {
            enumerable: true,
            get: () => this.__data.defaultValueRange,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Range = require('../complex_types/range.js');
                this.__data.defaultValueRange = new Range(value);
            }
        });

        /**
         * @description None
         * @property {Ratio|undefined}
        */
        Object.defineProperty(this, 'defaultValueRatio', {
            enumerable: true,
            get: () => this.__data.defaultValueRatio,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Ratio = require('../complex_types/ratio.js');
                this.__data.defaultValueRatio = new Ratio(value);
            }
        });

        /**
         * @description None
         * @property {Resource|undefined}
        */
        Object.defineProperty(this, 'defaultValueReference', {
            enumerable: true,
            get: () => this.__data.defaultValueReference,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.defaultValueReference = new Reference(value);
            }
        });

        /**
         * @description None
         * @property {SampledData|undefined}
        */
        Object.defineProperty(this, 'defaultValueSampledData', {
            enumerable: true,
            get: () => this.__data.defaultValueSampledData,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let SampledData = require('../complex_types/sampledData.js');
                this.__data.defaultValueSampledData = new SampledData(value);
            }
        });

        /**
         * @description None
         * @property {Signature|undefined}
        */
        Object.defineProperty(this, 'defaultValueSignature', {
            enumerable: true,
            get: () => this.__data.defaultValueSignature,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Signature = require('../complex_types/signature.js');
                this.__data.defaultValueSignature = new Signature(value);
            }
        });

        /**
         * @description None
         * @property {Timing|undefined}
        */
        Object.defineProperty(this, 'defaultValueTiming', {
            enumerable: true,
            get: () => this.__data.defaultValueTiming,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Timing = require('../backbone_elements/timing.js');
                this.__data.defaultValueTiming = new Timing(value);
            }
        });

        /**
         * @description None
         * @property {ContactDetail|undefined}
        */
        Object.defineProperty(this, 'defaultValueContactDetail', {
            enumerable: true,
            get: () => this.__data.defaultValueContactDetail,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContactDetail = require('../complex_types/contactDetail.js');
                this.__data.defaultValueContactDetail = new ContactDetail(value);
            }
        });

        /**
         * @description None
         * @property {Contributor|undefined}
        */
        Object.defineProperty(this, 'defaultValueContributor', {
            enumerable: true,
            get: () => this.__data.defaultValueContributor,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Contributor = require('../complex_types/contributor.js');
                this.__data.defaultValueContributor = new Contributor(value);
            }
        });

        /**
         * @description None
         * @property {DataRequirement|undefined}
        */
        Object.defineProperty(this, 'defaultValueDataRequirement', {
            enumerable: true,
            get: () => this.__data.defaultValueDataRequirement,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let DataRequirement = require('../complex_types/dataRequirement.js');
                this.__data.defaultValueDataRequirement = new DataRequirement(value);
            }
        });

        /**
         * @description None
         * @property {Expression|undefined}
        */
        Object.defineProperty(this, 'defaultValueExpression', {
            enumerable: true,
            get: () => this.__data.defaultValueExpression,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Expression = require('../complex_types/expression.js');
                this.__data.defaultValueExpression = new Expression(value);
            }
        });

        /**
         * @description None
         * @property {ParameterDefinition|undefined}
        */
        Object.defineProperty(this, 'defaultValueParameterDefinition', {
            enumerable: true,
            get: () => this.__data.defaultValueParameterDefinition,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ParameterDefinition = require('../complex_types/parameterDefinition.js');
                this.__data.defaultValueParameterDefinition = new ParameterDefinition(value);
            }
        });

        /**
         * @description None
         * @property {RelatedArtifact|undefined}
        */
        Object.defineProperty(this, 'defaultValueRelatedArtifact', {
            enumerable: true,
            get: () => this.__data.defaultValueRelatedArtifact,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let RelatedArtifact = require('../complex_types/relatedArtifact.js');
                this.__data.defaultValueRelatedArtifact = new RelatedArtifact(value);
            }
        });

        /**
         * @description None
         * @property {TriggerDefinition|undefined}
        */
        Object.defineProperty(this, 'defaultValueTriggerDefinition', {
            enumerable: true,
            get: () => this.__data.defaultValueTriggerDefinition,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let TriggerDefinition = require('../complex_types/triggerDefinition.js');
                this.__data.defaultValueTriggerDefinition = new TriggerDefinition(value);
            }
        });

        /**
         * @description None
         * @property {UsageContext|undefined}
        */
        Object.defineProperty(this, 'defaultValueUsageContext', {
            enumerable: true,
            get: () => this.__data.defaultValueUsageContext,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let UsageContext = require('../complex_types/usageContext.js');
                this.__data.defaultValueUsageContext = new UsageContext(value);
            }
        });

        /**
         * @description None
         * @property {Dosage|undefined}
        */
        Object.defineProperty(this, 'defaultValueDosage', {
            enumerable: true,
            get: () => this.__data.defaultValueDosage,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Dosage = require('../backbone_elements/dosage.js');
                this.__data.defaultValueDosage = new Dosage(value);
            }
        });

        /**
         * @description None
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'defaultValueMeta', {
            enumerable: true,
            get: () => this.__data.defaultValueMeta,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.defaultValueMeta = new Meta(value);
            }
        });

        /**
         * @description Optional field for this source.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'element', {
            enumerable: true,
            get: () => this.__data.element,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.element = value;
            }
        });

        /**
         * @description How to handle the list mode for this element.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'listMode', {
            enumerable: true,
            get: () => this.__data.listMode,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.listMode = value;
            }
        });

        /**
         * @description Named context for field, if a field is specified.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'variable', {
            enumerable: true,
            get: () => this.__data.variable,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.variable = new id(value);
            }
        });

        /**
         * @description FHIRPath expression  - must be true or the rule does not apply.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'condition', {
            enumerable: true,
            get: () => this.__data.condition,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.condition = value;
            }
        });

        /**
         * @description FHIRPath expression  - must be true or the mapping engine throws an error
    instead of completing.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'check', {
            enumerable: true,
            get: () => this.__data.check,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.check = value;
            }
        });

        /**
         * @description A FHIRPath expression which specifies a message to put in the transform log
    when content matching the source rule is found.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'logMessage', {
            enumerable: true,
            get: () => this.__data.logMessage,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.logMessage = value;
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'StructureMapSource',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'StructureMapSource';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            context: this.context && this.context.toJSON(),
            min: this.min,
            max: this.max,
            type: this.type,
            defaultValueBase64Binary: this.defaultValueBase64Binary && this.defaultValueBase64Binary.toJSON(),
            defaultValueBoolean: this.defaultValueBoolean,
            defaultValueCanonical: this.defaultValueCanonical && this.defaultValueCanonical.toJSON(),
            defaultValueCode: this.defaultValueCode && this.defaultValueCode.toJSON(),
            defaultValueDate: this.defaultValueDate && this.defaultValueDate.toJSON(),
            defaultValueDateTime: this.defaultValueDateTime && this.defaultValueDateTime.toJSON(),
            defaultValueDecimal: this.defaultValueDecimal && this.defaultValueDecimal.toJSON(),
            defaultValueId: this.defaultValueId && this.defaultValueId.toJSON(),
            defaultValueInstant: this.defaultValueInstant && this.defaultValueInstant.toJSON(),
            defaultValueInteger: this.defaultValueInteger,
            defaultValueMarkdown: this.defaultValueMarkdown && this.defaultValueMarkdown.toJSON(),
            defaultValueOid: this.defaultValueOid && this.defaultValueOid.toJSON(),
            defaultValuePositiveInt: this.defaultValuePositiveInt,
            defaultValueString: this.defaultValueString,
            defaultValueTime: this.defaultValueTime && this.defaultValueTime.toJSON(),
            defaultValueUnsignedInt: this.defaultValueUnsignedInt && this.defaultValueUnsignedInt.toJSON(),
            defaultValueUri: this.defaultValueUri && this.defaultValueUri.toJSON(),
            defaultValueUrl: this.defaultValueUrl && this.defaultValueUrl.toJSON(),
            defaultValueUuid: this.defaultValueUuid && this.defaultValueUuid.toJSON(),
            defaultValueAddress: this.defaultValueAddress && this.defaultValueAddress.toJSON(),
            defaultValueAge: this.defaultValueAge && this.defaultValueAge.toJSON(),
            defaultValueAnnotation: this.defaultValueAnnotation && this.defaultValueAnnotation.toJSON(),
            defaultValueAttachment: this.defaultValueAttachment && this.defaultValueAttachment.toJSON(),
            defaultValueCodeableConcept: this.defaultValueCodeableConcept && this.defaultValueCodeableConcept.toJSON(),
            defaultValueCoding: this.defaultValueCoding && this.defaultValueCoding.toJSON(),
            defaultValueContactPoint: this.defaultValueContactPoint && this.defaultValueContactPoint.toJSON(),
            defaultValueCount: this.defaultValueCount && this.defaultValueCount.toJSON(),
            defaultValueDistance: this.defaultValueDistance && this.defaultValueDistance.toJSON(),
            defaultValueDuration: this.defaultValueDuration && this.defaultValueDuration.toJSON(),
            defaultValueHumanName: this.defaultValueHumanName && this.defaultValueHumanName.toJSON(),
            defaultValueIdentifier: this.defaultValueIdentifier && this.defaultValueIdentifier.toJSON(),
            defaultValueMoney: this.defaultValueMoney && this.defaultValueMoney.toJSON(),
            defaultValuePeriod: this.defaultValuePeriod && this.defaultValuePeriod.toJSON(),
            defaultValueQuantity: this.defaultValueQuantity && this.defaultValueQuantity.toJSON(),
            defaultValueRange: this.defaultValueRange && this.defaultValueRange.toJSON(),
            defaultValueRatio: this.defaultValueRatio && this.defaultValueRatio.toJSON(),
            defaultValueReference: this.defaultValueReference && this.defaultValueReference.toJSON(),
            defaultValueSampledData: this.defaultValueSampledData && this.defaultValueSampledData.toJSON(),
            defaultValueSignature: this.defaultValueSignature && this.defaultValueSignature.toJSON(),
            defaultValueTiming: this.defaultValueTiming && this.defaultValueTiming.toJSON(),
            defaultValueContactDetail: this.defaultValueContactDetail && this.defaultValueContactDetail.toJSON(),
            defaultValueContributor: this.defaultValueContributor && this.defaultValueContributor.toJSON(),
            defaultValueDataRequirement: this.defaultValueDataRequirement && this.defaultValueDataRequirement.toJSON(),
            defaultValueExpression: this.defaultValueExpression && this.defaultValueExpression.toJSON(),
            defaultValueParameterDefinition: this.defaultValueParameterDefinition && this.defaultValueParameterDefinition.toJSON(),
            defaultValueRelatedArtifact: this.defaultValueRelatedArtifact && this.defaultValueRelatedArtifact.toJSON(),
            defaultValueTriggerDefinition: this.defaultValueTriggerDefinition && this.defaultValueTriggerDefinition.toJSON(),
            defaultValueUsageContext: this.defaultValueUsageContext && this.defaultValueUsageContext.toJSON(),
            defaultValueDosage: this.defaultValueDosage && this.defaultValueDosage.toJSON(),
            defaultValueMeta: this.defaultValueMeta && this.defaultValueMeta.toJSON(),
            element: this.element,
            listMode: this.listMode && this.listMode.toJSON(),
            variable: this.variable && this.variable.toJSON(),
            condition: this.condition,
            check: this.check,
            logMessage: this.logMessage,
        };
    }
}

module.exports = StructureMapSource;
