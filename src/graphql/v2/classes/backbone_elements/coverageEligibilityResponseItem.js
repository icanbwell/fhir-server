// This file is auto-generated by generate_classes so do not edit manually

/**
CoverageEligibilityResponse.Item
    This resource provides eligibility and plan details from the processing of an
    CoverageEligibilityRequest resource.
*/
class CoverageEligibilityResponseItem {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description Code to identify the general type of benefits under which products and
    services are provided.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'category', {
            enumerable: true,
            get: () => this.__data.category,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.category = new CodeableConcept(value);
            }
        });

        /**
         * @description This contains the product, service, drug or other billing code for the item.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'productOrService', {
            enumerable: true,
            get: () => this.__data.productOrService,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.productOrService = new CodeableConcept(value);
            }
        });

        /**
         * @description Item typification or modifiers codes to convey additional context for the
    product or service.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'modifier', {
            enumerable: true,
            get: () => this.__data.modifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.modifier = new CodeableConcept(value);
            }
        });

        /**
         * @description The practitioner who is eligible for the provision of the product or service.
         * @property {CoverageEligibilityResponseItemProvider|undefined}
        */
        Object.defineProperty(this, 'provider', {
            enumerable: true,
            get: () => this.__data.provider,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.provider = new Reference(value);
            }
        });

        /**
         * @description True if the indicated class of service is excluded from the plan, missing or
    False indicates the product or service is included in the coverage.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'excluded', {
            enumerable: true,
            get: () => this.__data.excluded,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.excluded = value;
            }
        });

        /**
         * @description A short name or tag for the benefit.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'name', {
            enumerable: true,
            get: () => this.__data.name,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.name = value;
            }
        });

        /**
         * @description A richer description of the benefit or services covered.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.description = value;
            }
        });

        /**
         * @description Is a flag to indicate whether the benefits refer to in-network providers or
    out-of-network providers.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'network', {
            enumerable: true,
            get: () => this.__data.network,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.network = new CodeableConcept(value);
            }
        });

        /**
         * @description Indicates if the benefits apply to an individual or to the family.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'unit', {
            enumerable: true,
            get: () => this.__data.unit,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.unit = new CodeableConcept(value);
            }
        });

        /**
         * @description The term or period of the values such as 'maximum lifetime benefit' or
    'maximum annual visits'.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'term', {
            enumerable: true,
            get: () => this.__data.term,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.term = new CodeableConcept(value);
            }
        });

        /**
         * @description Benefits used to date.
         * @property {CoverageEligibilityResponseBenefit[]|undefined}
        */
        Object.defineProperty(this, 'benefit', {
            enumerable: true,
            get: () => this.__data.benefit,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CoverageEligibilityResponseBenefit = require('../backbone_elements/coverageEligibilityResponseBenefit.js');
                this.__data.benefit = new CoverageEligibilityResponseBenefit(value);
            }
        });

        /**
         * @description A boolean flag indicating whether a preauthorization is required prior to
    actual service delivery.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'authorizationRequired', {
            enumerable: true,
            get: () => this.__data.authorizationRequired,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.authorizationRequired = value;
            }
        });

        /**
         * @description Codes or comments regarding information or actions associated with the
    preauthorization.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'authorizationSupporting', {
            enumerable: true,
            get: () => this.__data.authorizationSupporting,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.authorizationSupporting = new CodeableConcept(value);
            }
        });

        /**
         * @description A web location for obtaining requirements or descriptive information regarding
    the preauthorization.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'authorizationUrl', {
            enumerable: true,
            get: () => this.__data.authorizationUrl,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.authorizationUrl = new uri(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'CoverageEligibilityResponseItem',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'CoverageEligibilityResponseItem';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            category: this.category && this.category.toJSON(),
            productOrService: this.productOrService && this.productOrService.toJSON(),
            modifier: this.modifier && this.modifier.toJSON(),
            provider: this.provider && this.provider.toJSON(),
            excluded: this.excluded,
            name: this.name,
            description: this.description,
            network: this.network && this.network.toJSON(),
            unit: this.unit && this.unit.toJSON(),
            term: this.term && this.term.toJSON(),
            benefit: this.benefit && this.benefit.toJSON(),
            authorizationRequired: this.authorizationRequired,
            authorizationSupporting: this.authorizationSupporting && this.authorizationSupporting.toJSON(),
            authorizationUrl: this.authorizationUrl && this.authorizationUrl.toJSON(),
        };
    }
}

module.exports = CoverageEligibilityResponseItem;
