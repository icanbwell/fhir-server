// This file is auto-generated by generate_classes so do not edit manually

/**
MolecularSequence.Roc
    Raw data describing a biological sequence.
*/
class MolecularSequenceRoc {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description Invidual data point representing the GQ (genotype quality) score threshold.
         * @property {Int[]|undefined}
        */
        Object.defineProperty(this, 'score', {
            enumerable: true,
            get: () => this.__data.score,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.score = value;
            }
        });

        /**
         * @description The number of true positives if the GQ score threshold was set to "score"
    field value.
         * @property {Int[]|undefined}
        */
        Object.defineProperty(this, 'numTP', {
            enumerable: true,
            get: () => this.__data.numTP,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.numTP = value;
            }
        });

        /**
         * @description The number of false positives if the GQ score threshold was set to "score"
    field value.
         * @property {Int[]|undefined}
        */
        Object.defineProperty(this, 'numFP', {
            enumerable: true,
            get: () => this.__data.numFP,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.numFP = value;
            }
        });

        /**
         * @description The number of false negatives if the GQ score threshold was set to "score"
    field value.
         * @property {Int[]|undefined}
        */
        Object.defineProperty(this, 'numFN', {
            enumerable: true,
            get: () => this.__data.numFN,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.numFN = value;
            }
        });

        /**
         * @description Calculated precision if the GQ score threshold was set to "score" field value.
         * @property {decimal[]|undefined}
        */
        Object.defineProperty(this, 'precision', {
            enumerable: true,
            get: () => this.__data.precision,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let decimal = require('../simple_types/decimal.js');
                // eslint-disable-next-line new-cap
                this.__data.precision = new decimal(value);
            }
        });

        /**
         * @description Calculated sensitivity if the GQ score threshold was set to "score" field
    value.
         * @property {decimal[]|undefined}
        */
        Object.defineProperty(this, 'sensitivity', {
            enumerable: true,
            get: () => this.__data.sensitivity,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let decimal = require('../simple_types/decimal.js');
                // eslint-disable-next-line new-cap
                this.__data.sensitivity = new decimal(value);
            }
        });

        /**
         * @description Calculated fScore if the GQ score threshold was set to "score" field value.
         * @property {decimal[]|undefined}
        */
        Object.defineProperty(this, 'fMeasure', {
            enumerable: true,
            get: () => this.__data.fMeasure,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let decimal = require('../simple_types/decimal.js');
                // eslint-disable-next-line new-cap
                this.__data.fMeasure = new decimal(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'MolecularSequenceRoc',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'MolecularSequenceRoc';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            score: this.score,
            numTP: this.numTP,
            numFP: this.numFP,
            numFN: this.numFN,
            precision: this.precision && this.precision.toJSON(),
            sensitivity: this.sensitivity && this.sensitivity.toJSON(),
            fMeasure: this.fMeasure && this.fMeasure.toJSON(),
        };
    }
}

module.exports = MolecularSequenceRoc;
