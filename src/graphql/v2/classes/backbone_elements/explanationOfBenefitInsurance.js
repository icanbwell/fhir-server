// This file is auto-generated by generate_classes so do not edit manually

/**
ExplanationOfBenefit.Insurance
    This resource provides: the claim details; adjudication details from the
    processing of a Claim; and optionally account balance information, for
    informing the subscriber of the benefits provided.
*/
class ExplanationOfBenefitInsurance {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description A flag to indicate that this Coverage is to be used for adjudication of this
    claim when set to true.
         * @property {Boolean}
        */
        Object.defineProperty(this, 'focal', {
            enumerable: true,
            get: () => this.__data.focal,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.focal = value;
            }
        });

        /**
         * @description Reference to the insurance card level information contained in the Coverage
    resource. The coverage issuing insurer will use these details to locate the
    patient's actual coverage within the insurer's information system.
         * @property {Coverage}
        */
        Object.defineProperty(this, 'coverage', {
            enumerable: true,
            get: () => this.__data.coverage,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.coverage = new Reference(value);
            }
        });

        /**
         * @description Reference numbers previously provided by the insurer to the provider to be
    quoted on subsequent claims containing services or products related to the
    prior authorization.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'preAuthRef', {
            enumerable: true,
            get: () => this.__data.preAuthRef,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.preAuthRef = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ExplanationOfBenefitInsurance',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ExplanationOfBenefitInsurance';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            focal: this.focal,
            coverage: this.coverage && this.coverage.toJSON(),
            preAuthRef: this.preAuthRef,
        };
    }
}

module.exports = ExplanationOfBenefitInsurance;
