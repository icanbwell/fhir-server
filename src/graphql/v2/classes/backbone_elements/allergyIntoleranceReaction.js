// This file is auto-generated by generate_classes so do not edit manually

/**
AllergyIntolerance.Reaction
    Risk of harmful or undesirable, physiological response which is unique to an
    individual and associated with exposure to a substance.
*/
class AllergyIntoleranceReaction {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description Identification of the specific substance (or pharmaceutical product)
    considered to be responsible for the Adverse Reaction event. Note: the
    substance for a specific reaction may be different from the substance
    identified as the cause of the risk, but it must be consistent with it. For
    instance, it may be a more specific substance (e.g. a brand medication) or a
    composite product that includes the identified substance. It must be
    clinically safe to only process the 'code' and ignore the
    'reaction.substance'.  If a receiving system is unable to confirm that
    AllergyIntolerance.reaction.substance falls within the semantic scope of
    AllergyIntolerance.code, then the receiving system should ignore
    AllergyIntolerance.reaction.substance.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'substance', {
            enumerable: true,
            get: () => this.__data.substance,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.substance = new CodeableConcept(value);
            }
        });

        /**
         * @description Clinical symptoms and/or signs that are observed or associated with the
    adverse reaction event.
         * @property {CodeableConcept[]}
        */
        Object.defineProperty(this, 'manifestation', {
            enumerable: true,
            get: () => this.__data.manifestation,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.manifestation = new CodeableConcept(value);
            }
        });

        /**
         * @description Text description about the reaction as a whole, including details of the
    manifestation if required.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.description = value;
            }
        });

        /**
         * @description Record of the date and/or time of the onset of the Reaction.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'onset', {
            enumerable: true,
            get: () => this.__data.onset,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let dateTime = require('../simple_types/dateTime.js');
                // eslint-disable-next-line new-cap
                this.__data.onset = new dateTime(value);
            }
        });

        /**
         * @description Clinical assessment of the severity of the reaction event as a whole,
    potentially considering multiple different manifestations.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'severity', {
            enumerable: true,
            get: () => this.__data.severity,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.severity = value;
            }
        });

        /**
         * @description Identification of the route by which the subject was exposed to the substance.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'exposureRoute', {
            enumerable: true,
            get: () => this.__data.exposureRoute,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.exposureRoute = new CodeableConcept(value);
            }
        });

        /**
         * @description Additional text about the adverse reaction event not captured in other fields.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            enumerable: true,
            get: () => this.__data.note,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.note = new Annotation(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'AllergyIntoleranceReaction',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'AllergyIntoleranceReaction';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            substance: this.substance && this.substance.toJSON(),
            manifestation: this.manifestation && this.manifestation.toJSON(),
            description: this.description,
            onset: this.onset && this.onset.toJSON(),
            severity: this.severity && this.severity.toJSON(),
            exposureRoute: this.exposureRoute && this.exposureRoute.toJSON(),
            note: this.note && this.note.toJSON(),
        };
    }
}

module.exports = AllergyIntoleranceReaction;
