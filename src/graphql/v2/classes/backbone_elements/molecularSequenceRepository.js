// This file is auto-generated by generate_classes so do not edit manually

/**
MolecularSequence.Repository
    Raw data describing a biological sequence.
*/
class MolecularSequenceRepository {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description Click and see / RESTful API / Need login to see / RESTful API with
    authentication / Other ways to see resource.
         * @property {code}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.type = value;
            }
        });

        /**
         * @description URI of an external repository which contains further details about the
    genetics data.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'url', {
            enumerable: true,
            get: () => this.__data.url,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.url = new uri(value);
            }
        });

        /**
         * @description URI of an external repository which contains further details about the
    genetics data.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'name', {
            enumerable: true,
            get: () => this.__data.name,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.name = value;
            }
        });

        /**
         * @description Id of the variant in this external repository. The server will understand how
    to use this id to call for more info about datasets in external repository.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'datasetId', {
            enumerable: true,
            get: () => this.__data.datasetId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.datasetId = value;
            }
        });

        /**
         * @description Id of the variantset in this external repository. The server will understand
    how to use this id to call for more info about variantsets in external
    repository.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'variantsetId', {
            enumerable: true,
            get: () => this.__data.variantsetId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.variantsetId = value;
            }
        });

        /**
         * @description Id of the read in this external repository.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'readsetId', {
            enumerable: true,
            get: () => this.__data.readsetId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.readsetId = value;
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'MolecularSequenceRepository',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'MolecularSequenceRepository';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            type: this.type && this.type.toJSON(),
            url: this.url && this.url.toJSON(),
            name: this.name,
            datasetId: this.datasetId,
            variantsetId: this.variantsetId,
            readsetId: this.readsetId,
        };
    }
}

module.exports = MolecularSequenceRepository;
