// This file is auto-generated by generate_classes so do not edit manually

/**
CapabilityStatement.Messaging
    A Capability Statement documents a set of capabilities (behaviors) of a FHIR
    Server for a particular version of FHIR that may be used as a statement of
    actual server functionality or a statement of required or desired server
    implementation.
*/
class CapabilityStatementMessaging {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description An endpoint (network accessible address) to which messages and/or replies are
    to be sent.
         * @property {CapabilityStatementEndpoint[]|undefined}
        */
        Object.defineProperty(this, 'endpoint', {
            enumerable: true,
            get: () => this.__data.endpoint,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CapabilityStatementEndpoint = require('../backbone_elements/capabilityStatementEndpoint.js');
                this.__data.endpoint = new CapabilityStatementEndpoint(value);
            }
        });

        /**
         * @description Length if the receiver's reliable messaging cache in minutes (if a receiver)
    or how long the cache length on the receiver should be (if a sender).
         * @property {unsignedInt|undefined}
        */
        Object.defineProperty(this, 'reliableCache', {
            enumerable: true,
            get: () => this.__data.reliableCache,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let unsignedInt = require('../simple_types/unsignedInt.js');
                // eslint-disable-next-line new-cap
                this.__data.reliableCache = new unsignedInt(value);
            }
        });

        /**
         * @description Documentation about the system's messaging capabilities for this endpoint not
    otherwise documented by the capability statement.  For example, the process
    for becoming an authorized messaging exchange partner.
         * @property {markdown|undefined}
        */
        Object.defineProperty(this, 'documentation', {
            enumerable: true,
            get: () => this.__data.documentation,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let markdown = require('../simple_types/markdown.js');
                // eslint-disable-next-line new-cap
                this.__data.documentation = new markdown(value);
            }
        });

        /**
         * @description References to message definitions for messages this system can send or
    receive.
         * @property {CapabilityStatementSupportedMessage[]|undefined}
        */
        Object.defineProperty(this, 'supportedMessage', {
            enumerable: true,
            get: () => this.__data.supportedMessage,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CapabilityStatementSupportedMessage = require('../backbone_elements/capabilityStatementSupportedMessage.js');
                this.__data.supportedMessage = new CapabilityStatementSupportedMessage(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'CapabilityStatementMessaging',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'CapabilityStatementMessaging';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            endpoint: this.endpoint && this.endpoint.toJSON(),
            reliableCache: this.reliableCache && this.reliableCache.toJSON(),
            documentation: this.documentation && this.documentation.toJSON(),
            supportedMessage: this.supportedMessage && this.supportedMessage.toJSON(),
        };
    }
}

module.exports = CapabilityStatementMessaging;
