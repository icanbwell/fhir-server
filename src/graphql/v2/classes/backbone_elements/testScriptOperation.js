// This file is auto-generated by generate_classes so do not edit manually

/**
TestScript.Operation
    A structured set of tests against a FHIR server or client implementation to
    determine compliance against the FHIR specification.
*/
class TestScriptOperation {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description Server interaction or operation type.
         * @property {Coding|undefined}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.type = new Coding(value);
            }
        });

        /**
         * @description The type of the resource.  See http://build.fhir.org/resourcelist.html.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'resource', {
            enumerable: true,
            get: () => this.__data.resource,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.resource = value;
            }
        });

        /**
         * @description The label would be used for tracking/logging purposes by test engines.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'label', {
            enumerable: true,
            get: () => this.__data.label,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.label = value;
            }
        });

        /**
         * @description The description would be used by test engines for tracking and reporting
    purposes.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.description = value;
            }
        });

        /**
         * @description The mime-type to use for RESTful operation in the 'Accept' header.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'accept', {
            enumerable: true,
            get: () => this.__data.accept,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.accept = value;
            }
        });

        /**
         * @description The mime-type to use for RESTful operation in the 'Content-Type' header.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'contentType', {
            enumerable: true,
            get: () => this.__data.contentType,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.contentType = value;
            }
        });

        /**
         * @description The server where the request message is destined for.  Must be one of the
    server numbers listed in TestScript.destination section.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'destination', {
            enumerable: true,
            get: () => this.__data.destination,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.destination = value;
            }
        });

        /**
         * @description Whether or not to implicitly send the request url in encoded format. The
    default is true to match the standard RESTful client behavior. Set to false
    when communicating with a server that does not support encoded url paths.
         * @property {Boolean}
        */
        Object.defineProperty(this, 'encodeRequestUrl', {
            enumerable: true,
            get: () => this.__data.encodeRequestUrl,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.encodeRequestUrl = value;
            }
        });

        /**
         * @description The HTTP method the test engine MUST use for this operation regardless of any
    other operation details.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'method', {
            enumerable: true,
            get: () => this.__data.method,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.method = value;
            }
        });

        /**
         * @description The server where the request message originates from.  Must be one of the
    server numbers listed in TestScript.origin section.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'origin', {
            enumerable: true,
            get: () => this.__data.origin,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.origin = value;
            }
        });

        /**
         * @description Path plus parameters after [type].  Used to set parts of the request URL
    explicitly.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'params', {
            enumerable: true,
            get: () => this.__data.params,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.params = value;
            }
        });

        /**
         * @description Header elements would be used to set HTTP headers.
         * @property {TestScriptRequestHeader[]|undefined}
        */
        Object.defineProperty(this, 'requestHeader', {
            enumerable: true,
            get: () => this.__data.requestHeader,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let TestScriptRequestHeader = require('../backbone_elements/testScriptRequestHeader.js');
                this.__data.requestHeader = new TestScriptRequestHeader(value);
            }
        });

        /**
         * @description The fixture id (maybe new) to map to the request.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'requestId', {
            enumerable: true,
            get: () => this.__data.requestId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.requestId = new id(value);
            }
        });

        /**
         * @description The fixture id (maybe new) to map to the response.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'responseId', {
            enumerable: true,
            get: () => this.__data.responseId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.responseId = new id(value);
            }
        });

        /**
         * @description The id of the fixture used as the body of a PUT or POST request.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'sourceId', {
            enumerable: true,
            get: () => this.__data.sourceId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.sourceId = new id(value);
            }
        });

        /**
         * @description Id of fixture used for extracting the [id],  [type], and [vid] for GET
    requests.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'targetId', {
            enumerable: true,
            get: () => this.__data.targetId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.targetId = new id(value);
            }
        });

        /**
         * @description Complete request URL.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'url', {
            enumerable: true,
            get: () => this.__data.url,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.url = value;
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'TestScriptOperation',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'TestScriptOperation';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            type: this.type && this.type.toJSON(),
            resource: this.resource && this.resource.toJSON(),
            label: this.label,
            description: this.description,
            accept: this.accept && this.accept.toJSON(),
            contentType: this.contentType && this.contentType.toJSON(),
            destination: this.destination,
            encodeRequestUrl: this.encodeRequestUrl,
            method: this.method && this.method.toJSON(),
            origin: this.origin,
            params: this.params,
            requestHeader: this.requestHeader && this.requestHeader.toJSON(),
            requestId: this.requestId && this.requestId.toJSON(),
            responseId: this.responseId && this.responseId.toJSON(),
            sourceId: this.sourceId && this.sourceId.toJSON(),
            targetId: this.targetId && this.targetId.toJSON(),
            url: this.url,
        };
    }
}

module.exports = TestScriptOperation;
