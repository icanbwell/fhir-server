// This file is auto-generated by generate_classes so do not edit manually

/**
Contract.Term
    Legally enforceable, formally recorded unilateral or bilateral directive i.e.,
    a policy or agreement.
*/
class ContractTerm {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description Unique identifier for this particular Contract Provision.
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = new Identifier(value);
            }
        });

        /**
         * @description When this Contract Provision was issued.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'issued', {
            enumerable: true,
            get: () => this.__data.issued,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let dateTime = require('../simple_types/dateTime.js');
                // eslint-disable-next-line new-cap
                this.__data.issued = new dateTime(value);
            }
        });

        /**
         * @description Relevant time or time-period when this Contract Provision is applicable.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'applies', {
            enumerable: true,
            get: () => this.__data.applies,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.applies = new Period(value);
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'topicCodeableConcept', {
            enumerable: true,
            get: () => this.__data.topicCodeableConcept,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.topicCodeableConcept = new CodeableConcept(value);
            }
        });

        /**
         * @description None
         * @property {Resource|undefined}
        */
        Object.defineProperty(this, 'topicReference', {
            enumerable: true,
            get: () => this.__data.topicReference,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.topicReference = new Reference(value);
            }
        });

        /**
         * @description A legal clause or condition contained within a contract that requires one or
    both parties to perform a particular requirement by some specified time or
    prevents one or both parties from performing a particular requirement by some
    specified time.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.type = new CodeableConcept(value);
            }
        });

        /**
         * @description A specialized legal clause or condition based on overarching contract type.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'subType', {
            enumerable: true,
            get: () => this.__data.subType,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.subType = new CodeableConcept(value);
            }
        });

        /**
         * @description Statement of a provision in a policy or a contract.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.text = value;
            }
        });

        /**
         * @description Security labels that protect the handling of information about the term and
    its elements, which may be specifically identified..
         * @property {ContractSecurityLabel[]|undefined}
        */
        Object.defineProperty(this, 'securityLabel', {
            enumerable: true,
            get: () => this.__data.securityLabel,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContractSecurityLabel = require('../backbone_elements/contractSecurityLabel.js');
                this.__data.securityLabel = new ContractSecurityLabel(value);
            }
        });

        /**
         * @description The matter of concern in the context of this provision of the agrement.
         * @property {ContractOffer}
        */
        Object.defineProperty(this, 'offer', {
            enumerable: true,
            get: () => this.__data.offer,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContractOffer = require('../backbone_elements/contractOffer.js');
                this.__data.offer = new ContractOffer(value);
            }
        });

        /**
         * @description Contract Term Asset List.
         * @property {ContractAsset[]|undefined}
        */
        Object.defineProperty(this, 'asset', {
            enumerable: true,
            get: () => this.__data.asset,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContractAsset = require('../backbone_elements/contractAsset.js');
                this.__data.asset = new ContractAsset(value);
            }
        });

        /**
         * @description An actor taking a role in an activity for which it can be assigned some degree
    of responsibility for the activity taking place.
         * @property {ContractAction[]|undefined}
        */
        Object.defineProperty(this, 'action', {
            enumerable: true,
            get: () => this.__data.action,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContractAction = require('../backbone_elements/contractAction.js');
                this.__data.action = new ContractAction(value);
            }
        });

        /**
         * @description Nested group of Contract Provisions.
         * @property {ContractTerm[]|undefined}
        */
        Object.defineProperty(this, 'group', {
            enumerable: true,
            get: () => this.__data.group,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.group = new ContractTerm(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ContractTerm',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ContractTerm';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            identifier: this.identifier && this.identifier.toJSON(),
            issued: this.issued && this.issued.toJSON(),
            applies: this.applies && this.applies.toJSON(),
            topicCodeableConcept: this.topicCodeableConcept && this.topicCodeableConcept.toJSON(),
            topicReference: this.topicReference && this.topicReference.toJSON(),
            type: this.type && this.type.toJSON(),
            subType: this.subType && this.subType.toJSON(),
            text: this.text,
            securityLabel: this.securityLabel && this.securityLabel.toJSON(),
            offer: this.offer && this.offer.toJSON(),
            asset: this.asset && this.asset.toJSON(),
            action: this.action && this.action.toJSON(),
            group: this.group && this.group.toJSON(),
        };
    }
}

module.exports = ContractTerm;
