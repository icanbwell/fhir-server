// This file is auto-generated by generate_classes so do not edit manually

/**
Measure.SupplementalData
    The Measure resource provides the definition of a quality measure.
*/
class MeasureSupplementalData {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description Indicates a meaning for the supplemental data. This can be as simple as a
    unique identifier, or it can establish meaning in a broader context by drawing
    from a terminology, allowing supplemental data to be correlated across
    measures.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            get: () => this.__data.code,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.code = new CodeableConcept(value);
            }
        });

        /**
         * @description An indicator of the intended usage for the supplemental data element.
    Supplemental data indicates the data is additional information requested to
    augment the measure information. Risk adjustment factor indicates the data is
    additional information used to calculate risk adjustment factors when applying
    a risk model to the measure calculation.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'usage', {
            enumerable: true,
            get: () => this.__data.usage,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.usage = new CodeableConcept(value);
            }
        });

        /**
         * @description The human readable description of this supplemental data.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.description = value;
            }
        });

        /**
         * @description The criteria for the supplemental data. This is typically the name of a valid
    expression defined within a referenced library, but it may also be a path to a
    specific data element. The criteria defines the data to be returned for this
    element.
         * @property {Expression}
        */
        Object.defineProperty(this, 'criteria', {
            enumerable: true,
            get: () => this.__data.criteria,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Expression = require('../complex_types/expression.js');
                this.__data.criteria = new Expression(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'MeasureSupplementalData',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'MeasureSupplementalData';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            code: this.code && this.code.toJSON(),
            usage: this.usage && this.usage.toJSON(),
            description: this.description,
            criteria: this.criteria && this.criteria.toJSON(),
        };
    }
}

module.exports = MeasureSupplementalData;
