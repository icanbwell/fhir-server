// This file is auto-generated by generate_classes so do not edit manually

/**
Contract.Offer
    Legally enforceable, formally recorded unilateral or bilateral directive i.e.,
    a policy or agreement.
*/
class ContractOffer {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description Unique identifier for this particular Contract Provision.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            enumerable: true,
            get: () => this.__data.identifier,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(value) ? value.map(v => new Identifier(v)) : [new Identifier(value)];
            }
        });

        /**
         * @description Offer Recipient.
         * @property {ContractParty[]|undefined}
        */
        Object.defineProperty(this, 'party', {
            enumerable: true,
            get: () => this.__data.party,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContractParty = require('../backbone_elements/contractParty.js');
                this.__data.party = Array.isArray(value) ? value.map(v => new ContractParty(v)) : [new ContractParty(value)];
            }
        });

        /**
         * @description The owner of an asset has the residual control rights over the asset: the
    right to decide all usages of the asset in any way not inconsistent with a
    prior contract, custom, or law (Hart, 1995, p. 30).
         * @property {Resource|undefined}
        */
        Object.defineProperty(this, 'topic', {
            enumerable: true,
            get: () => this.__data.topic,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.topic = new Reference(value);
            }
        });

        /**
         * @description Type of Contract Provision such as specific requirements, purposes for
    actions, obligations, prohibitions, e.g. life time maximum benefit.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.type = new CodeableConcept(value);
            }
        });

        /**
         * @description Type of choice made by accepting party with respect to an offer made by an
    offeror/ grantee.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'decision', {
            enumerable: true,
            get: () => this.__data.decision,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.decision = new CodeableConcept(value);
            }
        });

        /**
         * @description How the decision about a Contract was conveyed.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'decisionMode', {
            enumerable: true,
            get: () => this.__data.decisionMode,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.decisionMode = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description Response to offer text.
         * @property {ContractAnswer[]|undefined}
        */
        Object.defineProperty(this, 'answer', {
            enumerable: true,
            get: () => this.__data.answer,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ContractAnswer = require('../backbone_elements/contractAnswer.js');
                this.__data.answer = Array.isArray(value) ? value.map(v => new ContractAnswer(v)) : [new ContractAnswer(value)];
            }
        });

        /**
         * @description Human readable form of this Contract Offer.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.text = value;
            }
        });

        /**
         * @description The id of the clause or question text of the offer in the referenced
    questionnaire/response.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'linkId', {
            enumerable: true,
            get: () => this.__data.linkId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.linkId = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        /**
         * @description Security labels that protects the offer.
         * @property {unsignedInt[]|undefined}
        */
        Object.defineProperty(this, 'securityLabelNumber', {
            enumerable: true,
            get: () => this.__data.securityLabelNumber,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.securityLabelNumber = Array.isArray(value) ? value.map(v => v) : [value];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ContractOffer',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ContractOffer';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            party: this.party && this.party.map(v => v.toJSON()),
            topic: this.topic && this.topic.toJSON(),
            type: this.type && this.type.toJSON(),
            decision: this.decision && this.decision.toJSON(),
            decisionMode: this.decisionMode && this.decisionMode.map(v => v.toJSON()),
            answer: this.answer && this.answer.map(v => v.toJSON()),
            text: this.text,
            linkId: this.linkId,
            securityLabelNumber: this.securityLabelNumber,
        };
    }
}

module.exports = ContractOffer;
