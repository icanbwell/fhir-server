// This file is auto-generated by generate_classes so do not edit manually

/**
ImmunizationRecommendation.Recommendation
    A patient's point-in-time set of recommendations (i.e. forecasting) according
    to a published schedule with optional supporting justification.
*/
class ImmunizationRecommendationRecommendation {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description Vaccine(s) or vaccine group that pertain to the recommendation.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'vaccineCode', {
            enumerable: true,
            get: () => this.__data.vaccineCode,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.vaccineCode = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description The targeted disease for the recommendation.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'targetDisease', {
            enumerable: true,
            get: () => this.__data.targetDisease,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.targetDisease = new CodeableConcept(value);
            }
        });

        /**
         * @description Vaccine(s) which should not be used to fulfill the recommendation.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'contraindicatedVaccineCode', {
            enumerable: true,
            get: () => this.__data.contraindicatedVaccineCode,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.contraindicatedVaccineCode = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description Indicates the patient status with respect to the path to immunity for the
    target disease.
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'forecastStatus', {
            enumerable: true,
            get: () => this.__data.forecastStatus,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.forecastStatus = new CodeableConcept(value);
            }
        });

        /**
         * @description The reason for the assigned forecast status.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'forecastReason', {
            enumerable: true,
            get: () => this.__data.forecastReason,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.forecastReason = Array.isArray(value) ? value.map(v => new CodeableConcept(v)) : [new CodeableConcept(value)];
            }
        });

        /**
         * @description Vaccine date recommendations.  For example, earliest date to administer,
    latest date to administer, etc.
         * @property {ImmunizationRecommendationDateCriterion[]|undefined}
        */
        Object.defineProperty(this, 'dateCriterion', {
            enumerable: true,
            get: () => this.__data.dateCriterion,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let ImmunizationRecommendationDateCriterion = require('../backbone_elements/immunizationRecommendationDateCriterion.js');
                this.__data.dateCriterion = Array.isArray(value) ? value.map(v => new ImmunizationRecommendationDateCriterion(v)) : [new ImmunizationRecommendationDateCriterion(value)];
            }
        });

        /**
         * @description Contains the description about the protocol under which the vaccine was
    administered.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.description = value;
            }
        });

        /**
         * @description One possible path to achieve presumed immunity against a disease - within the
    context of an authority.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'series', {
            enumerable: true,
            get: () => this.__data.series,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.series = value;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'doseNumberPositiveInt', {
            enumerable: true,
            get: () => this.__data.doseNumberPositiveInt,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.doseNumberPositiveInt = value;
            }
        });

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'doseNumberString', {
            enumerable: true,
            get: () => this.__data.doseNumberString,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.doseNumberString = value;
            }
        });

        /**
         * @description None
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'seriesDosesPositiveInt', {
            enumerable: true,
            get: () => this.__data.seriesDosesPositiveInt,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.seriesDosesPositiveInt = value;
            }
        });

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'seriesDosesString', {
            enumerable: true,
            get: () => this.__data.seriesDosesString,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.seriesDosesString = value;
            }
        });

        /**
         * @description Immunization event history and/or evaluation that supports the status and
    recommendation.
         * @property {ImmunizationRecommendationRecommendationSupportingImmunization[]|undefined}
        */
        Object.defineProperty(this, 'supportingImmunization', {
            enumerable: true,
            get: () => this.__data.supportingImmunization,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.supportingImmunization = Array.isArray(value) ? value.map(v => new Reference(v)) : [new Reference(value)];
            }
        });

        /**
         * @description Patient Information that supports the status and recommendation.  This
    includes patient observations, adverse reactions and allergy/intolerance
    information.
         * @property {Resource[]|undefined}
        */
        Object.defineProperty(this, 'supportingPatientInformation', {
            enumerable: true,
            get: () => this.__data.supportingPatientInformation,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.supportingPatientInformation = Array.isArray(value) ? value.map(v => new Reference(v)) : [new Reference(value)];
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ImmunizationRecommendationRecommendation',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'ImmunizationRecommendationRecommendation';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            vaccineCode: this.vaccineCode && this.vaccineCode.map(v => v.toJSON()),
            targetDisease: this.targetDisease && this.targetDisease.toJSON(),
            contraindicatedVaccineCode: this.contraindicatedVaccineCode && this.contraindicatedVaccineCode.map(v => v.toJSON()),
            forecastStatus: this.forecastStatus && this.forecastStatus.toJSON(),
            forecastReason: this.forecastReason && this.forecastReason.map(v => v.toJSON()),
            dateCriterion: this.dateCriterion && this.dateCriterion.map(v => v.toJSON()),
            description: this.description,
            series: this.series,
            doseNumberPositiveInt: this.doseNumberPositiveInt,
            doseNumberString: this.doseNumberString,
            seriesDosesPositiveInt: this.seriesDosesPositiveInt,
            seriesDosesString: this.seriesDosesString,
            supportingImmunization: this.supportingImmunization && this.supportingImmunization.map(v => v.toJSON()),
            supportingPatientInformation: this.supportingPatientInformation && this.supportingPatientInformation.map(v => v.toJSON()),
        };
    }
}

module.exports = ImmunizationRecommendationRecommendation;
