// This file is auto-generated by generate_classes so do not edit manually

/**
AuditEvent.Entity
    A record of an event made for purposes of maintaining a security log. Typical
    uses include detection of intrusion attempts and monitoring for inappropriate
    usage.
*/
class AuditEventEntity {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description Identifies a specific instance of the entity. The reference should be version
    specific.
         * @property {Resource|undefined}
        */
        Object.defineProperty(this, 'what', {
            enumerable: true,
            get: () => this.__data.what,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.what = new Reference(value);
            }
        });

        /**
         * @description The type of the object that was involved in this audit event.
         * @property {Coding|undefined}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.type = new Coding(value);
            }
        });

        /**
         * @description Code representing the role the entity played in the event being audited.
         * @property {Coding|undefined}
        */
        Object.defineProperty(this, 'role', {
            enumerable: true,
            get: () => this.__data.role,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.role = new Coding(value);
            }
        });

        /**
         * @description Identifier for the data life-cycle stage for the entity.
         * @property {Coding|undefined}
        */
        Object.defineProperty(this, 'lifecycle', {
            enumerable: true,
            get: () => this.__data.lifecycle,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.lifecycle = new Coding(value);
            }
        });

        /**
         * @description Security labels for the identified entity.
         * @property {Coding[]|undefined}
        */
        Object.defineProperty(this, 'securityLabel', {
            enumerable: true,
            get: () => this.__data.securityLabel,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.securityLabel = new Coding(value);
            }
        });

        /**
         * @description A name of the entity in the audit event.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'name', {
            enumerable: true,
            get: () => this.__data.name,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.name = value;
            }
        });

        /**
         * @description Text that describes the entity in more detail.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.description = value;
            }
        });

        /**
         * @description The query parameters for a query-type entities.
         * @property {base64Binary|undefined}
        */
        Object.defineProperty(this, 'query', {
            enumerable: true,
            get: () => this.__data.query,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let base64Binary = require('../simple_types/base64Binary.js');
                // eslint-disable-next-line new-cap
                this.__data.query = new base64Binary(value);
            }
        });

        /**
         * @description Tagged value pairs for conveying additional information about the entity.
         * @property {AuditEventDetail[]|undefined}
        */
        Object.defineProperty(this, 'detail', {
            enumerable: true,
            get: () => this.__data.detail,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let AuditEventDetail = require('../backbone_elements/auditEventDetail.js');
                this.__data.detail = new AuditEventDetail(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'AuditEventEntity',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'AuditEventEntity';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            what: this.what && this.what.toJSON(),
            type: this.type && this.type.toJSON(),
            role: this.role && this.role.toJSON(),
            lifecycle: this.lifecycle && this.lifecycle.toJSON(),
            securityLabel: this.securityLabel && this.securityLabel.toJSON(),
            name: this.name,
            description: this.description,
            query: this.query && this.query.toJSON(),
            detail: this.detail && this.detail.toJSON(),
        };
    }
}

module.exports = AuditEventEntity;
