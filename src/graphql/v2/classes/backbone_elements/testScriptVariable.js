// This file is auto-generated by generate_classes so do not edit manually

/**
TestScript.Variable
    A structured set of tests against a FHIR server or client implementation to
    determine compliance against the FHIR specification.
*/
class TestScriptVariable {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description Descriptive name for this variable.
         * @property {String}
        */
        Object.defineProperty(this, 'name', {
            enumerable: true,
            get: () => this.__data.name,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.name = value;
            }
        });

        /**
         * @description A default, hard-coded, or user-defined value for this variable.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'defaultValue', {
            enumerable: true,
            get: () => this.__data.defaultValue,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.defaultValue = value;
            }
        });

        /**
         * @description A free text natural language description of the variable and its purpose.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.description = value;
            }
        });

        /**
         * @description The FHIRPath expression to evaluate against the fixture body. When variables
    are defined, only one of either expression, headerField or path must be
    specified.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'expression', {
            enumerable: true,
            get: () => this.__data.expression,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.expression = value;
            }
        });

        /**
         * @description Will be used to grab the HTTP header field value from the headers that
    sourceId is pointing to.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'headerField', {
            enumerable: true,
            get: () => this.__data.headerField,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.headerField = value;
            }
        });

        /**
         * @description Displayable text string with hint help information to the user when entering a
    default value.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'hint', {
            enumerable: true,
            get: () => this.__data.hint,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.hint = value;
            }
        });

        /**
         * @description XPath or JSONPath to evaluate against the fixture body.  When variables are
    defined, only one of either expression, headerField or path must be specified.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'path', {
            enumerable: true,
            get: () => this.__data.path,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.path = value;
            }
        });

        /**
         * @description Fixture to evaluate the XPath/JSONPath expression or the headerField  against
    within this variable.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'sourceId', {
            enumerable: true,
            get: () => this.__data.sourceId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.sourceId = new id(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'TestScriptVariable',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'TestScriptVariable';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            name: this.name,
            defaultValue: this.defaultValue,
            description: this.description,
            expression: this.expression,
            headerField: this.headerField,
            hint: this.hint,
            path: this.path,
            sourceId: this.sourceId && this.sourceId.toJSON(),
        };
    }
}

module.exports = TestScriptVariable;
