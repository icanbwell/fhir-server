// This file is auto-generated by generate_classes so do not edit manually

/**
Timing.Repeat
    Specifies an event that may occur multiple times. Timing schedules are used to
    record when things are planned, expected or requested to occur. The most
    common usage is in dosage instructions for medications. They are also used
    when planning care of various kinds, and may be used for reporting the
    schedule to which past regular activities were carried out.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class TimingRepeat {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description None
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'boundsDuration', {
            enumerable: true,
            get: () => this.__data.boundsDuration,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.boundsDuration = new Quantity(value);
            }
        });

        /**
         * @description None
         * @property {Range|undefined}
        */
        Object.defineProperty(this, 'boundsRange', {
            enumerable: true,
            get: () => this.__data.boundsRange,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Range = require('../complex_types/range.js');
                this.__data.boundsRange = new Range(value);
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'boundsPeriod', {
            enumerable: true,
            get: () => this.__data.boundsPeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.boundsPeriod = new Period(value);
            }
        });

        /**
         * @description A total count of the desired number of repetitions across the duration of the
    entire timing specification. If countMax is present, this element indicates
    the lower bound of the allowed range of count values.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'count', {
            enumerable: true,
            get: () => this.__data.count,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.count = value;
            }
        });

        /**
         * @description If present, indicates that the count is a range - so to perform the action
    between [count] and [countMax] times.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'countMax', {
            enumerable: true,
            get: () => this.__data.countMax,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.countMax = value;
            }
        });

        /**
         * @description How long this thing happens for when it happens. If durationMax is present,
    this element indicates the lower bound of the allowed range of the duration.
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'duration', {
            enumerable: true,
            get: () => this.__data.duration,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let decimal = require('../simple_types/decimal.js');
                // eslint-disable-next-line new-cap
                this.__data.duration = new decimal(value);
            }
        });

        /**
         * @description If present, indicates that the duration is a range - so to perform the action
    between [duration] and [durationMax] time length.
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'durationMax', {
            enumerable: true,
            get: () => this.__data.durationMax,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let decimal = require('../simple_types/decimal.js');
                // eslint-disable-next-line new-cap
                this.__data.durationMax = new decimal(value);
            }
        });

        /**
         * @description The units of time for the duration, in UCUM units.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'durationUnit', {
            enumerable: true,
            get: () => this.__data.durationUnit,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.durationUnit = value;
            }
        });

        /**
         * @description The number of times to repeat the action within the specified period. If
    frequencyMax is present, this element indicates the lower bound of the allowed
    range of the frequency.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'frequency', {
            enumerable: true,
            get: () => this.__data.frequency,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.frequency = value;
            }
        });

        /**
         * @description If present, indicates that the frequency is a range - so to repeat between
    [frequency] and [frequencyMax] times within the period or period range.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'frequencyMax', {
            enumerable: true,
            get: () => this.__data.frequencyMax,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.frequencyMax = value;
            }
        });

        /**
         * @description Indicates the duration of time over which repetitions are to occur; e.g. to
    express "3 times per day", 3 would be the frequency and "1 day" would be the
    period. If periodMax is present, this element indicates the lower bound of the
    allowed range of the period length.
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'period', {
            enumerable: true,
            get: () => this.__data.period,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let decimal = require('../simple_types/decimal.js');
                // eslint-disable-next-line new-cap
                this.__data.period = new decimal(value);
            }
        });

        /**
         * @description If present, indicates that the period is a range from [period] to [periodMax],
    allowing expressing concepts such as "do this once every 3-5 days.
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'periodMax', {
            enumerable: true,
            get: () => this.__data.periodMax,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let decimal = require('../simple_types/decimal.js');
                // eslint-disable-next-line new-cap
                this.__data.periodMax = new decimal(value);
            }
        });

        /**
         * @description The units of time for the period in UCUM units.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'periodUnit', {
            enumerable: true,
            get: () => this.__data.periodUnit,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.periodUnit = value;
            }
        });

        /**
         * @description If one or more days of week is provided, then the action happens only on the
    specified day(s).
         * @property {code[]|undefined}
        */
        Object.defineProperty(this, 'dayOfWeek', {
            enumerable: true,
            get: () => this.__data.dayOfWeek,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.dayOfWeek = value;
            }
        });

        /**
         * @description Specified time of day for action to take place.
         * @property {time[]|undefined}
        */
        Object.defineProperty(this, 'timeOfDay', {
            enumerable: true,
            get: () => this.__data.timeOfDay,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let time = require('../simple_types/time.js');
                // eslint-disable-next-line new-cap
                this.__data.timeOfDay = new time(value);
            }
        });

        /**
         * @description An approximate time period during the day, potentially linked to an event of
    daily living that indicates when the action should occur.
         * @property {code[]|undefined}
        */
        Object.defineProperty(this, 'when', {
            enumerable: true,
            get: () => this.__data.when,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.when = value;
            }
        });

        /**
         * @description The number of minutes from the event. If the event code does not indicate
    whether the minutes is before or after the event, then the offset is assumed
    to be after the event.
         * @property {unsignedInt|undefined}
        */
        Object.defineProperty(this, 'offset', {
            enumerable: true,
            get: () => this.__data.offset,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let unsignedInt = require('../simple_types/unsignedInt.js');
                // eslint-disable-next-line new-cap
                this.__data.offset = new unsignedInt(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'TimingRepeat',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'TimingRepeat';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            boundsDuration: this.boundsDuration && this.boundsDuration.toJSON(),
            boundsRange: this.boundsRange && this.boundsRange.toJSON(),
            boundsPeriod: this.boundsPeriod && this.boundsPeriod.toJSON(),
            count: this.count,
            countMax: this.countMax,
            duration: this.duration && this.duration.toJSON(),
            durationMax: this.durationMax && this.durationMax.toJSON(),
            durationUnit: this.durationUnit && this.durationUnit.toJSON(),
            frequency: this.frequency,
            frequencyMax: this.frequencyMax,
            period: this.period && this.period.toJSON(),
            periodMax: this.periodMax && this.periodMax.toJSON(),
            periodUnit: this.periodUnit && this.periodUnit.toJSON(),
            dayOfWeek: this.dayOfWeek && this.dayOfWeek.toJSON(),
            timeOfDay: this.timeOfDay && this.timeOfDay.toJSON(),
            when: this.when && this.when.toJSON(),
            offset: this.offset && this.offset.toJSON(),
        };
    }
}

module.exports = TimingRepeat;
