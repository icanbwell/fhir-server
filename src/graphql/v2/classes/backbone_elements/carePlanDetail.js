// This file is auto-generated by generate_classes so do not edit manually

/**
CarePlan.Detail
    Describes the intention of how one or more practitioners intend to deliver
    care for a particular patient, group or community for a period of time,
    possibly limited to care for a specific condition or set of conditions.
*/
class CarePlanDetail {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.

    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            enumerable: true,
            get: () => this.__data.modifierExtension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = new Extension(value);
            }
        });

        /**
         * @description A description of the kind of resource the in-line definition of a care plan
    activity is representing.  The CarePlan.activity.detail is an in-line
    definition when a resource is not referenced using
    CarePlan.activity.reference.  For example, a MedicationRequest, a
    ServiceRequest, or a CommunicationRequest.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'kind', {
            enumerable: true,
            get: () => this.__data.kind,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.kind = value;
            }
        });

        /**
         * @description The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other
    definition that is adhered to in whole or in part by this CarePlan activity.
         * @property {canonical[]|undefined}
        */
        Object.defineProperty(this, 'instantiatesCanonical', {
            enumerable: true,
            get: () => this.__data.instantiatesCanonical,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let canonical = require('../simple_types/canonical.js');
                // eslint-disable-next-line new-cap
                this.__data.instantiatesCanonical = new canonical(value);
            }
        });

        /**
         * @description The URL pointing to an externally maintained protocol, guideline,
    questionnaire or other definition that is adhered to in whole or in part by
    this CarePlan activity.
         * @property {uri[]|undefined}
        */
        Object.defineProperty(this, 'instantiatesUri', {
            enumerable: true,
            get: () => this.__data.instantiatesUri,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.instantiatesUri = new uri(value);
            }
        });

        /**
         * @description Detailed description of the type of planned activity; e.g. what lab test, what
    procedure, what kind of encounter.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            get: () => this.__data.code,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.code = new CodeableConcept(value);
            }
        });

        /**
         * @description Provides the rationale that drove the inclusion of this particular activity as
    part of the plan or the reason why the activity was prohibited.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'reasonCode', {
            enumerable: true,
            get: () => this.__data.reasonCode,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.reasonCode = new CodeableConcept(value);
            }
        });

        /**
         * @description Indicates another resource, such as the health condition(s), whose existence
    justifies this request and drove the inclusion of this particular activity as
    part of the plan.
         * @property {CarePlanDetailReasonReference[]|undefined}
        */
        Object.defineProperty(this, 'reasonReference', {
            enumerable: true,
            get: () => this.__data.reasonReference,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.reasonReference = new Reference(value);
            }
        });

        /**
         * @description Internal reference that identifies the goals that this activity is intended to
    contribute towards meeting.
         * @property {Goal[]|undefined}
        */
        Object.defineProperty(this, 'goal', {
            enumerable: true,
            get: () => this.__data.goal,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.goal = new Reference(value);
            }
        });

        /**
         * @description Identifies what progress is being made for the specific activity.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            get: () => this.__data.status,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.status = value;
            }
        });

        /**
         * @description Provides reason why the activity isn't yet started, is on hold, was cancelled,
    etc.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'statusReason', {
            enumerable: true,
            get: () => this.__data.statusReason,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.statusReason = new CodeableConcept(value);
            }
        });

        /**
         * @description If true, indicates that the described activity is one that must NOT be engaged
    in when following the plan.  If false, or missing, indicates that the
    described activity is one that should be engaged in when following the plan.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'doNotPerform', {
            enumerable: true,
            get: () => this.__data.doNotPerform,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.doNotPerform = value;
            }
        });

        /**
         * @description None
         * @property {Timing|undefined}
        */
        Object.defineProperty(this, 'scheduledTiming', {
            enumerable: true,
            get: () => this.__data.scheduledTiming,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Timing = require('../backbone_elements/timing.js');
                this.__data.scheduledTiming = new Timing(value);
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'scheduledPeriod', {
            enumerable: true,
            get: () => this.__data.scheduledPeriod,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.scheduledPeriod = new Period(value);
            }
        });

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'scheduledString', {
            enumerable: true,
            get: () => this.__data.scheduledString,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.scheduledString = value;
            }
        });

        /**
         * @description Identifies the facility where the activity will occur; e.g. home, hospital,
    specific clinic, etc.
         * @property {Location|undefined}
        */
        Object.defineProperty(this, 'location', {
            enumerable: true,
            get: () => this.__data.location,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.location = new Reference(value);
            }
        });

        /**
         * @description Identifies who's expected to be involved in the activity.
         * @property {CarePlanDetailPerformer[]|undefined}
        */
        Object.defineProperty(this, 'performer', {
            enumerable: true,
            get: () => this.__data.performer,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.performer = new Reference(value);
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'productCodeableConcept', {
            enumerable: true,
            get: () => this.__data.productCodeableConcept,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.productCodeableConcept = new CodeableConcept(value);
            }
        });

        /**
         * @description None
         * @property {CarePlanDetailProductReference|undefined}
        */
        Object.defineProperty(this, 'productReference', {
            enumerable: true,
            get: () => this.__data.productReference,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.productReference = new Reference(value);
            }
        });

        /**
         * @description Identifies the quantity expected to be consumed in a given day.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'dailyAmount', {
            enumerable: true,
            get: () => this.__data.dailyAmount,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.dailyAmount = new Quantity(value);
            }
        });

        /**
         * @description Identifies the quantity expected to be supplied, administered or consumed by
    the subject.
         * @property {Quantity|undefined}
        */
        Object.defineProperty(this, 'quantity', {
            enumerable: true,
            get: () => this.__data.quantity,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Quantity = require('../complex_types/quantity.js');
                this.__data.quantity = new Quantity(value);
            }
        });

        /**
         * @description This provides a textual description of constraints on the intended activity
    occurrence, including relation to other activities.  It may also include
    objectives, pre-conditions and end-conditions.  Finally, it may convey
    specifics about the activity such as body site, method, route, etc.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.description = value;
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'CarePlanDetail',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'CarePlanDetail';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            modifierExtension: this.modifierExtension && this.modifierExtension.toJSON(),
            kind: this.kind && this.kind.toJSON(),
            instantiatesCanonical: this.instantiatesCanonical && this.instantiatesCanonical.toJSON(),
            instantiatesUri: this.instantiatesUri && this.instantiatesUri.toJSON(),
            code: this.code && this.code.toJSON(),
            reasonCode: this.reasonCode && this.reasonCode.toJSON(),
            reasonReference: this.reasonReference && this.reasonReference.toJSON(),
            goal: this.goal && this.goal.toJSON(),
            status: this.status && this.status.toJSON(),
            statusReason: this.statusReason && this.statusReason.toJSON(),
            doNotPerform: this.doNotPerform,
            scheduledTiming: this.scheduledTiming && this.scheduledTiming.toJSON(),
            scheduledPeriod: this.scheduledPeriod && this.scheduledPeriod.toJSON(),
            scheduledString: this.scheduledString,
            location: this.location && this.location.toJSON(),
            performer: this.performer && this.performer.toJSON(),
            productCodeableConcept: this.productCodeableConcept && this.productCodeableConcept.toJSON(),
            productReference: this.productReference && this.productReference.toJSON(),
            dailyAmount: this.dailyAmount && this.dailyAmount.toJSON(),
            quantity: this.quantity && this.quantity.toJSON(),
            description: this.description,
        };
    }
}

module.exports = CarePlanDetail;
