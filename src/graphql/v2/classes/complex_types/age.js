// This file is auto-generated by generate_classes so do not edit manually

/**
Age
    A duration of time during which an organism (or a process) has existed.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class Age {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description The value of the measured amount. The value includes an implicit precision in
    the presentation of the value.
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'value', {
            enumerable: true,
            get: () => this.__data.value,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.value = value;
            }
        });

        /**
         * @description How the value should be understood and represented - whether the actual value
    is greater or less than the stated value due to measurement issues; e.g. if
    the comparator is "<" , then the real value is < stated value.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'comparator', {
            enumerable: true,
            get: () => this.__data.comparator,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.comparator = value;
            }
        });

        /**
         * @description A human-readable form of the unit.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'unit', {
            enumerable: true,
            get: () => this.__data.unit,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.unit = value;
            }
        });

        /**
         * @description The identification of the system that provides the coded form of the unit.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'system', {
            enumerable: true,
            get: () => this.__data.system,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.system = value;
            }
        });

        /**
         * @description A computer processable form of the unit in some unit representation system.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            get: () => this.__data.code,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.code = value;
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Age',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Age';
    }

    toJSON() {
        return {
            value: this.value,
            comparator: this.comparator,
            unit: this.unit,
            system: this.system,
            code: this.code,
        };
    }
}

module.exports = Age;
