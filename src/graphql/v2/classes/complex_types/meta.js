// This file is auto-generated by generate_classes so do not edit manually

/**
Meta
    The metadata about a resource. This is content in the resource that is
    maintained by the infrastructure. Changes to the content might not always be
    associated with version changes to the resource.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class Meta {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description The version specific identifier, as it appears in the version portion of the
    URL. This value changes when the resource is created, updated, or deleted.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'versionId', {
            enumerable: true,
            get: () => this.__data.versionId,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.versionId = new id(value);
            }
        });

        /**
         * @description When the resource last changed - e.g. when the version changed.
         * @property {instant|undefined}
        */
        Object.defineProperty(this, 'lastUpdated', {
            enumerable: true,
            get: () => this.__data.lastUpdated,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let instant = require('../simple_types/instant.js');
                // eslint-disable-next-line new-cap
                this.__data.lastUpdated = new instant(value);
            }
        });

        /**
         * @description A uri that identifies the source system of the resource. This provides a
    minimal amount of [[[Provenance]]] information that can be used to track or
    differentiate the source of information in the resource. The source may
    identify another FHIR server, document, message, database, etc.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'source', {
            enumerable: true,
            get: () => this.__data.source,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.source = new uri(value);
            }
        });

        /**
         * @description A list of profiles (references to [[[StructureDefinition]]] resources) that
    this resource claims to conform to. The URL is a reference to
    [[[StructureDefinition.url]]].
         * @property {canonical[]|undefined}
        */
        Object.defineProperty(this, 'profile', {
            enumerable: true,
            get: () => this.__data.profile,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let canonical = require('../simple_types/canonical.js');
                // eslint-disable-next-line new-cap
                this.__data.profile = new canonical(value);
            }
        });

        /**
         * @description Security labels applied to this resource. These tags connect specific
    resources to the overall security policy and infrastructure.
         * @property {Coding[]|undefined}
        */
        Object.defineProperty(this, 'security', {
            enumerable: true,
            get: () => this.__data.security,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.security = new Coding(value);
            }
        });

        /**
         * @description Tags applied to this resource. Tags are intended to be used to identify and
    relate resources to process and workflow, and applications are not required to
    consider the tags when interpreting the meaning of a resource.
         * @property {Coding[]|undefined}
        */
        Object.defineProperty(this, 'tag', {
            enumerable: true,
            get: () => this.__data.tag,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.tag = new Coding(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Meta',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Meta';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            versionId: this.versionId && this.versionId.toJSON(),
            lastUpdated: this.lastUpdated && this.lastUpdated.toJSON(),
            source: this.source && this.source.toJSON(),
            profile: this.profile && this.profile.toJSON(),
            security: this.security && this.security.toJSON(),
            tag: this.tag && this.tag.toJSON(),
        };
    }
}

module.exports = Meta;
