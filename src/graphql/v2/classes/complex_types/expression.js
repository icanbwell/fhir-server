// This file is auto-generated by generate_classes so do not edit manually

/**
Expression
    A expression that is evaluated in a specified context and returns a value. The
    context of use of the expression must specify the context in which the
    expression is evaluated, and how the result of the expression is used.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class Expression {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description A brief, natural language description of the condition that effectively
    communicates the intended semantics.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            enumerable: true,
            get: () => this.__data.description,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.description = value;
            }
        });

        /**
         * @description A short name assigned to the expression to allow for multiple reuse of the
    expression in the context where it is defined.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'name', {
            enumerable: true,
            get: () => this.__data.name,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let id = require('../simple_types/id.js');
                // eslint-disable-next-line new-cap
                this.__data.name = new id(value);
            }
        });

        /**
         * @description The media type of the language for the expression.
         * @property {code}
        */
        Object.defineProperty(this, 'language', {
            enumerable: true,
            get: () => this.__data.language,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.language = value;
            }
        });

        /**
         * @description An expression in the specified language that returns a value.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'expression', {
            enumerable: true,
            get: () => this.__data.expression,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.expression = value;
            }
        });

        /**
         * @description A URI that defines where the expression is found.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'reference', {
            enumerable: true,
            get: () => this.__data.reference,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let uri = require('../simple_types/uri.js');
                // eslint-disable-next-line new-cap
                this.__data.reference = new uri(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Expression',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Expression';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            description: this.description,
            name: this.name && this.name.toJSON(),
            language: this.language && this.language.toJSON(),
            expression: this.expression,
            reference: this.reference && this.reference.toJSON(),
        };
    }
}

module.exports = Expression;
