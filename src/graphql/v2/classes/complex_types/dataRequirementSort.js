// This file is auto-generated by generate_classes so do not edit manually

/**
DataRequirement.Sort
    Describes a required data item for evaluation in terms of the type of data,
    and optional code or date-based filters of the data.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class DataRequirementSort {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description The attribute of the sort. The specified path must be resolvable from the type
    of the required data. The path is allowed to contain qualifiers (.) to
    traverse sub-elements, as well as indexers ([x]) to traverse multiple-
    cardinality sub-elements. Note that the index must be an integer constant.
         * @property {String}
        */
        Object.defineProperty(this, 'path', {
            enumerable: true,
            get: () => this.__data.path,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.path = value;
            }
        });

        /**
         * @description The direction of the sort, ascending or descending.
         * @property {code}
        */
        Object.defineProperty(this, 'direction', {
            enumerable: true,
            get: () => this.__data.direction,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.direction = value;
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'DataRequirementSort',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'DataRequirementSort';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            path: this.path,
            direction: this.direction && this.direction.toJSON(),
        };
    }
}

module.exports = DataRequirementSort;
