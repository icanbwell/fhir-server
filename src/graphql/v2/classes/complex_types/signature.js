// This file is auto-generated by generate_classes so do not edit manually

/**
Signature
    A signature along with supporting context. The signature may be a digital
    signature that is cryptographic in nature, or some other signature acceptable
    to the domain. This other signature may be as simple as a graphical image
    representing a hand-written signature, or a signature ceremony Different
    signature approaches have different utilities.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class Signature {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(value) ? value.map(v => new Extension(v)) : [new Extension(value)];
            }
        });

        /**
         * @description An indication of the reason that the entity signed this document. This may be
    explicitly included as part of the signature information and can be used when
    determining accountability for various actions concerning the document.
         * @property {Coding[]}
        */
        Object.defineProperty(this, 'type', {
            enumerable: true,
            get: () => this.__data.type,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.type = Array.isArray(value) ? value.map(v => new Coding(v)) : [new Coding(value)];
            }
        });

        /**
         * @description When the digital signature was signed.
         * @property {instant}
        */
        Object.defineProperty(this, 'when', {
            enumerable: true,
            get: () => this.__data.when,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.when = value;
            }
        });

        /**
         * @description A reference to an application-usable description of the identity that signed
    (e.g. the signature used their private key).
         * @property {SignatureWho}
        */
        Object.defineProperty(this, 'who', {
            enumerable: true,
            get: () => this.__data.who,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.who = new Reference(value);
            }
        });

        /**
         * @description A reference to an application-usable description of the identity that is
    represented by the signature.
         * @property {SignatureOnBehalfOf|undefined}
        */
        Object.defineProperty(this, 'onBehalfOf', {
            enumerable: true,
            get: () => this.__data.onBehalfOf,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.onBehalfOf = new Reference(value);
            }
        });

        /**
         * @description A mime type that indicates the technical format of the target resources signed
    by the signature.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'targetFormat', {
            enumerable: true,
            get: () => this.__data.targetFormat,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.targetFormat = value;
            }
        });

        /**
         * @description A mime type that indicates the technical format of the signature. Important
    mime types are application/signature+xml for X ML DigSig, application/jose for
    JWS, and image/* for a graphical image of a signature, etc.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'sigFormat', {
            enumerable: true,
            get: () => this.__data.sigFormat,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.sigFormat = value;
            }
        });

        /**
         * @description The base64 encoding of the Signature content. When signature is not recorded
    electronically this element would be empty.
         * @property {base64Binary|undefined}
        */
        Object.defineProperty(this, 'data', {
            enumerable: true,
            get: () => this.__data.data,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.data = value;
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Signature',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'Signature';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            type: this.type && this.type.map(v => v.toJSON()),
            when: this.when,
            who: this.who && this.who.toJSON(),
            onBehalfOf: this.onBehalfOf && this.onBehalfOf.toJSON(),
            targetFormat: this.targetFormat,
            sigFormat: this.sigFormat,
            data: this.data,
        };
    }
}

module.exports = Signature;
