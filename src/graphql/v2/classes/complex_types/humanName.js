// This file is auto-generated by generate_classes so do not edit manually

/**
HumanName
    A human's name with the ability to identify parts and usage.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class HumanName {
    constructor(opts) {
        // Create an object to store all props
        Object.defineProperty(this, '__data', {
          value: {}
        }); // Define getters and setters as enumerable

        /**
         * @description None
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            get: () => this.__data.id,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.id = value;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            enumerable: true,
            get: () => this.__data.extension,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = new Extension(value);
            }
        });

        /**
         * @description Identifies the purpose for this name.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'use', {
            enumerable: true,
            get: () => this.__data.use,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.use = value;
            }
        });

        /**
         * @description Specifies the entire name as it should be displayed e.g. on an application UI.
    This may be provided instead of or as well as the specific parts.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'text', {
            enumerable: true,
            get: () => this.__data.text,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.text = value;
            }
        });

        /**
         * @description The part of a name that links to the genealogy. In some cultures (e.g.
    Eritrea) the family name of a son is the first name of his father.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'family', {
            enumerable: true,
            get: () => this.__data.family,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.family = value;
            }
        });

        /**
         * @description Given name.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'given', {
            enumerable: true,
            get: () => this.__data.given,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.given = value;
            }
        });

        /**
         * @description Part of the name that is acquired as a title due to academic, legal,
    employment or nobility status, etc. and that appears at the start of the name.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'prefix', {
            enumerable: true,
            get: () => this.__data.prefix,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.prefix = value;
            }
        });

        /**
         * @description Part of the name that is acquired as a title due to academic, legal,
    employment or nobility status, etc. and that appears at the end of the name.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'suffix', {
            enumerable: true,
            get: () => this.__data.suffix,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                this.__data.suffix = value;
            }
        });

        /**
         * @description Indicates the period of time when this name was valid for the named person.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'period', {
            enumerable: true,
            get: () => this.__data.period,
            set: value => {
                if (value === undefined || value === null) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.period = new Period(value);
            }
        });

        Object.assign(this, opts); // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'HumanName',
            enumerable: true,
            writable: false
        });
    }

    static get resourceType() {
        return 'HumanName';
    }

    toJSON() {
        return {
            id: this.id,
            extension: this.extension && this.extension.toJSON(),
            use: this.use && this.use.toJSON(),
            text: this.text,
            family: this.family,
            given: this.given,
            prefix: this.prefix,
            suffix: this.suffix,
            period: this.period && this.period.toJSON(),
        };
    }
}

module.exports = HumanName;
