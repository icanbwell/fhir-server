# This file is auto-generated by generate_classes so do not edit manually
# import id from "../simple_types/id.graphql"
# import Meta from "../complex_types/meta.graphql"
# import uri from "../simple_types/uri.graphql"
# import code from "../simple_types/code.graphql"
# import Narrative from "../complex_types/narrative.graphql"
# import ResourceContainer from "../simple_types/resourceContainer.graphql"
# import Extension from "../extensions/extension.graphql"
# import Account from "../resources/account.graphql"
# import ActivityDefinition from "../resources/activityDefinition.graphql"
# import AdverseEvent from "../resources/adverseEvent.graphql"
# import AllergyIntolerance from "../resources/allergyIntolerance.graphql"
# import Appointment from "../resources/appointment.graphql"
# import AppointmentResponse from "../resources/appointmentResponse.graphql"
# import AuditEvent from "../resources/auditEvent.graphql"
# import Basic from "../resources/basic.graphql"
# import Binary from "../resources/binary.graphql"
# import BiologicallyDerivedProduct from "../resources/biologicallyDerivedProduct.graphql"
# import BodyStructure from "../resources/bodyStructure.graphql"
# import Bundle from "../resources/bundle.graphql"
# import CapabilityStatement from "../resources/capabilityStatement.graphql"
# import CarePlan from "../resources/carePlan.graphql"
# import CareTeam from "../resources/careTeam.graphql"
# import CatalogEntry from "../resources/catalogEntry.graphql"
# import ChargeItem from "../resources/chargeItem.graphql"
# import ChargeItemDefinition from "../resources/chargeItemDefinition.graphql"
# import Claim from "../resources/claim.graphql"
# import ClaimResponse from "../resources/claimResponse.graphql"
# import ClinicalImpression from "../resources/clinicalImpression.graphql"
# import CodeSystem from "../resources/codeSystem.graphql"
# import Communication from "../resources/communication.graphql"
# import CommunicationRequest from "../resources/communicationRequest.graphql"
# import CompartmentDefinition from "../resources/compartmentDefinition.graphql"
# import Composition from "../resources/composition.graphql"
# import ConceptMap from "../resources/conceptMap.graphql"
# import Condition from "../resources/condition.graphql"
# import Consent from "../resources/consent.graphql"
# import Contract from "../resources/contract.graphql"
# import Coverage from "../resources/coverage.graphql"
# import CoverageEligibilityRequest from "../resources/coverageEligibilityRequest.graphql"
# import CoverageEligibilityResponse from "../resources/coverageEligibilityResponse.graphql"
# import DetectedIssue from "../resources/detectedIssue.graphql"
# import Device from "../resources/device.graphql"
# import DeviceDefinition from "../resources/deviceDefinition.graphql"
# import DeviceMetric from "../resources/deviceMetric.graphql"
# import DeviceRequest from "../resources/deviceRequest.graphql"
# import DeviceUseStatement from "../resources/deviceUseStatement.graphql"
# import DiagnosticReport from "../resources/diagnosticReport.graphql"
# import DocumentManifest from "../resources/documentManifest.graphql"
# import DocumentReference from "../resources/documentReference.graphql"
# import EffectEvidenceSynthesis from "../resources/effectEvidenceSynthesis.graphql"
# import Encounter from "../resources/encounter.graphql"
# import Endpoint from "../resources/endpoint.graphql"
# import EnrollmentRequest from "../resources/enrollmentRequest.graphql"
# import EnrollmentResponse from "../resources/enrollmentResponse.graphql"
# import EpisodeOfCare from "../resources/episodeOfCare.graphql"
# import EventDefinition from "../resources/eventDefinition.graphql"
# import Evidence from "../resources/evidence.graphql"
# import EvidenceVariable from "../resources/evidenceVariable.graphql"
# import ExampleScenario from "../resources/exampleScenario.graphql"
# import ExplanationOfBenefit from "../resources/explanationOfBenefit.graphql"
# import FamilyMemberHistory from "../resources/familyMemberHistory.graphql"
# import Flag from "../resources/flag.graphql"
# import Goal from "../resources/goal.graphql"
# import GraphDefinition from "../resources/graphDefinition.graphql"
# import Group from "../resources/group.graphql"
# import GuidanceResponse from "../resources/guidanceResponse.graphql"
# import HealthcareService from "../resources/healthcareService.graphql"
# import ImagingStudy from "../resources/imagingStudy.graphql"
# import Immunization from "../resources/immunization.graphql"
# import ImmunizationEvaluation from "../resources/immunizationEvaluation.graphql"
# import ImmunizationRecommendation from "../resources/immunizationRecommendation.graphql"
# import ImplementationGuide from "../resources/implementationGuide.graphql"
# import InsurancePlan from "../resources/insurancePlan.graphql"
# import Invoice from "../resources/invoice.graphql"
# import Library from "../resources/library.graphql"
# import Linkage from "../resources/linkage.graphql"
# import List from "../resources/list.graphql"
# import Location from "../resources/location.graphql"
# import Measure from "../resources/measure.graphql"
# import MeasureReport from "../resources/measureReport.graphql"
# import Media from "../resources/media.graphql"
# import Medication from "../resources/medication.graphql"
# import MedicationAdministration from "../resources/medicationAdministration.graphql"
# import MedicationDispense from "../resources/medicationDispense.graphql"
# import MedicationKnowledge from "../resources/medicationKnowledge.graphql"
# import MedicationRequest from "../resources/medicationRequest.graphql"
# import MedicationStatement from "../resources/medicationStatement.graphql"
# import MedicinalProduct from "../resources/medicinalProduct.graphql"
# import MedicinalProductAuthorization from "../resources/medicinalProductAuthorization.graphql"
# import MedicinalProductContraindication from "../resources/medicinalProductContraindication.graphql"
# import MedicinalProductIndication from "../resources/medicinalProductIndication.graphql"
# import MedicinalProductIngredient from "../resources/medicinalProductIngredient.graphql"
# import MedicinalProductInteraction from "../resources/medicinalProductInteraction.graphql"
# import MedicinalProductManufactured from "../resources/medicinalProductManufactured.graphql"
# import MedicinalProductPackaged from "../resources/medicinalProductPackaged.graphql"
# import MedicinalProductPharmaceutical from "../resources/medicinalProductPharmaceutical.graphql"
# import MedicinalProductUndesirableEffect from "../resources/medicinalProductUndesirableEffect.graphql"
# import MessageDefinition from "../resources/messageDefinition.graphql"
# import MessageHeader from "../resources/messageHeader.graphql"
# import MolecularSequence from "../resources/molecularSequence.graphql"
# import NamingSystem from "../resources/namingSystem.graphql"
# import NutritionOrder from "../resources/nutritionOrder.graphql"
# import Observation from "../resources/observation.graphql"
# import ObservationDefinition from "../resources/observationDefinition.graphql"
# import OperationDefinition from "../resources/operationDefinition.graphql"
# import OperationOutcome from "../resources/operationOutcome.graphql"
# import Organization from "../resources/organization.graphql"
# import OrganizationAffiliation from "../resources/organizationAffiliation.graphql"
# import Patient from "../resources/patient.graphql"
# import PaymentNotice from "../resources/paymentNotice.graphql"
# import PaymentReconciliation from "../resources/paymentReconciliation.graphql"
# import Person from "../resources/person.graphql"
# import PlanDefinition from "../resources/planDefinition.graphql"
# import Practitioner from "../resources/practitioner.graphql"
# import PractitionerRole from "../resources/practitionerRole.graphql"
# import Procedure from "../resources/procedure.graphql"
# import Provenance from "../resources/provenance.graphql"
# import Questionnaire from "../resources/questionnaire.graphql"
# import QuestionnaireResponse from "../resources/questionnaireResponse.graphql"
# import RelatedPerson from "../resources/relatedPerson.graphql"
# import RequestGroup from "../resources/requestGroup.graphql"
# import ResearchDefinition from "../resources/researchDefinition.graphql"
# import ResearchElementDefinition from "../resources/researchElementDefinition.graphql"
# import ResearchStudy from "../resources/researchStudy.graphql"
# import ResearchSubject from "../resources/researchSubject.graphql"
# import RiskAssessment from "../resources/riskAssessment.graphql"
# import RiskEvidenceSynthesis from "../resources/riskEvidenceSynthesis.graphql"
# import Schedule from "../resources/schedule.graphql"
# import SearchParameter from "../resources/searchParameter.graphql"
# import ServiceRequest from "../resources/serviceRequest.graphql"
# import Slot from "../resources/slot.graphql"
# import Specimen from "../resources/specimen.graphql"
# import SpecimenDefinition from "../resources/specimenDefinition.graphql"
# import StructureDefinition from "../resources/structureDefinition.graphql"
# import StructureMap from "../resources/structureMap.graphql"
# import Subscription from "../resources/subscription.graphql"
# import SubscriptionStatus from "../resources/subscriptionStatus.graphql"
# import SubscriptionTopic from "../resources/subscriptionTopic.graphql"
# import Substance from "../resources/substance.graphql"
# import SubstanceNucleicAcid from "../resources/substanceNucleicAcid.graphql"
# import SubstancePolymer from "../resources/substancePolymer.graphql"
# import SubstanceProtein from "../resources/substanceProtein.graphql"
# import SubstanceReferenceInformation from "../resources/substanceReferenceInformation.graphql"
# import SubstanceSourceMaterial from "../resources/substanceSourceMaterial.graphql"
# import SubstanceSpecification from "../resources/substanceSpecification.graphql"
# import SupplyDelivery from "../resources/supplyDelivery.graphql"
# import SupplyRequest from "../resources/supplyRequest.graphql"
# import Task from "../resources/task.graphql"
# import TerminologyCapabilities from "../resources/terminologyCapabilities.graphql"
# import TestReport from "../resources/testReport.graphql"
# import TestScript from "../resources/testScript.graphql"
# import ValueSet from "../resources/valueSet.graphql"
# import VerificationResult from "../resources/verificationResult.graphql"
# import VisionPrescription from "../resources/visionPrescription.graphql"
# import Parameters from "../resources/parameters.graphql"
# import Resource from "../resources/resource.graphql"
# import Period from "../complex_types/period.graphql"
# import dateTime from "../simple_types/dateTime.graphql"
# import instant from "../simple_types/instant.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import ProvenanceAgent from "../backbone_elements/provenanceAgent.graphql"
# import ProvenanceEntity from "../backbone_elements/provenanceEntity.graphql"
# import Signature from "../complex_types/signature.graphql"

union ProvenanceTargetV2 = Account | ActivityDefinition | AdverseEvent | AllergyIntolerance | Appointment | AppointmentResponse | AuditEvent | Basic | Binary | BiologicallyDerivedProduct | BodyStructure | Bundle | CapabilityStatement | CarePlan | CareTeam | CatalogEntry | ChargeItem | ChargeItemDefinition | Claim | ClaimResponse | ClinicalImpression | CodeSystem | Communication | CommunicationRequest | CompartmentDefinition | Composition | ConceptMap | Condition | Consent | Contract | Coverage | CoverageEligibilityRequest | CoverageEligibilityResponse | DetectedIssue | Device | DeviceDefinition | DeviceMetric | DeviceRequest | DeviceUseStatement | DiagnosticReport | DocumentManifest | DocumentReference | EffectEvidenceSynthesis | Encounter | Endpoint | EnrollmentRequest | EnrollmentResponse | EpisodeOfCare | EventDefinition | Evidence | EvidenceVariable | ExampleScenario | ExplanationOfBenefit | FamilyMemberHistory | Flag | Goal | GraphDefinition | Group | GuidanceResponse | HealthcareService | ImagingStudy | Immunization | ImmunizationEvaluation | ImmunizationRecommendation | ImplementationGuide | InsurancePlan | Invoice | Library | Linkage | List | Location | Measure | MeasureReport | Media | Medication | MedicationAdministration | MedicationDispense | MedicationKnowledge | MedicationRequest | MedicationStatement | MedicinalProduct | MedicinalProductAuthorization | MedicinalProductContraindication | MedicinalProductIndication | MedicinalProductIngredient | MedicinalProductInteraction | MedicinalProductManufactured | MedicinalProductPackaged | MedicinalProductPharmaceutical | MedicinalProductUndesirableEffect | MessageDefinition | MessageHeader | MolecularSequence | NamingSystem | NutritionOrder | Observation | ObservationDefinition | OperationDefinition | OperationOutcome | Organization | OrganizationAffiliation | Patient | PaymentNotice | PaymentReconciliation | Person | PlanDefinition | Practitioner | PractitionerRole | Procedure | Provenance | Questionnaire | QuestionnaireResponse | RelatedPerson | RequestGroup | ResearchDefinition | ResearchElementDefinition | ResearchStudy | ResearchSubject | RiskAssessment | RiskEvidenceSynthesis | Schedule | SearchParameter | ServiceRequest | Slot | Specimen | SpecimenDefinition | StructureDefinition | StructureMap | Subscription | SubscriptionStatus | SubscriptionTopic | Substance | SubstanceNucleicAcid | SubstancePolymer | SubstanceProtein | SubstanceReferenceInformation | SubstanceSourceMaterial | SubstanceSpecification | SupplyDelivery | SupplyRequest | Task | TerminologyCapabilities | TestReport | TestScript | ValueSet | VerificationResult | VisionPrescription | Parameters | Resource


"""
Provenance
    Provenance of a resource is a record that describes entities and processes
    involved in producing and delivering or otherwise influencing that resource.
    Provenance provides a critical foundation for assessing authenticity, enabling
    trust, and allowing reproducibility. Provenance assertions are a form of
    contextual metadata and can themselves become important records with their own
    provenance. Provenance statement indicates clinical significance in terms of
    confidence in authenticity, reliability, and trustworthiness, integrity, and
    stage in lifecycle (e.g. Document Completion - has the artifact been legally
    authenticated), all of which may impact security, privacy, and trust policies.
    If the element is present, it must have either a @value, an @id, or extensions
"""
type Provenance {
    resourceType: String
    """
    The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
    """
    id: id
    """
    The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
    """
    meta: Meta
    """
    A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
    """
    implicitRules: uri
    """
    The base language in which the resource is written.
    """
    language: code
    """
    A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
    """
    text: Narrative
    """
    These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
    """
    contained: [ResourceContainer]
    """
    May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
    """
    extension: [Extension]
    """
    May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
    
    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
    """
    modifierExtension: [Extension]
    """
    The Reference(s) that were generated or updated by  the activity described in
    this resource. A provenance can point to more than one target if multiple
    resources were created/updated by the same activity.
    """
    targetV2: [ProvenanceTargetV2]
    """
    The Reference(s) that were generated or updated by  the activity described in
    this resource. A provenance can point to more than one target if multiple
    resources were created/updated by the same activity.
    """
    target: [Resource]
    """
    None
    """
    occurredPeriod: Period
    """
    None
    """
    occurredDateTime: dateTime
    """
    The instant of time at which the activity was recorded.
    """
    recorded: instant
    """
    Policy or plan the activity was defined by. Typically, a single activity may
    have multiple applicable policy documents, such as patient consent, guarantor
    funding, etc.
    """
    policy: [uri]
    """
    Where the activity occurred, if relevant.
    """
    location: Location
    """
    The reason that the activity was taking place.
    """
    reason: [CodeableConcept]
    """
    An activity is something that occurs over a period of time and acts upon or
    with entities; it may include consuming, processing, transforming, modifying,
    relocating, using, or generating entities.
    """
    activity: CodeableConcept
    """
    An actor taking a role in an activity  for which it can be assigned some
    degree of responsibility for the activity taking place.
    """
    agent: [ProvenanceAgent]
    """
    An entity used in this activity.
    """
    entity: [ProvenanceEntity]
    """
    A digital signature on the target Reference(s). The signer should match a
    Provenance.agent. The purpose of the signature is indicated.
    """
    signature: [Signature]
}

type ProvenanceBundleEntry {
    """
    None
    """
    id: String
    """
    A series of links that provide context to this entry.
    """
    link: [BundleLink]
    """
    The Absolute URL for the resource.  The fullUrl SHALL NOT disagree with the id
    in the resource - i.e. if the fullUrl is not a urn:uuid, the URL shall be
    version-independent URL consistent with the Resource.id. The fullUrl is a
    version independent reference to the resource. The fullUrl element SHALL have
    a value except that:
    * fullUrl can be empty on a POST (although it does not need to when specifying
    a temporary id for reference in the bundle)
    * Results from operations might involve resources that are not identified.
    """
    fullUrl: uri
    """
    Provenance resource
    """
    resource: Provenance

    """
    Information about the search process that lead to the creation of this entry.
    """
    search: BundleSearch
    """
    Additional information about how this entry should be processed as part of a
    transaction or batch.  For history, it shows how the entry was processed to
    create the version contained in the entry.
    """
    request: BundleRequest
    """
    Indicates the results of processing the corresponding 'request' entry in the
    batch or transaction being responded to or what the results of an operation
    where when returning history.
    """
    response: BundleResponse
}

type ProvenanceBundle {
    id: String
    meta: Meta
    identifier: [Identifier]
    type: code
    timestamp: instant
    total: Int
    entry: [ProvenanceBundleEntry]
}
