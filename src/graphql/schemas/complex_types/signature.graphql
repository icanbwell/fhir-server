# This file is auto-generated by generate_classes so do not edit manually
# import code from "../simple_types/code.graphql"
# import Extension from "../extensions/extension.graphql"
# import Coding from "../complex_types/coding.graphql"
# import code from "../simple_types/code.graphql"
# import Practitioner from "../resources/practitioner.graphql"
# import PractitionerRole from "../resources/practitionerRole.graphql"
# import RelatedPerson from "../resources/relatedPerson.graphql"
# import Patient from "../resources/patient.graphql"
# import Device from "../resources/device.graphql"
# import Organization from "../resources/organization.graphql"
# import Practitioner from "../resources/practitioner.graphql"
# import PractitionerRole from "../resources/practitionerRole.graphql"
# import RelatedPerson from "../resources/relatedPerson.graphql"
# import Patient from "../resources/patient.graphql"
# import Device from "../resources/device.graphql"
# import Organization from "../resources/organization.graphql"
# import code from "../simple_types/code.graphql"
# import code from "../simple_types/code.graphql"
# import code from "../simple_types/code.graphql"

union SignatureWho = Practitioner | PractitionerRole | RelatedPerson | Patient | Device | Organization
union SignatureOnBehalfOf = Practitioner | PractitionerRole | RelatedPerson | Patient | Device | Organization


type Signature {
    """
    Signature
        A signature along with supporting context. The signature may be a digital
    signature that is cryptographic in nature, or some other signature acceptable
    to the domain. This other signature may be as simple as a graphical image
    representing a hand-written signature, or a signature ceremony Different
    signature approaches have different utilities.
        If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
    """
    id: code        
    extension: [Extension]        
    type: [Coding]!        
    when: code!        
    who: SignatureWho!        
    onBehalfOf: SignatureOnBehalfOf        
    targetFormat: code        
    sigFormat: code        
    data: code        
}