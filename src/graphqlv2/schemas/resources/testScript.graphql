# This file is auto-generated by generate_classes so do not edit manually
# import Meta from "../complex_types/meta.graphql"
# import URI from "../simple_types/uri.graphql"
# import Code from "../simple_types/code.graphql"
# import Narrative from "../complex_types/narrative.graphql"
# import Extension from "../extensions/extension.graphql"
# import Identifier from "../complex_types/identifier.graphql"
# import DateTime from "../simple_types/dateTime.graphql"
# import ContactDetail from "../complex_types/contactDetail.graphql"
# import Markdown from "../simple_types/markdown.graphql"
# import UsageContext from "../complex_types/usageContext.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import TestScriptOrigin from "../backbone_elements/testScriptOrigin.graphql"
# import TestScriptDestination from "../backbone_elements/testScriptDestination.graphql"
# import TestScriptMetadata from "../backbone_elements/testScriptMetadata.graphql"
# import TestScriptFixture from "../backbone_elements/testScriptFixture.graphql"
# import Account from "../resources/account.graphql"
# import ActivityDefinition from "../resources/activityDefinition.graphql"
# import AdministrableProductDefinition from "../resources/administrableProductDefinition.graphql"
# import AdverseEvent from "../resources/adverseEvent.graphql"
# import AllergyIntolerance from "../resources/allergyIntolerance.graphql"
# import Appointment from "../resources/appointment.graphql"
# import AppointmentResponse from "../resources/appointmentResponse.graphql"
# import AuditEvent from "../resources/auditEvent.graphql"
# import Basic from "../resources/basic.graphql"
# import Binary from "../resources/binary.graphql"
# import BiologicallyDerivedProduct from "../resources/biologicallyDerivedProduct.graphql"
# import BodyStructure from "../resources/bodyStructure.graphql"
# import Bundle from "../resources/bundle.graphql"
# import CapabilityStatement from "../resources/capabilityStatement.graphql"
# import CarePlan from "../resources/carePlan.graphql"
# import CareTeam from "../resources/careTeam.graphql"
# import CatalogEntry from "../resources/catalogEntry.graphql"
# import ChargeItem from "../resources/chargeItem.graphql"
# import ChargeItemDefinition from "../resources/chargeItemDefinition.graphql"
# import Citation from "../resources/citation.graphql"
# import Claim from "../resources/claim.graphql"
# import ClaimResponse from "../resources/claimResponse.graphql"
# import ClinicalImpression from "../resources/clinicalImpression.graphql"
# import ClinicalUseDefinition from "../resources/clinicalUseDefinition.graphql"
# import CodeSystem from "../resources/codeSystem.graphql"
# import Communication from "../resources/communication.graphql"
# import CommunicationRequest from "../resources/communicationRequest.graphql"
# import CompartmentDefinition from "../resources/compartmentDefinition.graphql"
# import Composition from "../resources/composition.graphql"
# import ConceptMap from "../resources/conceptMap.graphql"
# import Condition from "../resources/condition.graphql"
# import Consent from "../resources/consent.graphql"
# import Contract from "../resources/contract.graphql"
# import Coverage from "../resources/coverage.graphql"
# import CoverageEligibilityRequest from "../resources/coverageEligibilityRequest.graphql"
# import CoverageEligibilityResponse from "../resources/coverageEligibilityResponse.graphql"
# import DetectedIssue from "../resources/detectedIssue.graphql"
# import Device from "../resources/device.graphql"
# import DeviceDefinition from "../resources/deviceDefinition.graphql"
# import DeviceMetric from "../resources/deviceMetric.graphql"
# import DeviceRequest from "../resources/deviceRequest.graphql"
# import DeviceUseStatement from "../resources/deviceUseStatement.graphql"
# import DiagnosticReport from "../resources/diagnosticReport.graphql"
# import DocumentManifest from "../resources/documentManifest.graphql"
# import DocumentReference from "../resources/documentReference.graphql"
# import Encounter from "../resources/encounter.graphql"
# import Endpoint from "../resources/endpoint.graphql"
# import EnrollmentRequest from "../resources/enrollmentRequest.graphql"
# import EnrollmentResponse from "../resources/enrollmentResponse.graphql"
# import EpisodeOfCare from "../resources/episodeOfCare.graphql"
# import EventDefinition from "../resources/eventDefinition.graphql"
# import Evidence from "../resources/evidence.graphql"
# import EvidenceReport from "../resources/evidenceReport.graphql"
# import EvidenceVariable from "../resources/evidenceVariable.graphql"
# import ExampleScenario from "../resources/exampleScenario.graphql"
# import ExplanationOfBenefit from "../resources/explanationOfBenefit.graphql"
# import FamilyMemberHistory from "../resources/familyMemberHistory.graphql"
# import Flag from "../resources/flag.graphql"
# import Goal from "../resources/goal.graphql"
# import GraphDefinition from "../resources/graphDefinition.graphql"
# import Group from "../resources/group.graphql"
# import GuidanceResponse from "../resources/guidanceResponse.graphql"
# import HealthcareService from "../resources/healthcareService.graphql"
# import ImagingStudy from "../resources/imagingStudy.graphql"
# import Immunization from "../resources/immunization.graphql"
# import ImmunizationEvaluation from "../resources/immunizationEvaluation.graphql"
# import ImmunizationRecommendation from "../resources/immunizationRecommendation.graphql"
# import ImplementationGuide from "../resources/implementationGuide.graphql"
# import Ingredient from "../resources/ingredient.graphql"
# import InsurancePlan from "../resources/insurancePlan.graphql"
# import Invoice from "../resources/invoice.graphql"
# import Library from "../resources/library.graphql"
# import Linkage from "../resources/linkage.graphql"
# import List from "../resources/list.graphql"
# import Location from "../resources/location.graphql"
# import ManufacturedItemDefinition from "../resources/manufacturedItemDefinition.graphql"
# import Measure from "../resources/measure.graphql"
# import MeasureReport from "../resources/measureReport.graphql"
# import Media from "../resources/media.graphql"
# import Medication from "../resources/medication.graphql"
# import MedicationAdministration from "../resources/medicationAdministration.graphql"
# import MedicationDispense from "../resources/medicationDispense.graphql"
# import MedicationKnowledge from "../resources/medicationKnowledge.graphql"
# import MedicationRequest from "../resources/medicationRequest.graphql"
# import MedicationStatement from "../resources/medicationStatement.graphql"
# import MedicinalProductDefinition from "../resources/medicinalProductDefinition.graphql"
# import MessageDefinition from "../resources/messageDefinition.graphql"
# import MessageHeader from "../resources/messageHeader.graphql"
# import MolecularSequence from "../resources/molecularSequence.graphql"
# import NamingSystem from "../resources/namingSystem.graphql"
# import NutritionOrder from "../resources/nutritionOrder.graphql"
# import NutritionProduct from "../resources/nutritionProduct.graphql"
# import Observation from "../resources/observation.graphql"
# import ObservationDefinition from "../resources/observationDefinition.graphql"
# import OperationDefinition from "../resources/operationDefinition.graphql"
# import OperationOutcome from "../resources/operationOutcome.graphql"
# import Organization from "../resources/organization.graphql"
# import OrganizationAffiliation from "../resources/organizationAffiliation.graphql"
# import PackagedProductDefinition from "../resources/packagedProductDefinition.graphql"
# import Patient from "../resources/patient.graphql"
# import PaymentNotice from "../resources/paymentNotice.graphql"
# import PaymentReconciliation from "../resources/paymentReconciliation.graphql"
# import Person from "../resources/person.graphql"
# import PlanDefinition from "../resources/planDefinition.graphql"
# import Practitioner from "../resources/practitioner.graphql"
# import PractitionerRole from "../resources/practitionerRole.graphql"
# import Procedure from "../resources/procedure.graphql"
# import Provenance from "../resources/provenance.graphql"
# import Questionnaire from "../resources/questionnaire.graphql"
# import QuestionnaireResponse from "../resources/questionnaireResponse.graphql"
# import RegulatedAuthorization from "../resources/regulatedAuthorization.graphql"
# import RelatedPerson from "../resources/relatedPerson.graphql"
# import RequestGroup from "../resources/requestGroup.graphql"
# import ResearchDefinition from "../resources/researchDefinition.graphql"
# import ResearchElementDefinition from "../resources/researchElementDefinition.graphql"
# import ResearchStudy from "../resources/researchStudy.graphql"
# import ResearchSubject from "../resources/researchSubject.graphql"
# import RiskAssessment from "../resources/riskAssessment.graphql"
# import Schedule from "../resources/schedule.graphql"
# import SearchParameter from "../resources/searchParameter.graphql"
# import ServiceRequest from "../resources/serviceRequest.graphql"
# import Slot from "../resources/slot.graphql"
# import Specimen from "../resources/specimen.graphql"
# import SpecimenDefinition from "../resources/specimenDefinition.graphql"
# import StructureDefinition from "../resources/structureDefinition.graphql"
# import StructureMap from "../resources/structureMap.graphql"
# import Subscription from "../resources/subscription.graphql"
# import SubscriptionStatus from "../resources/subscriptionStatus.graphql"
# import SubscriptionTopic from "../resources/subscriptionTopic.graphql"
# import Substance from "../resources/substance.graphql"
# import SubstanceDefinition from "../resources/substanceDefinition.graphql"
# import SupplyDelivery from "../resources/supplyDelivery.graphql"
# import SupplyRequest from "../resources/supplyRequest.graphql"
# import Task from "../resources/task.graphql"
# import TerminologyCapabilities from "../resources/terminologyCapabilities.graphql"
# import TestReport from "../resources/testReport.graphql"
# import TestScript from "../resources/testScript.graphql"
# import ValueSet from "../resources/valueSet.graphql"
# import VerificationResult from "../resources/verificationResult.graphql"
# import VisionPrescription from "../resources/visionPrescription.graphql"
# import Parameters from "../resources/parameters.graphql"
# import Resource from "../resources/resource.graphql"
# import TestScriptVariable from "../backbone_elements/testScriptVariable.graphql"
# import TestScriptSetup from "../backbone_elements/testScriptSetup.graphql"
# import TestScriptTest from "../backbone_elements/testScriptTest.graphql"
# import TestScriptTeardown from "../backbone_elements/testScriptTeardown.graphql"

"""
Reference type for Profile
"""
type TestScriptProfileReference {
    id: String
    extension: [Extension]
    reference: String
    resource: Resource
    type: URI
    identifier: Identifier
    display: String
}


"""
TestScript
    A structured set of tests against a FHIR server or client implementation to
    determine compliance against the FHIR specification.
    If the element is present, it must have either a @value, an @id, or extensions
"""
type TestScript implements DomainResource & Resource @key(fields: "id") {
    resourceType: String
    """
    The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
    """
    id: ID!
    """
    The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
    """
    meta: Meta
    """
    A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
    """
    implicitRules: URI
    """
    The base language in which the resource is written.
    """
    language: Code
    """
    A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
    """
    text: Narrative
    """
    These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
    """
    contained: [Resource]
    """
    May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
    """
    extension: [Extension]
    """
    May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
    
    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
    """
    modifierExtension: [Extension]
    """
    An absolute URI that is used to identify this test script when it is
    referenced in a specification, model, design or an instance; also called its
    canonical identifier. This SHOULD be globally unique and SHOULD be a literal
    address at which at which an authoritative instance of this test script is (or
    will be) published. This URL can be the target of a canonical reference. It
    SHALL remain the same when the test script is stored on different servers.
    """
    url: URI
    """
    A formal identifier that is used to identify this test script when it is
    represented in other formats, or referenced in a specification, model, design
    or an instance.
    """
    identifier: Identifier
    """
    The identifier that is used to identify this version of the test script when
    it is referenced in a specification, model, design or instance. This is an
    arbitrary value managed by the test script author and is not expected to be
    globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
    managed version is not available. There is also no expectation that versions
    can be placed in a lexicographical sequence.
    """
    version: String
    """
    A natural language name identifying the test script. This name should be
    usable as an identifier for the module by machine processing applications such
    as code generation.
    """
    name: String
    """
    A short, descriptive, user-friendly title for the test script.
    """
    title: String
    """
    The status of this test script. Enables tracking the life-cycle of the
    content.
    """
    status: Code
    """
    A Boolean value to indicate that this test script is authored for testing
    purposes (or education/evaluation/marketing) and is not intended to be used
    for genuine usage.
    """
    experimental: Boolean
    """
    The date  (and optionally time) when the test script was published. The date
    must change when the business version changes and it must change if the status
    code changes. In addition, it should change when the substantive content of
    the test script changes.
    """
    date: DateTime
    """
    The name of the organization or individual that published the test script.
    """
    publisher: String
    """
    Contact details to assist a user in finding and communicating with the
    publisher.
    """
    contact: [ContactDetail]
    """
    A free text natural language description of the test script from a consumer's
    perspective.
    """
    description: Markdown
    """
    The content was developed with a focus and intent of supporting the contexts
    that are listed. These contexts may be general categories (gender, age, ...)
    or may be references to specific programs (insurance plans, studies, ...) and
    may be used to assist with indexing and searching for appropriate test script
    instances.
    """
    useContext: [UsageContext]
    """
    A legal or geographic region in which the test script is intended to be used.
    """
    jurisdiction: [CodeableConcept]
    """
    Explanation of why this test script is needed and why it has been designed as
    it has.
    """
    purpose: Markdown
    """
    A copyright statement relating to the test script and/or its contents.
    Copyright statements are generally legal restrictions on the use and
    publishing of the test script.
    """
    copyright: Markdown
    """
    An abstract server used in operations within this test script in the origin
    element.
    """
    origin: [TestScriptOrigin]
    """
    An abstract server used in operations within this test script in the
    destination element.
    """
    destination: [TestScriptDestination]
    """
    The required capability must exist and are assumed to function correctly on
    the FHIR server being tested.
    """
    metadata: TestScriptMetadata
    """
    Fixture in the test script - by reference (uri). All fixtures are required for
    the test script to execute.
    """
    fixture: [TestScriptFixture]
    """
    Reference to the profile to be used for validation.
    """
    profile: [TestScriptProfileReference]
    """
    Variable is set based either on element value in response body or on header
    field value in the response headers.
    """
    variable: [TestScriptVariable]
    """
    A series of required setup operations before tests are executed.
    """
    setup: TestScriptSetup
    """
    A test in this script.
    """
    test: [TestScriptTest]
    """
    A series of operations required to clean up after all the tests are executed
    (successfully or otherwise).
    """
    teardown: TestScriptTeardown
}

type TestScriptBundleEntry {
    """
    None
    """
    id: String
    """
    A series of links that provide context to this entry.
    """
    link: [BundleLink]
    """
    The Absolute URL for the resource.  The fullUrl SHALL NOT disagree with the id
    in the resource - i.e. if the fullUrl is not a urn:uuid, the URL shall be
    version-independent URL consistent with the Resource.id. The fullUrl is a
    version independent reference to the resource. The fullUrl element SHALL have
    a value except that:
    * fullUrl can be empty on a POST (although it does not need to when specifying
    a temporary id for reference in the bundle)
    * Results from operations might involve resources that are not identified.
    """
    fullUrl: URI
    """
    TestScript resource
    """
    resource: TestScript

    """
    Information about the search process that lead to the creation of this entry.
    """
    search: BundleSearch
    """
    Additional information about how this entry should be processed as part of a
    transaction or batch.  For history, it shows how the entry was processed to
    create the version contained in the entry.
    """
    request: BundleRequest
    """
    Indicates the results of processing the corresponding 'request' entry in the
    batch or transaction being responded to or what the results of an operation
    where when returning history.
    """
    response: BundleResponse
}

type TestScriptBundle {
    id: String
    meta: Meta
    identifier: [Identifier]
    type: Code
    timestamp: Instant
    total: Int
    entry: [TestScriptBundleEntry]
}
