# This file is auto-generated by generate_classes so do not edit manually
# import Meta from "../complex_types/meta.graphql"
# import URI from "../simple_types/uri.graphql"
# import Code from "../simple_types/code.graphql"
# import Narrative from "../complex_types/narrative.graphql"
# import Extension from "../extensions/extension.graphql"
# import Identifier from "../complex_types/identifier.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import Reference from "../complex_types/reference.graphql"
# import DateTime from "../simple_types/dateTime.graphql"
# import Quantity from "../complex_types/quantity.graphql"
# import Markdown from "../simple_types/markdown.graphql"
# import PackagedProductDefinitionLegalStatusOfSupply from "../backbone_elements/packagedProductDefinitionLegalStatusOfSupply.graphql"
# import MarketingStatus from "../backbone_elements/marketingStatus.graphql"
# import PackagedProductDefinitionPackage from "../backbone_elements/packagedProductDefinitionPackage.graphql"

"""
Reference type for PackageFor
"""
type PackagedProductDefinitionPackageForReference {
    id: String
    extension: [Extension]
    reference: String
    resource: MedicinalProductDefinition
    type: URI
    identifier: Identifier
    display: String
}

"""
Reference type for Manufacturer
"""
type PackagedProductDefinitionManufacturerReference {
    id: String
    extension: [Extension]
    reference: String
    resource: Organization
    type: URI
    identifier: Identifier
    display: String
}


"""
PackagedProductDefinition
    A medically related item or items, in a container or package.
    If the element is present, it must have either a @value, an @id, or extensions
"""
type PackagedProductDefinition implements DomainResource & Resource @key(fields: "id") {
    resourceType: String
    """
    The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
    """
    id: ID!
    """
    The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
    """
    meta: Meta
    """
    A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
    """
    implicitRules: URI
    """
    The base language in which the resource is written.
    """
    language: Code
    """
    A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
    """
    text: Narrative
    """
    These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
    """
    contained: [Resource]
    """
    May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
    """
    extension: [Extension]
    """
    May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
    
    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
    """
    modifierExtension: [Extension]
    """
    A unique identifier for this package as whole. Unique instance identifiers
    assigned to a package by manufacturers, regulators, drug catalogue custodians
    or other organizations.
    """
    identifier: [Identifier]
    """
    A name for this package. Typically what it would be listed as in a drug
    formulary or catalogue, inventory etc.
    """
    name: String
    """
    A high level category e.g. medicinal product, raw material, shipping/transport
    container, etc.
    """
    type: CodeableConcept
    """
    The product that this is a pack for.
    """
    packageFor: [PackagedProductDefinitionPackageForReference]
    """
    The status within the lifecycle of this item. A high level status, this is not
    intended to duplicate details carried elsewhere such as legal status, or
    authorization or marketing status.
    """
    status: CodeableConcept
    """
    The date at which the given status became applicable.
    """
    statusDate: DateTime
    """
    A total of the complete count of contained items of a particular type/form,
    independent of sub-packaging or organization. This can be considered as the
    pack size. This attribute differs from containedItem.amount in that it can
    give a single aggregated count of all tablet types in a pack, even when these
    are different manufactured items. For example a pill pack of 21 tablets plus 7
    sugar tablets, can be denoted here as '28 tablets'. This attribute is
    repeatable so that the different item types in one pack type can be counted
    (e.g. a count of vials and count of syringes). Each repeat must have different
    units, so that it is clear what the different sets of counted items are, and
    it is not intended to allow different counts of similar items (e.g. not '2
    tubes and 3 tubes'). Repeats are not to be used to represent different pack
    sizes (e.g. 20 pack vs. 50 pack) - which would be different instances of this
    resource.
    """
    containedItemQuantity: [Quantity]
    """
    Textual description. Note that this is not the name of the package or product.
    """
    description: Markdown
    """
    The legal status of supply of the packaged item as classified by the
    regulator.
    """
    legalStatusOfSupply: [PackagedProductDefinitionLegalStatusOfSupply]
    """
    Allows specifying that an item is on the market for sale, or that it is not
    available, and the dates and locations associated.
    """
    marketingStatus: [MarketingStatus]
    """
    Allows the key features to be recorded, such as "hospital pack", "nurse
    prescribable", "calendar pack".
    """
    characteristic: [CodeableConcept]
    """
    States whether a drug product is supplied with another item such as a diluent
    or adjuvant.
    """
    copackagedIndicator: Boolean
    """
    Manufacturer of this package type. When there are multiple it means these are
    all possible manufacturers.
    """
    manufacturer: [PackagedProductDefinitionManufacturerReference]
    """
    A packaging item, as a container for medically related items, possibly with
    other packaging items within, or a packaging component, such as bottle cap
    (which is not a device or a medication manufactured item).
    """
    package: PackagedProductDefinitionPackage
}

type PackagedProductDefinitionBundleEntry {
    """
    None
    """
    id: String
    """
    A series of links that provide context to this entry.
    """
    link: [BundleLink]
    """
    The Absolute URL for the resource.  The fullUrl SHALL NOT disagree with the id
    in the resource - i.e. if the fullUrl is not a urn:uuid, the URL shall be
    version-independent URL consistent with the Resource.id. The fullUrl is a
    version independent reference to the resource. The fullUrl element SHALL have
    a value except that:
    * fullUrl can be empty on a POST (although it does not need to when specifying
    a temporary id for reference in the bundle)
    * Results from operations might involve resources that are not identified.
    """
    fullUrl: URI
    """
    PackagedProductDefinition resource
    """
    resource: PackagedProductDefinition

    """
    Information about the search process that lead to the creation of this entry.
    """
    search: BundleSearch
    """
    Additional information about how this entry should be processed as part of a
    transaction or batch.  For history, it shows how the entry was processed to
    create the version contained in the entry.
    """
    request: BundleRequest
    """
    Indicates the results of processing the corresponding 'request' entry in the
    batch or transaction being responded to or what the results of an operation
    where when returning history.
    """
    response: BundleResponse
}

type PackagedProductDefinitionBundle {
    id: String
    meta: Meta
    identifier: [Identifier]
    type: Code
    timestamp: Instant
    total: Int
    entry: [PackagedProductDefinitionBundleEntry]
}
