# This file is auto-generated by generate_classes so do not edit manually
# import Meta from "../complex_types/meta.graphql"
# import URI from "../simple_types/uri.graphql"
# import Code from "../simple_types/code.graphql"
# import Narrative from "../complex_types/narrative.graphql"
# import Extension from "../extensions/extension.graphql"
# import Identifier from "../complex_types/identifier.graphql"
# import Reference from "../complex_types/reference.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import DateTime from "../simple_types/dateTime.graphql"
# import Period from "../complex_types/period.graphql"
# import Instant from "../simple_types/instant.graphql"
# import positiveInt from "../simple_types/int.graphql"
# import Attachment from "../complex_types/attachment.graphql"
# import Annotation from "../complex_types/annotation.graphql"

union MediaBasedOn = ServiceRequest | CarePlan

"""
Reference type for BasedOn
"""
type MediaBasedOnReference {
    id: String
    extension: [Extension]
    reference: String
    resource: MediaBasedOn
    type: URI
    identifier: Identifier
    display: String
}

"""
Reference type for PartOf
"""
type MediaPartOfReference {
    id: String
    extension: [Extension]
    reference: String
    resource: Resource
    type: URI
    identifier: Identifier
    display: String
}

union MediaSubject = Patient | Practitioner | PractitionerRole | Group | Device | Specimen | Location

"""
Reference type for Subject
"""
type MediaSubjectReference {
    id: String
    extension: [Extension]
    reference: String
    resource: MediaSubject
    type: URI
    identifier: Identifier
    display: String
}

"""
Reference type for Encounter
"""
type MediaEncounterReference {
    id: String
    extension: [Extension]
    reference: String
    resource: Encounter
    type: URI
    identifier: Identifier
    display: String
}

union MediaOperator = Practitioner | PractitionerRole | Organization | CareTeam | Patient | Device | RelatedPerson

"""
Reference type for Operator
"""
type MediaOperatorReference {
    id: String
    extension: [Extension]
    reference: String
    resource: MediaOperator
    type: URI
    identifier: Identifier
    display: String
}

union MediaDevice = Device | DeviceMetric

"""
Reference type for Device
"""
type MediaDeviceReference {
    id: String
    extension: [Extension]
    reference: String
    resource: MediaDevice
    type: URI
    identifier: Identifier
    display: String
}


"""
Media
    A photo, video, or audio recording acquired or used in healthcare. The actual
    content may be inline or provided by direct reference.
    If the element is present, it must have either a @value, an @id, or extensions
"""
type Media implements DomainResource & Resource @key(fields: "id") {
    resourceType: String
    """
    The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
    """
    id: ID!
    """
    The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
    """
    meta: Meta
    """
    A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
    """
    implicitRules: URI
    """
    The base language in which the resource is written.
    """
    language: Code
    """
    A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
    """
    text: Narrative
    """
    These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
    """
    contained: [Resource]
    """
    May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
    """
    extension: [Extension]
    """
    May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
    
    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
    """
    modifierExtension: [Extension]
    """
    Identifiers associated with the image - these may include identifiers for the
    image itself, identifiers for the context of its collection (e.g. series ids)
    and context ids such as accession numbers or other workflow identifiers.
    """
    identifier: [Identifier]
    """
    A procedure that is fulfilled in whole or in part by the creation of this
    media.
    """
    basedOn: [MediaBasedOnReference]
    """
    A larger event of which this particular event is a component or step.
    """
    partOf: [MediaPartOfReference]
    """
    The current state of the {{title}}.
    """
    status: Code
    """
    A code that classifies whether the media is an image, video or audio recording
    or some other media category.
    """
    type: CodeableConcept
    """
    Details of the type of the media - usually, how it was acquired (what type of
    device). If images sourced from a DICOM system, are wrapped in a Media
    resource, then this is the modality.
    """
    modality: CodeableConcept
    """
    The name of the imaging view e.g. Lateral or Antero-posterior (AP).
    """
    view: CodeableConcept
    """
    Who/What this Media is a record of.
    """
    subject: MediaSubjectReference
    """
    The encounter that establishes the context for this media.
    """
    encounter: MediaEncounterReference
    """
    None
    """
    createdDateTime: DateTime
    """
    None
    """
    createdPeriod: Period
    """
    The date and time this version of the media was made available to providers,
    typically after having been reviewed.
    """
    issued: Instant
    """
    The person who administered the collection of the image.
    """
    operator: MediaOperatorReference
    """
    Describes why the event occurred in coded or textual form.
    """
    reasonCode: [CodeableConcept]
    """
    Indicates the site on the subject's body where the observation was made (i.e.
    the target site).
    """
    bodySite: CodeableConcept
    """
    The name of the device / manufacturer of the device  that was used to make the
    recording.
    """
    deviceName: String
    """
    The device used to collect the media.
    """
    device: MediaDeviceReference
    """
    Height of the image in pixels (photo/video).
    """
    height: Int
    """
    Width of the image in pixels (photo/video).
    """
    width: Int
    """
    The number of frames in a photo. This is used with a multi-page fax, or an
    imaging acquisition context that takes multiple slices in a single image, or
    an animated gif. If there is more than one frame, this SHALL have a value in
    order to alert interface software that a multi-frame capable rendering widget
    is required.
    """
    frames: Int
    """
    The duration of the recording in seconds - for audio and video.
    """
    duration: Float
    """
    The actual content of the media - inline or by direct reference to the media
    source file.
    """
    content: Attachment
    """
    Comments made about the media by the performer, subject or other participants.
    """
    note: [Annotation]
}

type MediaBundleEntry {
    """
    None
    """
    id: String
    """
    A series of links that provide context to this entry.
    """
    link: [BundleLink]
    """
    The Absolute URL for the resource.  The fullUrl SHALL NOT disagree with the id
    in the resource - i.e. if the fullUrl is not a urn:uuid, the URL shall be
    version-independent URL consistent with the Resource.id. The fullUrl is a
    version independent reference to the resource. The fullUrl element SHALL have
    a value except that:
    * fullUrl can be empty on a POST (although it does not need to when specifying
    a temporary id for reference in the bundle)
    * Results from operations might involve resources that are not identified.
    """
    fullUrl: URI
    """
    Media resource
    """
    resource: Media

    """
    Information about the search process that lead to the creation of this entry.
    """
    search: BundleSearch
    """
    Additional information about how this entry should be processed as part of a
    transaction or batch.  For history, it shows how the entry was processed to
    create the version contained in the entry.
    """
    request: BundleRequest
    """
    Indicates the results of processing the corresponding 'request' entry in the
    batch or transaction being responded to or what the results of an operation
    where when returning history.
    """
    response: BundleResponse
}

type MediaBundle {
    id: String
    meta: Meta
    identifier: [Identifier]
    type: Code
    timestamp: Instant
    total: Int
    entry: [MediaBundleEntry]
}
