# This file is auto-generated by generate_classes so do not edit manually
# import Meta from "../complex_types/meta.graphql"
# import URI from "../simple_types/uri.graphql"
# import Code from "../simple_types/code.graphql"
# import Narrative from "../complex_types/narrative.graphql"
# import Extension from "../extensions/extension.graphql"
# import Identifier from "../complex_types/identifier.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import Reference from "../complex_types/reference.graphql"
# import DateTime from "../simple_types/dateTime.graphql"
# import Annotation from "../complex_types/annotation.graphql"
# import ListEntry from "../backbone_elements/listEntry.graphql"

union ListSubject = Patient | Group | Device | Location

"""
Reference type for Subject
"""
type ListSubjectReference {
    id: String
    extension: [Extension]
    reference: String
    resource: ListSubject
    type: URI
    identifier: Identifier
    display: String
}

"""
Reference type for Encounter
"""
type ListEncounterReference {
    id: String
    extension: [Extension]
    reference: String
    resource: Encounter
    type: URI
    identifier: Identifier
    display: String
}

union ListSource = Practitioner | PractitionerRole | Patient | Device

"""
Reference type for Source
"""
type ListSourceReference {
    id: String
    extension: [Extension]
    reference: String
    resource: ListSource
    type: URI
    identifier: Identifier
    display: String
}


"""
List
    A list is a curated collection of resources.
    If the element is present, it must have either a @value, an @id, or extensions
"""
type List implements DomainResource & Resource @key(fields: "id") {
    resourceType: String
    """
    The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
    """
    id: ID!
    """
    The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content might not always be associated with
    version changes to the resource.
    """
    meta: Meta
    """
    A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content. Often,
    this is a reference to an implementation guide that defines the special rules
    along with other profiles etc.
    """
    implicitRules: URI
    """
    The base language in which the resource is written.
    """
    language: Code
    """
    A human-readable narrative that contains a summary of the resource and can be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
    """
    text: Narrative
    """
    These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
    """
    contained: [Resource]
    """
    May be used to represent additional information that is not part of the basic
    definition of the resource. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
    """
    extension: [Extension]
    """
    May be used to represent additional information that is not part of the basic
    definition of the resource and that modifies the understanding of the element
    that contains it and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
    
    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
    """
    modifierExtension: [Extension]
    """
    Identifier for the List assigned for business purposes outside the context of
    FHIR.
    """
    identifier: [Identifier]
    """
    Indicates the current state of this list.
    """
    status: Code
    """
    How this list was prepared - whether it is a working list that is suitable for
    being maintained on an ongoing basis, or if it represents a snapshot of a list
    of items from another source, or whether it is a prepared list where items may
    be marked as added, modified or deleted.
    """
    mode: Code
    """
    A label for the list assigned by the author.
    """
    title: String
    """
    This code defines the purpose of the list - why it was created.
    """
    code: CodeableConcept
    """
    The common subject (or patient) of the resources that are in the list if there
    is one.
    """
    subject: ListSubjectReference
    """
    The encounter that is the context in which this list was created.
    """
    encounter: ListEncounterReference
    """
    The date that the list was prepared.
    """
    date: DateTime
    """
    The entity responsible for deciding what the contents of the list were. Where
    the list was created by a human, this is the same as the author of the list.
    """
    source: ListSourceReference
    """
    What order applies to the items in the list.
    """
    orderedBy: CodeableConcept
    """
    Comments that apply to the overall list.
    """
    note: [Annotation]
    """
    Entries in this list.
    """
    entry: [ListEntry]
    """
    If the list is empty, why the list is empty.
    """
    emptyReason: CodeableConcept
}

type ListBundleEntry {
    """
    None
    """
    id: String
    """
    A series of links that provide context to this entry.
    """
    link: [BundleLink]
    """
    The Absolute URL for the resource.  The fullUrl SHALL NOT disagree with the id
    in the resource - i.e. if the fullUrl is not a urn:uuid, the URL shall be
    version-independent URL consistent with the Resource.id. The fullUrl is a
    version independent reference to the resource. The fullUrl element SHALL have
    a value except that:
    * fullUrl can be empty on a POST (although it does not need to when specifying
    a temporary id for reference in the bundle)
    * Results from operations might involve resources that are not identified.
    """
    fullUrl: URI
    """
    List resource
    """
    resource: List

    """
    Information about the search process that lead to the creation of this entry.
    """
    search: BundleSearch
    """
    Additional information about how this entry should be processed as part of a
    transaction or batch.  For history, it shows how the entry was processed to
    create the version contained in the entry.
    """
    request: BundleRequest
    """
    Indicates the results of processing the corresponding 'request' entry in the
    batch or transaction being responded to or what the results of an operation
    where when returning history.
    """
    response: BundleResponse
}

type ListBundle {
    id: String
    meta: Meta
    identifier: [Identifier]
    type: Code
    timestamp: Instant
    total: Int
    entry: [ListBundleEntry]
}
