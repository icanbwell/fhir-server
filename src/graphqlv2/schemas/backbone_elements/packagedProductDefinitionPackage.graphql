# This file is auto-generated by generate_classes so do not edit manually
# import Extension from "../extensions/extension.graphql"
# import Identifier from "../complex_types/identifier.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import integer from "../simple_types/int.graphql"
# import PackagedProductDefinitionShelfLifeStorage from "../backbone_elements/packagedProductDefinitionShelfLifeStorage.graphql"
# import Reference from "../complex_types/reference.graphql"
# import PackagedProductDefinitionProperty from "../backbone_elements/packagedProductDefinitionProperty.graphql"
# import PackagedProductDefinitionContainedItem from "../backbone_elements/packagedProductDefinitionContainedItem.graphql"

"""
Reference type for Manufacturer
"""
type PackagedProductDefinitionPackageManufacturerReference {
    id: String
    extension: [Extension]
    reference: Organization
    type: uri
    identifier: Identifier
    display: String
}


"""
PackagedProductDefinition.Package
    A medically related item or items, in a container or package.
"""
type PackagedProductDefinitionPackage {
    """
    None
    """
    id: String
    """
    May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
    """
    extension: [Extension]
    """
    May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.
    
    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
    """
    modifierExtension: [Extension]
    """
    An identifier that is specific to this particular part of the packaging.
    Including possibly Data Carrier Identifier (a GS1 barcode).
    """
    identifier: [Identifier]
    """
    The physical type of the container of the items.
    """
    type: CodeableConcept
    """
    The quantity of this level of packaging in the package that contains it. If
    specified, the outermost level is always 1.
    """
    quantity: Int
    """
    Material type of the package item.
    """
    material: [CodeableConcept]
    """
    A possible alternate material for this part of the packaging, that is allowed
    to be used instead of the usual material (e.g. different types of plastic for
    a blister sleeve).
    """
    alternateMaterial: [CodeableConcept]
    """
    Shelf Life and storage information.
    """
    shelfLifeStorage: [PackagedProductDefinitionShelfLifeStorage]
    """
    Manufacturer of this package Item. When there are multiple it means these are
    all possible manufacturers.
    """
    manufacturer: [PackagedProductDefinitionPackageManufacturerReference]
    """
    General characteristics of this item.
    """
    property: [PackagedProductDefinitionProperty]
    """
    The item(s) within the packaging.
    """
    containedItem: [PackagedProductDefinitionContainedItem]
    """
    Allows containers (and parts of containers) parwithin containers, still a
    single packaged product.  See also PackagedProductDefinition.package.contained
    Item.item(PackagedProductDefinition).
    """
    package: [PackagedProductDefinitionPackage]
}
