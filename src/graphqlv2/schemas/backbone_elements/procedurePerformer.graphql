# This file is auto-generated by generate_classes so do not edit manually
# import Extension from "../extensions/extension.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import Reference from "../complex_types/reference.graphql"

union ProcedurePerformerActor = Practitioner | PractitionerRole | Organization | Patient | RelatedPerson | Device

"""
Reference type for Actor
"""
type ProcedurePerformerActorReference {
    id: String
    extension: [Extension]
    reference: String
    resource: ProcedurePerformerActor
    type: URI
    identifier: Identifier
    display: String
}

"""
Reference type for OnBehalfOf
"""
type ProcedurePerformerOnBehalfOfReference {
    id: String
    extension: [Extension]
    reference: String
    resource: Organization
    type: URI
    identifier: Identifier
    display: String
}


"""
Procedure.Performer
    An action that is or was performed on or for a patient. This can be a physical
    intervention like an operation, or less invasive like long term services,
    counseling, or hypnotherapy.
"""
type ProcedurePerformer {
    """
    None
    """
    id: String
    """
    May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
    """
    extension: [Extension]
    """
    May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.
    
    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
    """
    modifierExtension: [Extension]
    """
    Distinguishes the type of involvement of the performer in the procedure. For
    example, surgeon, anaesthetist, endoscopist.
    """
    function: CodeableConcept
    """
    The practitioner who was involved in the procedure.
    """
    actor: ProcedurePerformerActorReference
    """
    The organization the device or practitioner was acting on behalf of.
    """
    onBehalfOf: ProcedurePerformerOnBehalfOfReference
}
