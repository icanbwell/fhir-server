# This file is auto-generated by generate_classes so do not edit manually
# import Extension from "../extensions/extension.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import Reference from "../complex_types/reference.graphql"
# import DateTime from "../simple_types/dateTime.graphql"
# import Code from "../simple_types/code.graphql"
# import Markdown from "../simple_types/markdown.graphql"

union ContractContentDefinitionPublisher = Practitioner | PractitionerRole | Organization

"""
Reference type for Publisher
"""
type ContractContentDefinitionPublisherReference {
    id: String
    extension: [Extension]
    reference: String
    resource: ContractContentDefinitionPublisher
    type: URI
    identifier: Identifier
    display: String
}


"""
Contract.ContentDefinition
    Legally enforceable, formally recorded unilateral or bilateral directive i.e.,
    a policy or agreement.
"""
type ContractContentDefinition {
    """
    None
    """
    id: String
    """
    May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
    """
    extension: [Extension]
    """
    May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.
    
    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
    """
    modifierExtension: [Extension]
    """
    Precusory content structure and use, i.e., a boilerplate, template,
    application for a contract such as an insurance policy or benefits under a
    program, e.g., workers compensation.
    """
    type: CodeableConcept
    """
    Detailed Precusory content type.
    """
    subType: CodeableConcept
    """
    The  individual or organization that published the Contract precursor content.
    """
    publisher: ContractContentDefinitionPublisherReference
    """
    The date (and optionally time) when the contract was published. The date must
    change when the business version changes and it must change if the status code
    changes. In addition, it should change when the substantive content of the
    contract changes.
    """
    publicationDate: DateTime
    """
    amended | appended | cancelled | disputed | entered-in-error | executable |
    executed | negotiable | offered | policy | rejected | renewed | revoked |
    resolved | terminated.
    """
    publicationStatus: Code
    """
    A copyright statement relating to Contract precursor content. Copyright
    statements are generally legal restrictions on the use and publishing of the
    Contract precursor content.
    """
    copyright: Markdown
}
