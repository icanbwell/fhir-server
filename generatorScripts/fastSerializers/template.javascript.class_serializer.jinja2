// This file is auto-generated by generate_classes so do not edit manually
{% macro lower_case_first_letter(text) %}
    {{- text[0]|lower }}{{ text[1:] -}}
{% endmacro %}
{% macro upper_case_first_letter(text) %}
    {{- text[0]|upper }}{{ text[1:] -}}
{% endmacro %}
{# Collect unique types and their import info #}
{% set imported_types = {} %}
{% for property in fhir_entity.properties %}
    {% if property.cleaned_type != fhir_entity.cleaned_name %}
        {% if property.is_resource %}
            {% set _ = imported_types.update({property.cleaned_type: '../resources/' + lower_case_first_letter(property.type_snake_case) + '.js'}) %}
        {% elif property.is_extension or property.is_complex or property.fhir_type == "Element" %}
            {% set _ = imported_types.update({property.cleaned_type: '../complex_types/' + lower_case_first_letter(property.type_snake_case) + '.js'}) %}
        {% elif property.fhir_type == "BackboneElement" %}
            {% set _ = imported_types.update({property.cleaned_type: '../backbone_elements/' + lower_case_first_letter(property.type_snake_case) + '.js'}) %}
        {% elif property.cleaned_type == "ResourceContainer" %}
            {% set _ = imported_types.update({property.cleaned_type: '../simple_types/' + lower_case_first_letter(property.type_snake_case) + '.js'}) %}
        {% endif %}
    {% endif %}
{% endfor %}

{# Generate lazy loaded imports #}
{% for type, path in imported_types.items() %}
/** @type {import('{{ path }}')} */
let {{ type }}Serializer;
{% endfor %}

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    {% for type, path in imported_types.items() %}
    if (serializerName === '{{ type }}' && !{{ type }}Serializer) {
        {{ type }}Serializer = require('{{ path }}');
        return {{ type }}Serializer;
    }
    {% endfor %}
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class {{ fhir_entity.cleaned_name }}Serializer {
    static propertyToSerializerMap = {
    {% for property in fhir_entity.properties %}
    {% if not property.is_v2_supported %}
        {% if property.is_resource or property.is_extension or property.cleaned_type == "ResourceContainer" or property.fhir_type == "BackboneElement" or property.is_complex or property.fhir_type == "Element" %}
        '{{ property.name }}': (value) => {
            initializeSerializers('{{ property.cleaned_type }}');
            {% if not property.is_code and (property.is_resource or property.is_extension or property.fhir_type == "BackboneElement" or property.is_complex or property.fhir_type == "Element") %}
                {% if property.is_list %}
            return FhirResourceSerializer.serializeArray(value, {{ property.cleaned_type | replace(".","") }}Serializer);
                    {% else %}
            return FhirResourceSerializer.serialize(value, {{ property.cleaned_type | replace(".","") }}Serializer);
                    {% endif %}
            {% elif property.cleaned_type == "ResourceContainer" %}
                {% if property.is_list %}
            return FhirResourceSerializer.serializeArray(value);
                    {% else %}
            return FhirResourceSerializer.serialize(value);
                    {% endif %}
            {% else %}
            return FhirResourceSerializer.serialize(value)
            {% endif %}
        },
        {% else %}
        '{{ property.name }}': null,
        {% endif %}
    {% endif %}
    {% endfor %}
    {% if fhir_entity.is_resource %}
        'resourceType': null,
    {% endif %}
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined 
     * according to FHIR Specs
     * @param {any} rawJson 
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;
        
        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => {{ fhir_entity.cleaned_name }}Serializer.serialize(item));
        }
        
        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];
            
            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }
            
            if (propertyName in {{ fhir_entity.cleaned_name }}Serializer.propertyToSerializerMap) {
                if ({{ fhir_entity.cleaned_name }}Serializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = {{ fhir_entity.cleaned_name }}Serializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });
        
        return rawJson;
    }
}

module.exports = {{ fhir_entity.cleaned_name }}Serializer;

